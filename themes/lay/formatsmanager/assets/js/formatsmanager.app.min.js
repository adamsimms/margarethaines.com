(() => {
  // lay/formatsmanager/assets/src/js/formatsmanager/row/variable_font_views.js
  var VariableFontPresetsView = Marionette.View.extend({
    tagName: "td",
    template: _.template(`
        <select>
            <option value="">--SELECT--</option>
            <%= getOptions() %>
        </select>
    `),
    events: {
      "change select": "onSelect"
    },
    templateContext: function() {
      var view = this;
      return {
        getOptions: function() {
          var optionsMarkup = "";
          var instances = view.model.get("instances");
          for (var i = 0; i < instances.length; i++) {
            var instance = instances[i];
            optionsMarkup += '<option value="' + i + '">' + instance.name.en + "</option>";
          }
          return optionsMarkup;
        }
      };
    },
    onSelect: function() {
      var index = this.$el.find("select").val();
      index = parseInt(index, 10);
      var instances = this.model.get("instances");
      var instance = instances[index];
      this.triggerMethod("presetSelected", index, instance);
    },
    onMaybeDeselect: function(axes_collection) {
      var index = this.$el.find("select").val();
      if (index == "") {
        return;
      }
      index = parseInt(index, 10);
      var instances = this.model.get("instances");
      var coordinates = instances[index].coordinates;
      for (var prop in coordinates) {
        var coordinate = coordinates[prop];
        var model = axes_collection.findWhere({ "tag": prop });
        if (model.get("value") != coordinate) {
          this.$el.find("option:selected").prop("selected", false);
          break;
        }
      }
    },
    onAttach: function() {
      jQuery("<td>Variable Font Presets</td>").insertBefore(this.$el);
    },
    onRender: function() {
      var ix = this.getOption("selected_index");
      if (typeof ix != "undefined") {
        this.$el.find('option[value="' + ix + '"]').prop("selected", true);
      }
    }
  });
  var VariableFontAxisView = Marionette.View.extend({
    template: _.template(`
        <td>Variable <%= getName() %></td>
        <td><input data-type="<%= tag %>" value="<%= getValue() %>" type="range" id="start" name="volume" min="<%= minValue %>" max="<%= maxValue %>" /></td>
    `),
    templateContext: function() {
      var view = this;
      return {
        getValue: function() {
          if (typeof view.model.get("value") != "undefined") {
            return view.model.get("value");
          } else {
            return 0;
          }
        },
        getName: function() {
          var return_value = "";
          var tag = view.model.get("tag");
          return_value = tag;
          var name = view.model.get("name");
          if (name !== null && typeof name == "object" && _.has(name, "en")) {
            return_value = name.en;
          }
          return return_value;
        }
      };
    },
    className: "variable-font-slider",
    tagName: "div",
    events: {
      "input input": "onInput"
    },
    onInput: function() {
      var val = this.$el.find("input").val();
      this.model.set("value", val);
      this.triggerMethod("input:triggered", val);
    },
    onRender: function() {
      this.triggerMethod("input");
    }
  });
  var VariableFontAxesCollectionView = Marionette.CompositeView.extend({
    template: _.template(`
    <div class="collection-container"></div>
    `),
    className: "variable-font-slider-collection-view",
    tagName: "td",
    childViewContainer: ".collection-container",
    childView: VariableFontAxisView,
    onRender: function() {
      this.$el.attr("colspan", 2);
    },
    // generate css
    onChildviewInputTriggered: function() {
      var css = "font-variation-settings: ";
      var array = [];
      this.collection.each(function(model) {
        var val = model.get("value");
        if (typeof val == "undefined") {
          val = 0;
        }
        array.push('"' + model.get("tag") + '" ' + val);
      });
      css += array.join(", ");
      css += ";";
      this.triggerMethod("fontAxesUpdated", css, this.collection);
    }
  });

  // lay/formatsmanager/assets/src/js/formatsmanager/row/variable_font_controller.js
  var is_active = true;
  var variable_font_controller = {
    generate_variable_font_sliders: function(view) {
      if (!is_active) {
        return;
      }
      generate_variable_font_sliders(view);
    },
    setJSON: function() {
      if (!is_active) {
        return;
      }
      setJSON();
    }
  };
  var variable_font_controller_default = variable_font_controller;
  var stateMap = {
    jsonObject: null
  };
  var setJSON = function() {
    var jsonString = jQuery.trim(jQuery("#fontmanager_json").val());
    if (typeof jsonString != "undefined" && jsonString != "") {
      var jsonObject = JSON.parse(jsonString);
      stateMap.jsonObject = jsonObject;
    }
  };
  var generate_variable_font_sliders = function(view) {
    var fontname = view.model.get("fontfamily");
    get_axes_for_fontname(fontname).done(function(axes, instances) {
      if (axes == null && instances == null) {
        view.getRegion("variableFontsAxes").empty();
        view.getRegion("variableFontsPresets").empty();
        view.model.unset("variablesettings");
        view.model.unset("variable-preset-index");
      }
      console.log("axes", axes);
      console.log("instances", instances);
      if (axes != null) {
        var collection = new Backbone.Collection(axes);
        var existing_variablesettings = view.model.get("variablesettings");
        if (typeof existing_variablesettings != "undefined" && jQuery.trim(existing_variablesettings) != "") {
          collection = new Backbone.Collection(existing_variablesettings);
        }
        var collection_view = new VariableFontAxesCollectionView({ collection });
        view.showChildView("variableFontsAxes", collection_view);
        if (instances != null && instances.length > 0) {
          var selected_index = view.model.get("variable-preset-index");
          var instances_model = new Backbone.Model({ "instances": instances });
          var presets_view = new VariableFontPresetsView({ model: instances_model, selected_index });
          view.showChildView("variableFontsPresets", presets_view);
        }
      }
    });
  };
  var get_axes_for_fontname = function(fontname) {
    var deferred = new jQuery.Deferred();
    var font_url = false;
    for (var index in stateMap.jsonObject) {
      var font = stateMap.jsonObject[index];
      if (font.type === "attachment" && font.fontname === fontname) {
        font_url = font.url;
      }
    }
    if (font_url) {
      opentype.load(font_url, function(err, font2) {
        if (err) {
          console.error("Font could not be loaded: " + err);
        } else {
          var vf = new VariableFont(font2);
          var otFont = vf.openTypeFont;
          const axes = vf.getAxes();
          const instances = vf.getInstances();
          const count = vf.getInstancesCount();
          const axes_count = vf.getAxesCount();
          deferred.resolve(axes, instances);
        }
      });
    }
    return deferred.promise();
  };

  // lay/formatsmanager/assets/src/js/formatsmanager/row/row_view.js
  var RowView = Marionette.View.extend({
    template: "#row-view",
    tagName: "tbody",
    className: function() {
      return "textformat-" + this.model.get("formatname");
    },
    regions: {
      variableFontsAxes: ".variable-font-axes-region",
      variableFontsPresets: ".variable-font-instances-region"
    },
    templateContext: function() {
      var view = this;
      var model = this.model;
      var _this = this;
      return {
        showFormatName: function() {
          return model.get("formatname");
        },
        showFormatType: function() {
          return model.get("type");
        },
        showText: function() {
          var type = model.get("type");
          switch (type) {
            case "Paragraph":
              return `A heat dome will build over the Midwest and East by late week, sending temperatures soaring well above average:\u2026`;
              break;
            case "Headline":
              return "A heat dome will build over the Midwest and East by late week, sending temperatures soaring well above average:\u2026";
              break;
            case "Character":
              return "A heat dome will build over the Midwest and East by late week, sending temperatures soaring well above average:\u2026";
              break;
          }
        },
        deleteCSS: function() {
          if (model.get("not-deletable") == true && formatslgPassedData.woocommerceActive == true || model.get("formatname") == "Default") {
            return "display:none;";
          }
        },
        getStyleDesktop: function() {
          return view.triggerMethod("get:style:desktop");
        },
        getStyleTablet: function() {
          return view.triggerMethod("get:style:tablet");
        },
        getStylePhone: function() {
          return view.triggerMethod("get:style:phone");
        },
        getSpaceBottomStyleDesktop: function() {
          if (model.get("type") != "Character") {
            var spacebottommu = model.get("spacebottommu");
            if (typeof spacebottommu == "undefined") {
              spacebottommu = "px";
            }
            return String() + 'style="height:' + model.get("spacebottom") + spacebottommu + ';"';
          } else {
            return String() + 'style="height:0;"';
          }
        },
        getSpaceTopStyleDesktop: function() {
          if (model.get("type") != "Character") {
            var spacetopmu = model.get("spacetopmu");
            if (typeof spacetopmu == "undefined") {
              spacetopmu = "px";
            }
            return String() + 'style="height:' + model.get("spacetop") + spacetopmu + ';"';
          } else {
            return String() + 'style="height:0;"';
          }
        },
        getSpaceBottomStylePhone: function() {
          if (model.get("type") != "Character") {
            var spacebottom = model.get("phone-spacebottom");
            if (typeof spacebottom == "undefined") {
              spacebottom = "20";
            }
            var phonespacebottommu = model.get("phone-spacebottommu");
            if (typeof phonespacebottommu == "undefined") {
              phonespacebottommu = "px";
            }
            return String() + 'style="height:' + spacebottom + phonespacebottommu + ';"';
          } else {
            return String() + 'style="height:0;"';
          }
        },
        getSpaceTopStylePhone: function() {
          if (model.get("type") != "Character") {
            var spacetop = model.get("phone-spacetop");
            if (typeof spacetop == "undefined") {
              spacetop = "0";
            }
            var phonespacetopmu = model.get("phone-spacetopmu");
            if (typeof phonespacetopmu == "undefined") {
              phonespacetopmu = "px";
            }
            return String() + 'style="height:' + spacetop + phonespacetopmu + ';"';
          } else {
            return String() + 'style="height:0;"';
          }
        },
        getSpaceBottomStyleTablet: function() {
          if (model.get("type") != "Character") {
            var spacebottom = model.get("tablet-spacebottom");
            if (typeof spacebottom == "undefined") {
              spacebottom = "20";
            }
            var tabletspacebottommu = model.get("tablet-spacebottommu");
            if (typeof tabletspacebottommu == "undefined") {
              tabletspacebottommu = "px";
            }
            return String() + 'style="height:' + spacebottom + tabletspacebottommu + ';"';
          } else {
            return String() + 'style="height:0;"';
          }
        },
        getSpaceTopStyleTablet: function() {
          if (model.get("type") != "Character") {
            var spacetop = model.get("tablet-spacetop");
            if (typeof spacetop == "undefined") {
              spacetop = "0";
            }
            var tabletspacetopmu = model.get("tablet-spacetopmu");
            if (typeof tabletspacetopmu == "undefined") {
              tabletspacetopmu = "px";
            }
            return String() + 'style="height:' + spacetop + tabletspacetopmu + ';"';
          } else {
            return String() + 'style="height:0;"';
          }
        }
      };
    },
    events: {
      "change .js-existing-format-type-select": "changeType",
      "change .js-headline-type-select": "changeHeadlineType",
      "click .js-font-style-italic": "toggleItalic",
      "click .js-font-style-underline": "toggleUnderline",
      "click .js-font-style-border-bottom": "toggleBorderBottom",
      "click .js-font-style-caps": "toggleCaps",
      "click .js-delete-row": "deleteRow",
      "change .font-size-mu": "updateFontMu",
      "change .font-select": "updateFont",
      "change .font-weight-select": "updateFontWeight",
      "input .font-size": "updateFontSize",
      "input .line-height": "updateLineHeight",
      "change .line-height-mu": "updateLineHeightMu",
      "input .letter-spacing": "updateLetterSpacing",
      "input .space-bottom": "updateSpaceBottom",
      "input .space-top": "updateSpaceTop",
      "input .text-indent": "updateTextIndent",
      "click .align-js": "updateTextAlign",
      "input .phone-line-height": "phoneUpdateLineHeight",
      "change .phone-line-height-mu": "phoneUpdateLineHeightMu",
      "change .phone-font-size-mu": "phoneUpdateFontMu",
      "input .phone-font-size": "phoneUpdateFontSize",
      "input .phone-space-bottom": "phoneUpdateSpaceBottom",
      "input .phone-space-top": "phoneUpdateSpaceTop",
      "input .tablet-line-height": "tabletUpdateLineHeight",
      "change .tablet-line-height-mu": "tabletUpdateLineHeightMu",
      "change .tablet-font-size-mu": "tabletUpdateFontMu",
      "input .tablet-font-size": "tabletUpdateFontSize",
      "input .tablet-space-bottom": "tabletUpdateSpaceBottom",
      "input .tablet-space-top": "tabletUpdateSpaceTop",
      "change .space-bottom-mu": "updateSpaceBottomMu",
      "change .space-top-mu": "updateSpaceTopMu",
      "change .phone-space-bottom-mu": "phoneUpdateSpaceBottomMu",
      "change .phone-space-top-mu": "phoneUpdateSpaceTopMu",
      "change .tablet-space-bottom-mu": "tabletUpdateSpaceBottomMu",
      "change .tablet-space-top-mu": "tabletUpdateSpaceTopMu",
      "click .textformat-collapsable": "onCollapsableClick",
      "click .js-color-rectangle": "onClickColorRectangle",
      "click .colorpicker": "onClickColorPickerInput",
      "input .js-desktop-style": "onChangeText",
      "input .js-tablet-style": "onChangeText",
      "input .js-phone-style": "onChangeText"
    },
    onChangeText: function(event) {
      var val = event.target.innerHTML;
      jQuery(".js-desktop-style").not(jQuery(event.target)).each(function() {
        jQuery(this).html(val);
      });
      jQuery(".js-tablet-style").not(jQuery(event.target)).each(function() {
        jQuery(this).html(val);
      });
      jQuery(".js-phone-style").not(jQuery(event.target)).each(function() {
        jQuery(this).html(val);
      });
    },
    onClickColorPickerInput: function() {
      this.$el.find("input.colorpicker").iris("show");
    },
    onClickColorRectangle: function() {
      this.$el.find("input.colorpicker").iris("show");
    },
    onCollapsableClick: function(event) {
      var collapsed = this.model.get("collapsed", collapsed);
      if (typeof collapsed == "undefined") {
        collapsed = false;
      }
      if (collapsed == false) {
        this.$el.addClass("lay-textformat-collapsed");
        this.model.set("collapsed", true);
      } else {
        this.$el.removeClass("lay-textformat-collapsed");
        this.model.set("collapsed", false);
      }
      entities_default.updateJSON();
    },
    changeHeadlineType: function(event) {
      var headlinetype = event.target.value;
      this.model.set("headlinetype", headlinetype);
      entities_default.updateJSON();
    },
    changeType: function(event) {
      var type = event.target.value;
      this.model.set("type", type);
      entities_default.updateJSON();
      this.render();
    },
    updateLineHeightMu: function(event) {
      var mu = event.target.value;
      this.model.set("lineheightmu", mu);
      var lh = this.model.get("lineheight");
      if (formatslgPassedData.advancedLineHeights) {
        this.$el.find(".js-desktop-style, .js-desktop-style p").css("line-height", lh + mu);
      } else {
        this.$el.find(".js-style, .js-style p").css("line-height", lh);
      }
      entities_default.updateJSON();
    },
    tabletUpdateLineHeightMu: function(event) {
      var mu = event.target.value;
      this.model.set("tablet-lineheightmu", mu);
      var lh = this.model.get("tablet-lineheight");
      if (typeof lh == "undefined") {
        lh = "1.2";
      }
      this.$el.find(".js-tablet-style, .js-tablet-style p").css("line-height", lh + mu);
      entities_default.updateJSON();
    },
    phoneUpdateLineHeightMu: function(event) {
      var mu = event.target.value;
      this.model.set("phone-lineheightmu", mu);
      var lh = this.model.get("phone-lineheight");
      if (typeof lh == "undefined") {
        lh = "1.2";
      }
      this.$el.find(".js-phone-style, .js-phone-style p").css("line-height", lh + mu);
      FormatsManager.Entities.API.updateJSON();
    },
    updateLineHeight: function(event) {
      var val = event.target.value;
      if (formatslgPassedData.advancedLineHeights) {
        var mu = this.model.get("lineheightmu");
        if (typeof mu == "undefined") {
          mu = "";
        }
        this.$el.find(".js-desktop-style, .js-desktop-style p").css("line-height", val + mu);
      } else {
        this.$el.find(".js-style, .js-style p").css("line-height", val);
      }
      this.model.set("lineheight", val);
      entities_default.updateJSON();
    },
    phoneUpdateLineHeight: function(event) {
      var val = event.target.value;
      var mu = this.model.get("phone-lineheightmu");
      if (typeof mu == "undefined") {
        mu = "";
      }
      this.$el.find(".js-phone-style, .js-phone-style p").css("line-height", val + mu);
      this.model.set("phone-lineheight", val);
      entities_default.updateJSON();
    },
    tabletUpdateLineHeight: function(event) {
      var val = event.target.value;
      var mu = this.model.get("tablet-lineheightmu");
      if (typeof mu == "undefined") {
        mu = "";
      }
      this.$el.find(".js-tablet-style, .js-tablet-style p").css("line-height", val + mu);
      this.model.set("tablet-lineheight", val);
      entities_default.updateJSON();
    },
    onGetStyleDesktop: function(extra_css) {
      var fontfamily = "font-family:" + this.model.get("fontfamily") + ";";
      var fontsizemu = this.model.get("fontsizemu");
      if (typeof fontsizemu == "undefined") {
        fontsizemu = "px";
      }
      var textindent = this.model.get("textindent");
      if (typeof textindent == "undefined") {
        textindent = "0";
      }
      var borderbottom = this.model.get("borderbottom");
      if (typeof borderbottom != "undefined" && borderbottom == true) {
        borderbottom = "border-bottom:1px solid;display:inline;";
      } else {
        borderbottom = "";
      }
      var italic = this.model.get("italic");
      if (typeof italic != "undefined" && italic == true) {
        italic = "font-style:italic;";
      } else {
        italic = "";
      }
      var underline = this.model.get("underline");
      if (typeof underline != "undefined" && underline == true) {
        underline = "text-decoration:underline;";
      } else {
        underline = "";
      }
      var caps = this.model.get("caps");
      if (typeof caps != "undefined" && caps == true) {
        caps = "text-transform:uppercase;";
      } else {
        caps = "";
      }
      var lineheightmu = "";
      if (formatslgPassedData.advancedLineHeights) {
        var lineheightmu = this.model.get("lineheightmu");
        if (typeof lineheightmu == "undefined") {
          lineheightmu = "";
        }
      }
      var css = String() + "font-size:" + this.model.get("fontsize") + fontsizemu + ";color:" + this.model.get("color") + ";line-height:" + this.model.get("lineheight") + lineheightmu + ";letter-spacing:" + this.model.get("letterspacing") + "em;" + fontfamily + "text-align:" + this.model.get("textalign") + ";font-weight:" + this.model.get("fontweight") + ";text-indent:" + textindent + "em;" + borderbottom + italic + underline + caps;
      if (typeof extra_css != "undefined") {
        css += extra_css;
      }
      return css;
    },
    onGetStyleTablet: function(extra_css) {
      var fontfamily = "font-family:" + this.model.get("fontfamily") + ";";
      var fontsizemu = this.model.get("tablet-fontsizemu");
      if (typeof fontsizemu == "undefined") {
        fontsizemu = "px";
      }
      var textindent = this.model.get("textindent");
      if (typeof textindent == "undefined") {
        textindent = "0";
      }
      var fontsize = this.model.get("tablet-fontsize");
      if (typeof fontsize == "undefined") {
        fontsize = "16";
      }
      var borderbottom = this.model.get("borderbottom");
      if (typeof borderbottom != "undefined" && borderbottom == true) {
        borderbottom = "border-bottom:1px solid;display:inline;";
      } else {
        borderbottom = "";
      }
      var italic = this.model.get("italic");
      if (typeof italic != "undefined" && italic == true) {
        italic = "font-style:italic;";
      } else {
        italic = "";
      }
      var underline = this.model.get("underline");
      if (typeof underline != "undefined" && underline == true) {
        underline = "text-decoration:underline;";
      } else {
        underline = "";
      }
      var caps = this.model.get("caps");
      if (typeof caps != "undefined" && caps == true) {
        caps = "text-transform:uppercase;";
      } else {
        caps = "";
      }
      var lineheightmu = "";
      var lineheight = this.model.get("lineheight");
      if (formatslgPassedData.advancedLineHeights) {
        var lineheightmu = this.model.get("tablet-lineheightmu");
        if (typeof lineheightmu == "undefined") {
          lineheightmu = "";
        }
        lineheight = this.model.get("tablet-lineheight");
        if (typeof lineheight == "undefined") {
          lineheight = "1.2";
        }
      }
      var css = String() + "font-size:" + fontsize + fontsizemu + ";color:" + this.model.get("color") + ";line-height:" + lineheight + lineheightmu + ";letter-spacing:" + this.model.get("letterspacing") + "em;" + fontfamily + "text-align:" + this.model.get("textalign") + ";font-weight:" + this.model.get("fontweight") + ";text-indent:" + textindent + "em;" + borderbottom + italic + underline + caps;
      if (typeof extra_css != "undefined") {
        css += extra_css;
      }
      return css;
    },
    onGetStylePhone: function(extra_css) {
      var fontfamily = "font-family:" + this.model.get("fontfamily") + ";";
      var fontsizemu = this.model.get("phone-fontsizemu");
      if (typeof fontsizemu == "undefined") {
        fontsizemu = "px";
      }
      var textindent = this.model.get("textindent");
      if (typeof textindent == "undefined") {
        textindent = "0";
      }
      var fontsize = this.model.get("phone-fontsize");
      if (typeof fontsize == "undefined") {
        fontsize = "16";
      }
      var borderbottom = this.model.get("borderbottom");
      if (typeof borderbottom != "undefined" && borderbottom == true) {
        borderbottom = "border-bottom:1px solid;display:inline;";
      } else {
        borderbottom = "";
      }
      var italic = this.model.get("italic");
      if (typeof italic != "undefined" && italic == true) {
        italic = "font-style:italic;";
      } else {
        italic = "";
      }
      var underline = this.model.get("underline");
      if (typeof underline != "undefined" && underline == true) {
        underline = "text-decoration:underline;";
      } else {
        underline = "";
      }
      var caps = this.model.get("caps");
      if (typeof caps != "undefined" && caps == true) {
        caps = "text-transform:uppercase;";
      } else {
        caps = "";
      }
      var lineheightmu = "";
      var lineheight = this.model.get("lineheight");
      if (formatslgPassedData.advancedLineHeights) {
        var lineheightmu = this.model.get("phone-lineheightmu");
        if (typeof lineheightmu == "undefined") {
          lineheightmu = "";
        }
        lineheight = this.model.get("phone-lineheight");
        if (typeof lineheight == "undefined") {
          lineheight = "1.2";
        }
      }
      var css = String() + "font-size:" + fontsize + fontsizemu + ";color:" + this.model.get("color") + ";line-height:" + lineheight + lineheightmu + ";letter-spacing:" + this.model.get("letterspacing") + "em;" + fontfamily + "text-align:" + this.model.get("textalign") + ";font-weight:" + this.model.get("fontweight") + ";text-indent:" + textindent + "em;" + borderbottom + italic + underline + caps;
      if (typeof extra_css != "undefined") {
        css += extra_css;
      }
      return css;
    },
    toggleCaps: function(event) {
      jQuery(event.currentTarget).toggleClass("active");
      if (jQuery(event.currentTarget).hasClass("active")) {
        this.model.set("caps", true);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css("text-transform", "uppercase");
      } else {
        this.model.set("caps", false);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css("text-transform", "");
      }
      entities_default.updateJSON();
    },
    toggleBorderBottom: function(event) {
      jQuery(event.currentTarget).toggleClass("active");
      if (jQuery(event.currentTarget).hasClass("active")) {
        var underline = this.model.get("underline");
        if (typeof underline != "undefined" && underline == true) {
          this.$el.find(".js-font-style-underline").click();
        }
        this.model.set("borderbottom", true);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css({
          "border-bottom": "1px solid",
          "display": "inline"
        });
      } else {
        this.model.set("borderbottom", false);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css({
          "border-bottom": "",
          "display": ""
        });
      }
      entities_default.updateJSON();
    },
    toggleUnderline: function(event) {
      jQuery(event.currentTarget).toggleClass("active");
      if (jQuery(event.currentTarget).hasClass("active")) {
        var borderbottom = this.model.get("borderbottom");
        if (typeof borderbottom != "undefined" && borderbottom == true) {
          this.$el.find(".js-font-style-border-bottom").click();
        }
        this.model.set("underline", true);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css("text-decoration", "underline");
      } else {
        this.model.set("underline", false);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css("text-decoration", "");
      }
      entities_default.updateJSON();
    },
    toggleItalic: function(event) {
      jQuery(event.currentTarget).toggleClass("active");
      if (jQuery(event.currentTarget).hasClass("active")) {
        this.model.set("italic", true);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css("font-style", "italic");
      } else {
        this.model.set("italic", false);
        this.$el.find(".js-phone-style, .js-phone-style p, .js-tablet-style, .js-tablet-style p, .js-desktop-style, .js-desktop-style p").css("font-style", "");
      }
      entities_default.updateJSON();
    },
    phoneUpdateFontSize: function(event) {
      var val = event.target.value;
      var mu = this.model.get("phone-fontsizemu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-phone-style, .js-phone-style p").css("font-size", val + mu);
      this.model.set("phone-fontsize", val);
      entities_default.updateJSON();
    },
    tabletUpdateFontSize: function(event) {
      var val = event.target.value;
      var mu = this.model.get("tablet-fontsizemu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-tablet-style, .js-tablet-style p").css("font-size", val + mu);
      this.model.set("tablet-fontsize", val);
      entities_default.updateJSON();
    },
    updateFontSize: function(event) {
      var val = event.target.value;
      var mu = this.model.get("fontsizemu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-desktop-style, .js-desktop-style p").css("font-size", val + mu);
      this.model.set("fontsize", val);
      entities_default.updateJSON();
    },
    phoneUpdateFontMu: function(event) {
      var mu = event.target.value;
      this.model.set("phone-fontsizemu", mu);
      var val = mu == "vw" ? 4 : 16;
      this.model.set("phone-fontsize", val);
      this.$el.find(".js-phone-style, .js-phone-style p").css("font-size", val + mu);
      this.$el.find(".phone-font-size").val(val);
      entities_default.updateJSON();
    },
    tabletUpdateFontMu: function(event) {
      var mu = event.target.value;
      this.model.set("tablet-fontsizemu", mu);
      var val = mu == "vw" ? 4 : 16;
      this.model.set("tablet-fontsize", val);
      this.$el.find(".js-tablet-style, .js-tablet-style p").css("font-size", val + mu);
      this.$el.find(".tablet-font-size").val(val);
      entities_default.updateJSON();
    },
    updateFontMu: function(event) {
      var mu = event.target.value;
      this.model.set("fontsizemu", mu);
      var val = mu == "vw" ? 4 : 16;
      this.model.set("fontsize", val);
      this.$el.find(".js-desktop-style, .js-desktop-style p").css("font-size", val + mu);
      this.$el.find(".font-size").val(val);
      entities_default.updateJSON();
    },
    updateTextAlign: function(event) {
      var $button = jQuery(event.currentTarget);
      var val = $button.attr("data-align");
      jQuery("button.align-js").removeClass("active");
      $button.addClass("active");
      this.$el.find(".js-style, .js-style p").css("text-align", val);
      this.model.set("textalign", val);
      entities_default.updateJSON();
    },
    updateSpaceBottom: function(event) {
      var val = event.target.value;
      var mu = this.model.get("spacebottommu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-desktop-spacebottom").css("height", val + mu);
      this.model.set("spacebottom", val);
      entities_default.updateJSON();
    },
    updateSpaceBottomMu: function(event) {
      var mu = event.target.value;
      this.model.set("spacebottommu", mu);
      var spacebottom = this.model.get("spacebottom");
      this.$el.find(".js-desktop-spacebottom").css("height", spacebottom + mu);
      entities_default.updateJSON();
    },
    updateSpaceTop: function(event) {
      var val = event.target.value;
      var mu = this.model.get("spacetopmu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-desktop-spacetop").css("height", val + mu);
      this.model.set("spacetop", val);
      entities_default.updateJSON();
    },
    updateSpaceTopMu: function(event) {
      var mu = event.target.value;
      this.model.set("spacetopmu", mu);
      var spacetop = this.model.get("spacetop");
      this.$el.find(".js-desktop-spacetop").css("height", spacetop + mu);
      entities_default.updateJSON();
    },
    phoneUpdateSpaceBottom: function(event) {
      var val = event.target.value;
      var mu = this.model.get("phone-spacebottommu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-phone-spacebottom").css("height", val + mu);
      this.model.set("phone-spacebottom", val);
      entities_default.updateJSON();
    },
    phoneUpdateSpaceBottomMu: function(event) {
      var mu = event.target.value;
      this.model.set("phone-spacebottommu", mu);
      var spacebottom = this.model.get("phone-spacebottom");
      this.$el.find(".js-phone-spacebottom").css("height", spacebottom + mu);
      entities_default.updateJSON();
    },
    phoneUpdateSpaceTop: function(event) {
      var val = event.target.value;
      var mu = this.model.get("phone-spacetopmu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-phone-spacetop").css("height", val + mu);
      this.model.set("phone-spacetop", val);
      entities_default.updateJSON();
    },
    tabletUpdateSpaceTopMu: function(event) {
      var mu = event.target.value;
      this.model.set("tablet-spacetopmu", mu);
      var spacetop = this.model.get("tablet-spacetop");
      this.$el.find(".js-tablet-spacetop").css("height", spacetop + mu);
      entities_default.updateJSON();
    },
    tabletUpdateSpaceBottom: function(event) {
      var val = event.target.value;
      var mu = this.model.get("tablet-spacebottommu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-tablet-spacebottom").css("height", val + mu);
      this.model.set("tablet-spacebottom", val);
      entities_default.updateJSON();
    },
    tabletUpdateSpaceBottomMu: function(event) {
      var mu = event.target.value;
      this.model.set("tablet-spacebottommu", mu);
      var spacebottom = this.model.get("tablet-spacebottom");
      this.$el.find(".js-tablet-spacebottom").css("height", spacebottom + mu);
      entities_default.updateJSON();
    },
    tabletUpdateSpaceTop: function(event) {
      var val = event.target.value;
      var mu = this.model.get("tablet-spacetopmu");
      if (typeof mu == "undefined") {
        mu = "px";
      }
      this.$el.find(".js-tablet-spacetop").css("height", val + mu);
      this.model.set("tablet-spacetop", val);
      entities_default.updateJSON();
    },
    tabletUpdateSpaceTopMu: function(event) {
      var mu = event.target.value;
      this.model.set("tablet-spacetopmu", mu);
      var spacetop = this.model.get("tablet-spacetop");
      this.$el.find(".js-tablet-spacetop").css("height", spacetop + mu);
      entities_default.updateJSON();
    },
    updateFont: function(event) {
      var val = event.target.value;
      this.$el.find(".js-style, .js-style p").css("font-family", val);
      this.model.set("fontfamily", val);
      this.getRegion("variableFontsAxes").empty();
      this.getRegion("variableFontsPresets").empty();
      this.$el.find(".variable-font-instances-region").html("");
      this.model.unset("variablesettings");
      this.model.unset("variable-preset-index");
      this.generateVariableFontSliders();
      entities_default.updateJSON();
    },
    updateFontWeight: function(event) {
      var val = event.target.value;
      this.$el.find(".js-style, .js-style p").css("font-weight", val);
      this.model.set("fontweight", val);
      entities_default.updateJSON();
    },
    updateLetterSpacing: function(event) {
      var val = event.target.value;
      this.$el.find(".js-style, .js-style p").css("letter-spacing", val + "em");
      this.model.set("letterspacing", val);
      entities_default.updateJSON();
    },
    updateTextIndent: function(event) {
      var val = event.target.value;
      this.$el.find(".js-style, .js-style p").css("text-indent", val + "em");
      this.model.set("textindent", val);
      entities_default.updateJSON();
    },
    updateColor: function(val) {
      this.$el.find(".js-color-rectangle").css("background-color", val);
      this.$el.find(".js-style, .js-style p").css("color", val);
      this.model.set("color", val);
      entities_default.updateJSON();
      this.updatePreviewBgColor();
    },
    deleteRow: function(e) {
      e.preventDefault();
      e.stopPropagation();
      row_controller_default.deleteFontRow(this.model);
    },
    onRender: function() {
      row_controller_default.setInputAttrs(this.$el, this.model);
      var self = this;
      var input = this.$el.find(".colorpicker");
      jQuery(input[0]).iris({
        hide: true,
        palettes: ["#000", "#fff", "#f00", "#0f0", "#00f", "#ff0", "#0ff", "#f0f"],
        change: function(event, ui) {
          self.updateColor(ui.color.toString());
        }
      });
      self.updatePreviewBgColor();
      self.generateVariableFontSliders();
      this.$el.attr("cid", this.model.cid);
    },
    generateVariableFontSliders: function() {
      variable_font_controller_default.generate_variable_font_sliders(this);
    },
    onChildviewPresetSelected: function(index, preset) {
      var collection_view = this.getRegion("variableFontsAxes").currentView;
      for (var prop in preset.coordinates) {
        var model = collection_view.collection.findWhere({ "tag": prop });
        model.set("value", preset.coordinates[prop]);
      }
      collection_view.render();
      this.model.set("variable-preset-index", index);
      entities_default.updateJSON();
    },
    onChildviewFontAxesUpdated: function(variable_css, collection) {
      this.triggerMethod("maybe:deselect:preset");
      this.model.set("variablesettings", collection.toJSON());
      entities_default.updateJSON();
      this.$el.find(".js-desktop-style").attr("style", this.triggerMethod("get:style:desktop", variable_css));
      this.$el.find(".js-tablet-style").attr("style", this.triggerMethod("get:style:tablet", variable_css));
      this.$el.find(".js-phone-style").attr("style", this.triggerMethod("get:style:phone", variable_css));
    },
    onMaybeDeselectPreset: function() {
      var axes_collection_view = this.getRegion("variableFontsAxes").currentView;
      var preset_view = this.getRegion("variableFontsPresets").currentView;
      if (typeof preset_view != "undefined") {
        preset_view.triggerMethod("maybe:deselect", axes_collection_view.collection);
      }
    },
    updatePreviewBgColor: function() {
      var color = this.model.get("color");
      if (color == "#ffffff") {
        this.$el.find(".format-preview-wrap").css("background-color", "rgb(235, 235, 235)");
      } else {
        this.$el.find(".format-preview-wrap").css("background-color", "");
      }
    },
    onAttach: function() {
    }
  });
  var RowsView = Marionette.CompositeView.extend({
    tagName: "div",
    template: "#row-composite-view",
    childViewContainer: ".js-formats-table",
    childView: RowView,
    events: {
      "click .js-add-format": "addFormat"
    },
    addFormat: function(e) {
      e.preventDefault();
      row_controller_default.insertRow();
    }
  });

  // lay/formatsmanager/assets/src/js/formatsmanager/row/row_controller.js
  var stateMap2 = {
    rowsView: null
  };
  var row_controller = {
    initRows: function(rows) {
      initRows(rows);
    },
    setRowOrder: function() {
      setRowOrder();
    },
    getRowsView: function() {
      return stateMap2.rowsView;
    },
    insertRow: function(attachment) {
      insertRow(attachment);
    },
    deleteFontRow: function(model) {
      deleteFontRow(model);
    },
    setInputAttrs: function($el, model) {
      setInputAttrs($el, model);
    }
  };
  var row_controller_default = row_controller;
  var setRowOrder = function() {
    var indices = [];
    var children = stateMap2.rowsView.$childViewContainer[0].children;
    for (var i = 0; i < children.length; i++) {
      var child = children[i];
      var cid = child.attributes.cid.value;
      indices[cid] = i;
    }
    console.log(indices);
    stateMap2.rowsView.children.each(function(childView, index) {
      var cid2 = childView.model.cid;
      var myIndex = indices[cid2];
      childView.model.set("index", myIndex);
    });
    stateMap2.rowsView.collection.sort();
    entities_default.updateJSON();
    console.log(stateMap2.rowsView);
  };
  var setInputAttrs = function($el, model) {
    var collapsed = model.get("collapsed");
    if (typeof collapsed != "undefined" && collapsed == true) {
      $el.addClass("lay-textformat-collapsed");
    } else {
      $el.removeClass("lay-textformat-collapsed");
    }
    var headlinetype = model.get("headlinetype");
    if (typeof headlinetype != "undefined") {
      $el.find('.js-headline-type-select option[value="' + headlinetype + '"]').attr("selected", "selected");
    } else {
      $el.find('.js-headline-type-select option[value="h1"]').attr("selected", "selected");
    }
    var lineheight = model.get("lineheight");
    $el.find(".line-height").val(lineheight);
    var lh_mu = model.get("lineheightmu");
    if (typeof lh_mu != "undefined") {
      $el.find('.line-height-mu option[value="' + lh_mu + '"]').attr("selected", "selected");
    }
    var tablineheight = model.get("tablet-lineheight");
    if (typeof tablineheight != "undefined") {
      $el.find(".tablet-line-height").val(tablineheight);
    }
    var tablh_mu = model.get("tablet-lineheightmu");
    if (typeof tablh_mu != "undefined") {
      $el.find('.tablet-line-height-mu option[value="' + tablh_mu + '"]').attr("selected", "selected");
    }
    var phonelineheight = model.get("phone-lineheight");
    if (typeof phonelineheight != "undefined") {
      $el.find(".phone-line-height").val(phonelineheight);
    }
    var phonelh_mu = model.get("phone-lineheightmu");
    if (typeof phonelh_mu != "undefined") {
      $el.find('.phone-line-height-mu option[value="' + phonelh_mu + '"]').attr("selected", "selected");
    }
    var fontsizemu = model.get("fontsizemu");
    if (typeof fontsizemu == "undefined") {
      fontsizemu = "px";
    }
    $el.find('.font-size-mu option[value="' + fontsizemu + '"]').attr("selected", "selected");
    var phonefontsizemu = model.get("phone-fontsizemu");
    if (typeof phonefontsizemu == "undefined") {
      phonefontsizemu = "px";
    }
    $el.find('.phone-font-size-mu option[value="' + phonefontsizemu + '"]').attr("selected", "selected");
    var tabletfontsizemu = model.get("tablet-fontsizemu");
    if (typeof tabletfontsizemu == "undefined") {
      tabletfontsizemu = "px";
    }
    $el.find('.tablet-font-size-mu option[value="' + tabletfontsizemu + '"]').attr("selected", "selected");
    var val = model.get("fontsize");
    $el.find(".font-size").val(val);
    var phonefontsize = model.get("phone-fontsize");
    if (typeof phonefontsize == "undefined") {
      phonefontsize = "16";
    }
    $el.find(".phone-font-size").val(phonefontsize);
    var tabletfontsize = model.get("tablet-fontsize");
    if (typeof tabletfontsize == "undefined") {
      tabletfontsize = "16";
    }
    $el.find(".tablet-font-size").val(tabletfontsize);
    val = model.get("color");
    $el.find(".colorpicker").val(val);
    $el.find(".color-rectangle").css("background-color", val);
    val = model.get("letterspacing");
    $el.find(".letter-spacing").val(val);
    val = model.get("spacebottom");
    $el.find(".space-bottom").val(val);
    val = model.get("spacetop");
    $el.find(".space-top").val(val);
    var phonespacetop = model.get("phone-spacetop");
    if (typeof phonespacetop == "undefined") {
      phonespacetop = "0";
    }
    $el.find(".phone-space-top").val(phonespacetop);
    var phonespacebottom = model.get("phone-spacebottom");
    if (typeof phonespacebottom == "undefined") {
      phonespacebottom = "20";
    }
    $el.find(".phone-space-bottom").val(phonespacebottom);
    var tabletspacetop = model.get("tablet-spacetop");
    if (typeof tabletspacetop == "undefined") {
      tabletspacetop = "0";
    }
    $el.find(".tablet-space-top").val(tabletspacetop);
    var tabletspacebottom = model.get("tablet-spacebottom");
    if (typeof tabletspacebottom == "undefined") {
      tabletspacebottom = "20";
    }
    $el.find(".tablet-space-bottom").val(tabletspacebottom);
    var textindent = model.get("textindent");
    if (typeof textindent != "undefined") {
      $el.find(".text-indent").val(textindent);
    }
    var textalign = model.get("textalign");
    if (typeof textalign != "undefined") {
      $el.find(".text-align-row button").removeClass("active");
      $el.find('.text-align-row button[data-align="' + textalign + '"]').addClass("active");
    }
    var fontweight = model.get("fontweight");
    if (fontweight == "normal" || typeof fontweight == "undefined") {
      fontweight = "400";
    }
    $el.find('.font-weight-select option[value="' + fontweight + '"]').attr("selected", "selected");
    val = model.get("fontfamily");
    var $fontselectOption = $el.find('.font-select option[value="' + val + '"]');
    if ($fontselectOption.length) {
      $el.find('.font-select option[value="' + val + '"]').attr("selected", "selected");
    }
    var borderbottom = model.get("borderbottom");
    if (typeof borderbottom != "undefined" && borderbottom == true) {
      $el.find(".js-font-style-border-bottom").addClass("active");
    }
    var italic = model.get("italic");
    if (typeof italic != "undefined" && italic == true) {
      $el.find(".js-font-style-italic").addClass("active");
    }
    var underline = model.get("underline");
    if (typeof underline != "undefined" && underline == true) {
      $el.find(".js-font-style-underline").addClass("active");
    }
    var caps = model.get("caps");
    if (typeof caps != "undefined" && caps == true) {
      $el.find(".js-font-style-caps").addClass("active");
    }
    var spacebottommu = model.get("spacebottommu");
    if (typeof spacebottommu == "undefined") {
      spacebottommu = "px";
    }
    $el.find('.space-bottom-mu option[value="' + spacebottommu + '"]').attr("selected", "selected");
    var spacetopmu = model.get("spacetopmu");
    if (typeof spacetopmu == "undefined") {
      spacetopmu = "px";
    }
    $el.find('.space-top-mu option[value="' + spacetopmu + '"]').attr("selected", "selected");
    var phonespacebottommu = model.get("phone-spacebottommu");
    if (typeof phonespacebottommu == "undefined") {
      phonespacebottommu = "px";
    }
    $el.find('.phone-space-bottom-mu option[value="' + phonespacebottommu + '"]').attr("selected", "selected");
    var phonespacetopmu = model.get("phone-spacetopmu");
    if (typeof phonespacetopmu == "undefined") {
      phonespacetopmu = "px";
    }
    $el.find('.phone-space-top-mu option[value="' + phonespacetopmu + '"]').attr("selected", "selected");
    var tabletspacebottommu = model.get("tablet-spacebottommu");
    if (typeof tabletspacebottommu == "undefined") {
      tabletspacebottommu = "px";
    }
    $el.find('.tablet-space-bottom-mu option[value="' + tabletspacebottommu + '"]').attr("selected", "selected");
    var tabletspacetopmu = model.get("tablet-spacetopmu");
    if (typeof tabletspacetopmu == "undefined") {
      tabletspacetopmu = "px";
    }
    $el.find('.tablet-space-top-mu option[value="' + tabletspacetopmu + '"]').attr("selected", "selected");
    var type = model.get("type");
    $el.find('.js-existing-format-type-select option[value="' + type + '"]').attr("selected", "selected");
  };
  var insertRow = function() {
    var name = jQuery(".js-format-name-input").val();
    var type = jQuery(".js-format-type").val();
    jQuery(".js-format-name-input").val("").removeClass("parsley-success");
    jQuery(".js-add-format").attr("disabled", "disabled");
    var copyOf = jQuery(".js-copy-formats").val();
    var row = null;
    if (copyOf == "") {
      row = new Backbone.Model({
        "formatname": name,
        "headlinetype": "h1",
        "type": type,
        "fontfamily": "helvetica,sans-serif",
        "fontsize": "16",
        "fontsizemu": "px",
        "fontweight": "400",
        "color": "#000",
        "lineheight": "1.2",
        "lineheightmu": "",
        "letterspacing": "0",
        "spacebottom": "20",
        "spacebottommu": "px",
        "spacetop": "0",
        "spacetopmu": "px",
        "textalign": "left",
        "text-indent": "0",
        "phone-lineheight": "1.2",
        "phone-lineheightmu": "",
        "phone-spacetop": "0",
        "phone-spacetopmu": "px",
        "phone-spacebottom": "20",
        "phone-spacebottommu": "px",
        "phone-fontsize": "16",
        "phone-fontsizemu": "px",
        "tablet-lineheight": "1.2",
        "tablet-lineheightmu": "",
        "tablet-spacetop": "0",
        "tablet-spacetopmu": "px",
        "tablet-spacebottom": "20",
        "tablet-spacebottommu": "px",
        "tablet-fontsize": "16",
        "tablet-fontsizemu": "px",
        "italic": false,
        "underline": false,
        "borderbottom": false,
        "caps": false,
        "collapsed": false
      });
    } else {
      stateMap2.rowsView.collection.each(function(model) {
        if (model.get("formatname") == copyOf) {
          var headlinetype = model.get("headlinetype");
          if (typeof headlinetype == "undefined") {
            headlinetype = "h1";
          }
          var phonespacetop = model.get("phone-spacetop");
          if (typeof phonespacetop == "undefined") {
            phonespacetop = model.get("spacetop");
          }
          var phonespacebottom = model.get("phone-spacebottom");
          if (typeof phonespacebottom == "undefined") {
            phonespacebottom = model.get("spacebottom");
          }
          var phonefontsize = model.get("phone-fontsize");
          if (typeof phonefontsize == "undefined") {
            phonefontsize = "16";
          }
          var phonefontsizemu = model.get("phone-fontsizemu");
          if (typeof phonefontsizemu == "undefined") {
            phonefontsizemu = "px";
          }
          var tabletspacetop = model.get("tablet-spacetop");
          if (typeof tabletspacetop == "undefined") {
            tabletspacetop = model.get("spacetop");
          }
          var tabletspacebottom = model.get("tablet-spacebottom");
          if (typeof tabletspacebottom == "undefined") {
            tabletspacebottom = model.get("spacebottom");
          }
          var tabletfontsize = model.get("tablet-fontsize");
          if (typeof tabletfontsize == "undefined") {
            tabletfontsize = "16";
          }
          var tabletfontsizemu = model.get("tablet-fontsizemu");
          if (typeof tabletfontsizemu == "undefined") {
            tabletfontsizemu = "px";
          }
          var textindent = model.get("textindent");
          if (typeof textindent == "undefined") {
            textindent = 0;
          }
          var fontsizemu = model.get("fontsizemu");
          if (typeof fontsizemu == "undefined") {
            fontsizemu = "px";
          }
          var spacebottommu = model.get("spacebottommu");
          if (typeof spacebottommu == "undefined") {
            spacebottommu = "px";
          }
          var spacetopmu = model.get("spacetopmu");
          if (typeof spacetopmu == "undefined") {
            spacetopmu = "px";
          }
          var phonespacebottommu = model.get("phone-spacebottommu");
          if (typeof phonespacebottommu == "undefined") {
            phonespacebottommu = "px";
          }
          var phonespacetopmu = model.get("phone-spacetopmu");
          if (typeof phonespacetopmu == "undefined") {
            phonespacetopmu = "px";
          }
          var tabletspacebottommu = model.get("tablet-spacebottommu");
          if (typeof tabletspacebottommu == "undefined") {
            tabletspacebottommu = "px";
          }
          var tabletspacetopmu = model.get("tablet-spacetopmu");
          if (typeof tabletspacetopmu == "undefined") {
            tabletspacetopmu = "px";
          }
          var caps = model.get("caps");
          if (typeof caps == "undefined") {
            caps = false;
          }
          var underline = model.get("underline");
          if (typeof underline == "undefined") {
            underline = false;
          }
          var borderbottom = model.get("borderbottom");
          if (typeof borderbottom == "undefined") {
            borderbottom = false;
          }
          var italic = model.get("italic");
          if (typeof italic == "undefined") {
            italic = false;
          }
          var lh_mu = model.get("lineheightmu");
          if (typeof lh_mu == "undefined") {
            lh_mu = "";
          }
          var tablineheight = model.get("tablet-lineheight");
          if (typeof lh_mu == "undefined") {
            tablineheight = "1.2";
          }
          var tablh_mu = model.get("tablet-lineheightmu");
          if (typeof tablh_mu == "undefined") {
            tablh_mu = "";
          }
          var phonelineheight = model.get("phone-lineheight");
          if (typeof phonelineheight == "undefined") {
            phonelineheight = "1.2";
          }
          var phonelh_mu = model.get("phone-lineheightmu");
          if (typeof phonelh_mu == "undefined") {
            phonelh_mu = "";
          }
          var variablesettings = model.get("variablesettings");
          if (typeof variablesettings == "undefined") {
            variablesettings = "";
          }
          var variablepresetindex = model.get("variable-preset-index");
          if (typeof variablepresetindex == "undefined") {
            variablepresetindex = "";
          }
          row = new Backbone.Model({
            "formatname": name,
            "type": type,
            "headlinetype": headlinetype,
            "fontfamily": model.get("fontfamily"),
            "fontsize": model.get("fontsize"),
            "fontsizemu": fontsizemu,
            "fontweight": model.get("fontweight"),
            "color": model.get("color"),
            "lineheight": model.get("lineheight"),
            "lineheightmu": lh_mu,
            "lineheight": model.get("lineheight"),
            "letterspacing": model.get("letterspacing"),
            "spacebottom": model.get("spacebottom"),
            "spacebottommu": spacebottommu,
            "spacetop": model.get("spacetop"),
            "spacetopmu": spacetopmu,
            "textalign": model.get("textalign"),
            "text-indent": textindent,
            "phone-lineheight": phonelineheight,
            "phone-lineheightmu": phonelh_mu,
            "phone-spacetop": phonespacetop,
            "phone-spacetopmu": phonespacetopmu,
            "phone-spacebottom": phonespacebottom,
            "phone-spacebottommu": phonespacebottommu,
            "phone-fontsize": phonefontsize,
            "phone-fontsizemu": phonefontsizemu,
            "tablet-lineheight": tablineheight,
            "tablet-lineheightmu": tablh_mu,
            "tablet-spacetop": tabletspacetop,
            "tablet-spacetopmu": tabletspacetopmu,
            "tablet-spacebottom": tabletspacebottom,
            "tablet-spacebottommu": tabletspacebottommu,
            "tablet-fontsize": tabletfontsize,
            "tablet-fontsizemu": tabletfontsizemu,
            "italic": italic,
            "underline": underline,
            "borderbottom": borderbottom,
            "caps": caps,
            "collapsed": false,
            "variablesettings": variablesettings,
            "variable-preset-index": variablepresetindex
          });
        }
      });
    }
    jQuery("select.js-copy-formats").append('<option value="' + name + '">' + name + "</option>");
    stateMap2.rowsView.collection.add(row);
    entities_default.updateJSON();
    jQuery('[data-toggle="tooltip"]').tooltip({
      container: "#formatsmanager"
    });
  };
  var deleteFontRow = function(model) {
    stateMap2.rowsView.collection.remove(model);
    jQuery('select.js-copy-formats option[value="' + model.get("formatname") + '"]').remove();
    entities_default.updateJSON();
  };
  var initRows = function(rows) {
    stateMap2.rowsView = new RowsView({
      collection: rows
    });
    bindRowsViewEvents();
  };
  var bindRowsViewEvents = function() {
  };

  // lay/formatsmanager/assets/src/js/formatsmanager/entities.js
  var stateMap3 = {
    jsonObject: null
  };
  var entities_controller = {
    getRowsEntities: function() {
      return getRowsEntities();
    },
    updateJSON: function() {
      updateJSON();
    },
    getJSON: function() {
      getJSON();
    },
    getJSONObject: function() {
      return stateMap3.jsonObject;
    },
    getFontsJSONObject: function() {
      return getFontsJSONObject();
    }
  };
  var entities_default = entities_controller;
  var myCollection = Backbone.Collection.extend({
    comparator: function(item) {
      return item.get("index");
    }
  });
  var getRowsEntities = function() {
    var rows = [];
    if (stateMap3.jsonObject != null) {
      rows = stateMap3.jsonObject;
    }
    return new myCollection(rows);
  };
  var getJSON = function() {
    var jsonString = jQuery.trim(jQuery("#formatsmanager_json").val());
    if (typeof jsonString != "undefined" && jsonString != "") {
      var jsonObject = JSON.parse(jsonString);
      stateMap3.jsonObject = jsonObject;
    }
  };
  var updateJSON = function() {
    var rowsView = row_controller_default.getRowsView();
    var json = rowsView.collection.toJSON();
    var jsonString = window.JSON.stringify(json, void 0, 2);
    jQuery("#formatsmanager_json").val(jsonString);
  };
  var getFontsJSONObject = function() {
    var jsonString = jQuery.trim(jQuery("#fontmanager_json").val());
    if (typeof jsonString != "undefined" && jsonString != "") {
      var jsonObject = JSON.parse(jsonString);
      return jsonObject;
    }
  };

  // lay/formatsmanager/assets/src/js/formatsmanager/manager/manager_controller.js
  var manager_controller = {
    showManager: function(app) {
      showManager(app);
    }
  };
  var manager_controller_default = manager_controller;
  var configureValidation = function() {
    window.ParsleyValidator.addValidator("isother", function(value, requirement) {
      var isOther = true;
      jQuery(".js-format-name").each(function() {
        if (jQuery(this).attr("data-name") == value) {
          isOther = false;
        }
      });
      return isOther;
    }, 32).addMessage("en", "isother", "This name is already used.");
    jQuery.listen("parsley:field:error", function(fieldInstance) {
      var arrErrorMsg = ParsleyUI.getErrorsMessages(fieldInstance);
      var errorMsg = arrErrorMsg.join(";");
      var $element = fieldInstance.$element;
      $element.popover({
        container: "body",
        placement: "bottom",
        content: errorMsg
      }).popover("show");
    });
    jQuery.listen("parsley:field:success", function(fieldInstance) {
      fieldInstance.$element.popover("hide");
    });
  };
  var bindValidation = function() {
    jQuery(".js-format-name-input").on("input propertychange", function() {
      var val = jQuery(this).parsley().validate();
      if (val == true) {
        jQuery(".js-add-format").removeAttr("disabled");
      } else {
        jQuery(".js-add-format").attr("disabled", "disabled");
      }
    });
  };
  var hideColorPickerOnOutsideClick = function() {
    jQuery(document).on("mousedown", function(e) {
      if (!jQuery(e.target).is(".colorpicker, .js-color-rectangle") && jQuery(e.target).closest(".iris-picker").length == 0) {
        jQuery("#formatsmanager .colorpicker").each(function() {
          jQuery(this).iris("hide");
        });
      }
    });
  };
  var showManager = function(app) {
    variable_font_controller_default.setJSON();
    entities_default.getJSON();
    var rows = entities_default.getRowsEntities();
    row_controller_default.initRows(rows);
    var rowsView = row_controller_default.getRowsView();
    app.showView(rowsView);
    configureValidation();
    bindValidation();
    jQuery('[data-toggle="tooltip"]').tooltip({
      container: "#formatsmanager"
    });
    hideColorPickerOnOutsideClick();
  };

  // lay/formatsmanager/assets/src/js/app.js
  var FormatsManager2 = Marionette.Application.extend({
    region: "#formatsmanager",
    onStart: function() {
      manager_controller_default.showManager(this);
      setTimeout(function() {
        initSortable();
      }, 1e3);
    }
  });
  var initSortable = function() {
    var el = document.getElementById("textformats-table");
    new Sortable(el, {
      animation: 150,
      handle: ".drag-icon",
      onEnd: function(evt) {
        row_controller_default.setRowOrder();
      }
    });
  };
  var formatsManager = new FormatsManager2();
  formatsManager.start();
})();
