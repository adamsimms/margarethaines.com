(() => {
  // lay/fontmanager/assets/src/js/fontmanager/modal/uploader_controller.js
  var uploader_controller = {
    showModal: function() {
      showModal();
    }
  };
  var uploader_controller_default = uploader_controller;
  var showModal = function() {
    const modal = wp.media({
      title: "Upload Font",
      // TODO: uncomment to only show woff / tested on chrome, safari and firefox
      library: { type: [
        "application/font-woff",
        "application/x-font-ttf",
        "font/woff2",
        "application/font-woff2",
        "application/x-font-woff2"
      ] },
      button: {
        text: "Ok"
      },
      multiple: false
    });
    modal.on("open", function() {
      if (modal.content._mode != "upload") {
        modal.content.mode("upload");
      }
    });
    modal.on("select", function() {
      var attachment = modal.state().get("selection").toJSON();
      var firstLetter = attachment[0].filename.charAt(0);
      if (jQuery.isNumeric(firstLetter)) {
        window.alert("Error: Please make sure your filename does not start with a number.");
        return;
      }
      row_controller_default.insertFontRowByAttachment(attachment[0]);
    });
    modal.open();
  };

  // lay/fontmanager/assets/src/js/fontmanager/manager/manager_controller.js
  var manager_controller = {
    hideModal: function() {
      hideModal();
    },
    bindModalEvents: function() {
      bindModalEvents();
    }
  };
  var manager_controller_default = manager_controller;
  var bindModalEvents = function() {
    jQuery("#add-webfont-input-modal .close-modal-btn").on("click", function() {
      hideModal();
    });
    jQuery("#add-webfont-input-modal .background").on("click", function() {
      hideModal();
    });
    jQuery(document).keyup(function(e) {
      if (e.keyCode == 27) {
        hideModal();
      }
    });
  };
  var hideModal = function() {
    jQuery("#add-webfont-input-modal").hide();
    jQuery("#add-webfont-input-modal .webfont-type-choice-wrap").show();
    jQuery("#add-webfont-input-modal .lay-webfont-form").hide();
    jQuery("#add-webfont-input-modal .js-ok-button").hide().attr("disabled", "disabled");
    jQuery(".js-link-font-name-input").removeAttr("disabled").val("").parsley().validate();
    jQuery(".js-link-tag-input").val("").parsley().validate();
    jQuery(".js-link-font-family-input").val("").parsley().validate();
    jQuery(".js-js-font-name-input").removeAttr("disabled").val("").parsley().validate();
    jQuery(".js-js-embed-code").val("").parsley().validate();
    jQuery(".js-js-font-family-input").val("").parsley().validate();
    jQuery("#add-webfont-input-modal").removeClass("edit-mode");
  };

  // lay/fontmanager/assets/src/js/fontmanager/row/row_view.js
  var RowView = Marionette.View.extend({
    template: "#row-view",
    initialize: function() {
      this.model.on("change", this.render, this);
    },
    className: "row-wrap",
    tagName: "tr",
    templateContext: function() {
      var model = this.model;
      return {
        showFontName: function() {
          if (model.get("fontname")) {
            return model.get("fontname");
          }
        },
        showFontCSS: function() {
          var type = model.get("type");
          if (type == "link" || type == "script") {
            return 'style="' + model.get("css") + '"';
          } else {
            return 'style="font-family:"' + model.get("fontname") + '";"';
          }
        },
        showText: function() {
          if (model.get("fontname")) {
            return "The quick brown fox jumps over the lazy dog.";
          }
        },
        showType: function() {
          var type = model.get("type");
          if (type) {
            return type;
          } else {
            return "attachment";
          }
        },
        showTypeDetailed: function() {
          var type = model.get("type");
          if (type) {
            let filetype = model.get("filetype");
            if (typeof filetype == "undefined") {
              filetype = "woff";
            }
            if (type == "attachment") {
              return type + "/" + filetype;
            } else {
              return type;
            }
          } else {
            return "attachment";
          }
        }
      };
    },
    events: {
      "click .js-delete-row": "deleteRow",
      "click .js-edit-row": "showEditFontRowModal"
    },
    deleteRow: function(e) {
      e.preventDefault();
      row_controller_default.deleteFontRow(this.model);
    },
    showEditFontRowModal: function(e) {
      e.preventDefault();
      row_controller_default.showEditFontRowModal(this.model);
    }
  });
  var RowsView = Marionette.CompositeView.extend({
    tagName: "div",
    template: "#row-composite-view",
    childViewContainer: ".rows",
    childView: RowView,
    events: {
      "click .js-add-font": "showAddFontModal",
      "click .js-upload-woff-btn": "showUploader",
      "click .js-link-css-btn": "showLinkCSSModal",
      "click .js-js-css-btn": "showJSCSSModal"
    },
    showAddFontModal: function(e) {
      e.preventDefault();
      jQuery("#add-webfont-input-modal").show();
    },
    showUploader: function(e) {
      e.preventDefault();
      uploader_controller_default.showModal();
      manager_controller_default.hideModal();
    },
    showLinkCSSModal: function() {
      jQuery("#add-webfont-input-modal .webfont-type-choice-wrap").hide();
      jQuery("#add-webfont-input-modal .link-css-modal").show();
      jQuery(".js-add-link-font-btn").show();
    },
    showJSCSSModal: function() {
      jQuery("#add-webfont-input-modal .webfont-type-choice-wrap").hide();
      jQuery("#add-webfont-input-modal .js-css-modal").show();
      jQuery(".js-add-js-font-btn").show();
    }
  });

  // lay/fontmanager/assets/src/js/fontmanager/modal/link_and_css_modal_controller.js
  var stateMap = {
    validFontName: false,
    validLinkTag: false,
    validFontFamily: false
  };
  var jqueryMap = {
    $name: null,
    $tag: null,
    $family: null
  };
  var link_and_css_modal_controller = {
    initModule: function() {
      setJqueryMap();
      configureValidation();
      bindEvents();
      bindInputEvents();
      initPopOvers();
    },
    setAllInputsToValid: function() {
      setAllInputsToValid();
    }
  };
  var link_and_css_modal_controller_default = link_and_css_modal_controller;
  var setJqueryMap = function() {
    jqueryMap.$name = jQuery(".js-link-font-name-input");
    jqueryMap.$tag = jQuery(".js-link-tag-input");
    jqueryMap.$family = jQuery(".js-link-font-family-input");
  };
  var bindInputEvents = function() {
    jqueryMap.$name.on("keyup", function() {
      stateMap.validFontName = jQuery(this).parsley().validate();
      toggleOkButton();
    });
    jqueryMap.$tag.on("keyup", function() {
      stateMap.validLinkTag = jQuery(this).parsley().validate();
      toggleOkButton();
    });
    jqueryMap.$family.on("keyup", function() {
      stateMap.validFontFamily = jQuery(this).parsley().validate();
      toggleOkButton();
    });
  };
  var setAllInputsToValid = function() {
    stateMap.validFontName = true;
    stateMap.validLinkTag = true;
    stateMap.validFontFamily = true;
  };
  var initPopOvers = function() {
    jQuery("#add-webfont-input-modal input").each(function() {
      jQuery(this).popover({
        animation: false,
        trigger: "manual",
        container: "body",
        placement: "bottom",
        content: ""
      });
    });
  };
  var configureValidation = function() {
    window.ParsleyValidator.addValidator("nonumberasfirstchar", function(value, requirement) {
      var validFirstChar = true;
      var firstChar = value.substr(0, 1);
      if (firstChar == 0 || firstChar == 1 || firstChar == 2 || firstChar == 3 || firstChar == 4 || firstChar == 5 || firstChar == 6 || firstChar == 7 || firstChar == 8 || firstChar == 9) {
        validFirstChar = false;
      }
      return validFirstChar;
    }, 32).addMessage("en", "nonumberasfirstchar", "Please don't use a number as a first character");
    window.ParsleyValidator.addValidator("linktag", function(value, requirement) {
      var isLinkTag = false;
      var lastChar = value.substr(value.length - 1);
      var firstChars = value.substr(0, 5);
      if (firstChars == "<link" && lastChar == ">") {
        isLinkTag = true;
      }
      return isLinkTag;
    }, 32).addMessage("en", "linktag", 'A valid "link" tag begins with "<link" and ends with ">"');
    window.ParsleyValidator.addValidator("fontfamily", function(value, requirement) {
      var isFF = false;
      var lastChar = value.substr(value.length - 1);
      var firstChars = value.substr(0, 12);
      if (firstChars == "font-family:" && lastChar == ";") {
        isFF = true;
      }
      var colonCount = (value.match(/:/g) || []).length;
      if (colonCount > 1) {
        isFF = false;
      }
      return isFF;
    }, 32).addMessage("en", "fontfamily", 'A valid "font-family" CSS style begins with "font-family:" and ends with ";"');
    window.Parsley.on("field:error", function() {
      var arrErrorMsg = this.getErrorsMessages();
      this.$element.data("bs.popover").options.content = arrErrorMsg.join(";");
      this.$element.popover("show");
    });
    window.Parsley.on("field:success", function() {
      this.$element.popover("hide");
    });
  };
  var toggleOkButton = function() {
    if (stateMap.validFontName == true && stateMap.validLinkTag == true && stateMap.validFontFamily == true) {
      jQuery(".js-add-link-font-btn").removeAttr("disabled");
    } else {
      jQuery(".js-add-link-font-btn").attr("disabled", "disabled");
    }
  };
  var bindEvents = function() {
    jQuery("#add-webfont-input-modal .js-add-link-font-btn").on("click", function(e) {
      e.preventDefault();
      var css = jQuery(".js-link-font-family-input").val();
      var link = jQuery(".js-link-tag-input").val();
      var fontname = jQuery(".js-link-font-name-input").val();
      if (jQuery("#add-webfont-input-modal").hasClass("edit-mode")) {
        row_controller_default.editFontRowByLinkAndCSS(fontname, link, css);
      } else {
        row_controller_default.insertFontRowByLinkAndCSS(fontname, link, css);
      }
      manager_controller_default.hideModal();
    });
  };

  // lay/fontmanager/assets/src/js/fontmanager/modal/js_and_css_modal_controller.js
  var stateMap2 = {
    validFontName: false,
    validJSEmbedCode: false,
    validFontFamily: false
  };
  var jqueryMap2 = {
    $name: null,
    $code: null,
    $family: null
  };
  var js_and_css_modal_controller = {
    initModule: function() {
      setJqueryMap2();
      configureValidation2();
      bindEvents2();
      bindInputEvents2();
      initPopOvers2();
    },
    setAllInputsToValid: function() {
      setAllInputsToValid2();
    }
  };
  var js_and_css_modal_controller_default = js_and_css_modal_controller;
  var setJqueryMap2 = function() {
    jqueryMap2.$name = jQuery(".js-js-font-name-input");
    jqueryMap2.$code = jQuery(".js-js-embed-code");
    jqueryMap2.$family = jQuery(".js-js-font-family-input");
  };
  var setAllInputsToValid2 = function() {
    stateMap2.validFontName = true;
    stateMap2.validJSEmbedCode = true;
    stateMap2.validFontFamily = true;
  };
  var initPopOvers2 = function() {
    jQuery("#add-webfont-input-modal input").each(function() {
      jQuery(this).popover({
        animation: false,
        trigger: "manual",
        container: "body",
        placement: "bottom",
        content: ""
      });
    });
  };
  var configureValidation2 = function() {
    window.Parsley.addValidator("scripttag", function(value, requirement) {
      var isScriptTag = false;
      var lastChar = value.substr(value.length - 1);
      var firstChars = value.substr(0, 7);
      if (firstChars == "<script" && lastChar == ">") {
        isScriptTag = true;
      }
      return isScriptTag;
    }, 32).addMessage("en", "scripttag", 'Valid "script" tags begin with "<script" and end with ">"');
    window.Parsley.on("field:error", function() {
      var arrErrorMsg = this.getErrorsMessages();
      this.$element.data("bs.popover").options.content = arrErrorMsg.join(";");
      this.$element.popover("show");
    });
    window.Parsley.on("field:success", function() {
      this.$element.popover("hide");
    });
  };
  var bindInputEvents2 = function() {
    jQuery(".js-js-font-name-input").on("keyup", function() {
      stateMap2.validFontName = jQuery(this).parsley().validate();
      toggleOkButton2();
    });
    jQuery(".js-js-embed-code").on("keyup", function() {
      stateMap2.validJSEmbedCode = jQuery(this).parsley().validate();
      toggleOkButton2();
    });
    jQuery(".js-js-font-family-input").on("keyup", function() {
      stateMap2.validFontFamily = jQuery(this).parsley().validate();
      toggleOkButton2();
    });
  };
  var toggleOkButton2 = function() {
    if (stateMap2.validJSEmbedCode == true && stateMap2.validFontName == true && stateMap2.validFontFamily == true) {
      jQuery(".js-add-js-font-btn").removeAttr("disabled");
    } else {
      jQuery(".js-add-js-font-btn").attr("disabled", "disabled");
    }
  };
  var bindEvents2 = function() {
    jQuery("#add-webfont-input-modal .js-add-js-font-btn").on("click", function(e) {
      e.preventDefault();
      var script = jQuery(".js-js-embed-code").val();
      var fontname = jQuery(".js-js-font-name-input").val();
      var css = jQuery(".js-js-font-family-input").val();
      if (jQuery("#add-webfont-input-modal").hasClass("edit-mode")) {
        row_controller_default.editFontRowByScriptAndCSS(fontname, script, css);
      } else {
        row_controller_default.insertFontRowByScriptAndCSS(fontname, script, css);
      }
      manager_controller_default.hideModal();
    });
  };

  // lay/fontmanager/assets/src/js/fontmanager/row/row_controller.js
  var stateMap3 = {
    rowsView: null
  };
  var row_controller = {
    initRows: function(rows) {
      initRows(rows);
    },
    getRowsView: function() {
      return stateMap3.rowsView;
    },
    insertFontRowByAttachment: function(attachment) {
      insertFontRowByAttachment(attachment);
    },
    insertFontRowByLinkAndCSS: function(fontname, link, css) {
      insertFontRowByLinkAndCSS(fontname, link, css);
    },
    insertFontRowByScriptAndCSS: function(fontname, script, css) {
      insertFontRowByScriptAndCSS(fontname, script, css);
    },
    deleteFontRow: function(model) {
      deleteFontRow(model);
    },
    showEditFontRowModal: function(model) {
      showEditFontRowModal(model);
    },
    editFontRowByLinkAndCSS: function(fontname, link, css) {
      editFontRowByLinkAndCSS(fontname, link, css);
    },
    editFontRowByScriptAndCSS: function(fontname, script, css) {
      editFontRowByScriptAndCSS(fontname, script, css);
    }
  };
  var row_controller_default = row_controller;
  var insertFontRowByScriptAndCSS = function(fontname, script, css) {
    jQuery("head").append(script);
    var css = css.replace(/"/g, "'");
    var row = new Backbone.Model({
      "fontname": fontname,
      "script": script,
      "css": css,
      "type": "script"
    });
    stateMap3.rowsView.collection.add(row);
    entities_default.updateJSON();
  };
  var insertFontRowByLinkAndCSS = function(fontname, link, css) {
    jQuery("head").prepend(link);
    var css = css.replace(/"/g, "'");
    var row = new Backbone.Model({
      "fontname": fontname,
      "link": link,
      "css": css,
      "type": "link"
    });
    stateMap3.rowsView.collection.add(row);
    entities_default.updateJSON();
  };
  var insertFontRowByAttachment = function(attachment) {
    var filetype = "";
    console.log(attachment.mime);
    switch (attachment.mime) {
      case "application/x-font-ttf":
      case "application/font-ttf":
        filetype = "truetype";
        break;
      case "application/x-font-woff":
      case "application/font-woff":
        filetype = "woff";
        break;
      case "font/woff2":
      case "application/font-woff2":
      case "application/x-font-woff2":
        filetype = "woff2";
        break;
    }
    var css = '<style>@font-face{ font-family: "' + attachment.title + '"; src: url("' + attachment.url + '") format("' + filetype + '"); }</style>';
    jQuery("head").append(css);
    var row = new Backbone.Model({
      "fontname": attachment.title,
      "url": attachment.url,
      "id": attachment.id,
      "type": "attachment",
      "filetype": filetype
    });
    stateMap3.rowsView.collection.add(row);
    entities_default.updateJSON();
  };
  var deleteFontRow = function(model) {
    stateMap3.rowsView.collection.remove(model);
    entities_default.updateJSON();
  };
  var editFontRowByLinkAndCSS = function(fontname, link, css) {
    var modelArr = stateMap3.rowsView.collection.where({ fontname });
    var model = modelArr[0];
    jQuery("head").append(link);
    var css = css.replace(/"/g, "'");
    model.set("link", link);
    model.set("css", css);
    entities_default.updateJSON();
  };
  var editFontRowByScriptAndCSS = function(fontname, script, css) {
    var modelArr = stateMap3.rowsView.collection.where({ fontname });
    var model = modelArr[0];
    jQuery("head").append(script);
    var css = css.replace(/"/g, "'");
    model.set("script", script);
    model.set("css", css);
    entities_default.updateJSON();
  };
  var showEditFontRowModal = function(model) {
    var type = model.get("type");
    switch (type) {
      case "link":
        jQuery("#add-webfont-input-modal").addClass("edit-mode");
        jQuery(".js-add-font").click();
        jQuery(".js-link-css-btn").click();
        jQuery(".js-link-font-name-input").val(model.get("fontname")).attr("disabled", "disabled");
        jQuery(".js-link-tag-input").val(model.get("link")).parsley().validate();
        jQuery(".js-link-font-family-input").val(model.get("css")).parsley().validate();
        link_and_css_modal_controller_default.setAllInputsToValid();
        break;
      case "script":
        jQuery("#add-webfont-input-modal").addClass("edit-mode");
        jQuery(".js-add-font").click();
        jQuery(".js-js-css-btn").click();
        jQuery(".js-js-font-name-input").val(model.get("fontname")).attr("disabled", "disabled");
        jQuery(".js-js-embed-code").val(model.get("script")).parsley().validate();
        jQuery(".js-js-font-family-input").val(model.get("css")).parsley().validate();
        js_and_css_modal_controller_default.setAllInputsToValid();
        break;
    }
  };
  var initRows = function(rows) {
    stateMap3.rowsView = new RowsView({
      collection: rows
    });
    bindRowsViewEvents();
  };
  var bindRowsViewEvents = function() {
  };

  // lay/fontmanager/assets/src/js/fontmanager/entities.js
  var stateMap4 = {
    jsonObject: null
  };
  var entities_controller = {
    getRowsEntities: function() {
      return getRowsEntities();
    },
    updateJSON: function() {
      updateJSON();
    },
    getJSON: function() {
      getJSON();
    },
    getJSONObject: function() {
      return stateMap4.jsonObject;
    }
  };
  var entities_default = entities_controller;
  var getRowsEntities = function() {
    var rows = [];
    if (stateMap4.jsonObject != null) {
      rows = stateMap4.jsonObject;
    }
    var rowsCollection = new Backbone.Collection(rows);
    return rowsCollection;
  };
  var getJSON = function() {
    var jsonString = jQuery.trim(jQuery("#fontmanager_json").val());
    if (typeof jsonString != "undefined" && jsonString != "") {
      var jsonObject = JSON.parse(jsonString);
      stateMap4.jsonObject = jsonObject;
    }
  };
  var updateJSON = function() {
    var rowsView = row_controller_default.getRowsView();
    var json = rowsView.collection.toJSON();
    var jsonString = window.JSON.stringify(json, void 0, 2);
    jQuery("#fontmanager_json").val(jsonString);
  };

  // lay/fontmanager/assets/src/js/app.js
  var FontManager = Marionette.Application.extend({
    region: "#fontmanager",
    onStart: function() {
      entities_default.getJSON();
      const rows = entities_default.getRowsEntities();
      row_controller_default.initRows(rows);
      const rowsView = row_controller_default.getRowsView();
      this.showView(rowsView);
      link_and_css_modal_controller_default.initModule();
      js_and_css_modal_controller_default.initModule();
      manager_controller_default.bindModalEvents();
      jQuery('[data-toggle="tooltip"]').tooltip({
        container: ".webfont-type-choice-wrap"
      });
    }
  });
  var fontManager = new FontManager();
  fontManager.start();
})();
