(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb2, mod) => function __require() {
    return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/dynamic-marquee/dist/dynamic-marquee.js
  var require_dynamic_marquee = __commonJS({
    "node_modules/dynamic-marquee/dist/dynamic-marquee.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.dynamicMarquee = {}));
      })(exports, function(exports2) {
        "use strict";
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false
          });
          return Constructor;
        }
        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }
        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr))
            return _arrayLikeToArray(arr);
        }
        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
            return Array.from(iter);
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++)
            arr2[i] = arr[i];
          return arr2;
        }
        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var Boundary = (
          /** @class */
          function() {
            function Boundary2(_a) {
              var onEnter = _a.onEnter, onExit = _a.onExit;
              this._execution = null;
              this.inBoundary = this.inBoundary.bind(this);
              this.enter = this.enter.bind(this);
              this._onEnter = onEnter || null;
              this._onExit = onExit || null;
            }
            Boundary2.prototype.inBoundary = function() {
              return !!this._execution;
            };
            Boundary2.prototype.enter = function(fn) {
              if (this._execution) {
                return fn ? fn(this._execution.onEnterResult) : void 0;
              }
              var execution = this._execution = {
                onEnterResult: void 0
              };
              var returnVal = void 0;
              var exceptionOccurred = false;
              var exception = void 0;
              try {
                if (this._onEnter) {
                  execution.onEnterResult = this._onEnter();
                }
                if (fn) {
                  returnVal = fn(execution.onEnterResult);
                }
              } catch (e) {
                exceptionOccurred = true;
                exception = e;
              }
              this._execution = null;
              var exceptionHandled = !exceptionOccurred;
              if (this._onExit) {
                try {
                  this._onExit({
                    onEnterResult: execution.onEnterResult,
                    exceptionOccurred,
                    retrieveException: function() {
                      exceptionHandled = true;
                      return exception;
                    }
                  });
                } catch (e) {
                  if (exceptionHandled) {
                    throw e;
                  }
                }
              }
              if (!exceptionHandled) {
                throw exception;
              }
              return returnVal;
            };
            return Boundary2;
          }()
        );
        var DIRECTION = {
          RIGHT: "right",
          DOWN: "down"
        };
        var PX_REGEX = /px$/;
        function pxStringToValue(input) {
          if (!PX_REGEX.test(input)) {
            throw new Error("String missing `px` suffix");
          }
          return parseFloat(input.slice(0, -2));
        }
        var SizeWatcher = /* @__PURE__ */ function() {
          function SizeWatcher2($el) {
            var _this = this, _this$_observer;
            _classCallCheck(this, SizeWatcher2);
            this._$el = $el;
            this._width = null;
            this._height = null;
            this._observer = "ResizeObserver" in window ? new ResizeObserver(function(entries) {
              var entry = entries[entries.length - 1];
              var size2 = entry.borderBoxSize[0] || entry.borderBoxSize;
              _this._width = size2.inlineSize;
              _this._height = size2.blockSize;
            }) : null;
            (_this$_observer = this._observer) === null || _this$_observer === void 0 ? void 0 : _this$_observer.observe($el);
          }
          _createClass(SizeWatcher2, [{
            key: "getWidth",
            value: function getWidth() {
              if (this._width !== null)
                return this._width;
              var width = pxStringToValue(window.getComputedStyle(this._$el).width);
              if (this._observer)
                this._width = width;
              return width;
            }
          }, {
            key: "getHeight",
            value: function getHeight() {
              if (this._height !== null)
                return this._height;
              var height2 = pxStringToValue(window.getComputedStyle(this._$el).height);
              if (this._observer)
                this._height = height2;
              return height2;
            }
          }, {
            key: "tearDown",
            value: function tearDown() {
              var _this$_observer2;
              (_this$_observer2 = this._observer) === null || _this$_observer2 === void 0 ? void 0 : _this$_observer2.disconnect();
              this._observer = null;
            }
          }]);
          return SizeWatcher2;
        }();
        var Item = /* @__PURE__ */ function() {
          function Item2($el, direction, metadata) {
            _classCallCheck(this, Item2);
            var $container = document.createElement("div");
            $container.style.display = "block";
            $container.style.opacity = "0";
            $container.style.position = "absolute";
            $container.style.margin = "0";
            $container.style.padding = "0";
            if (direction === DIRECTION.RIGHT) {
              $container.style.whiteSpace = "nowrap";
            }
            this._sizeWatcher = new SizeWatcher($container);
            $container.appendChild($el);
            this._$container = $container;
            this._$el = $el;
            this._direction = direction;
            this._metadata = metadata;
            this._offset = null;
          }
          _createClass(Item2, [{
            key: "getSize",
            value: function getSize() {
              var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$inverse = _ref.inverse, inverse = _ref$inverse === void 0 ? false : _ref$inverse;
              var dir = this._direction;
              if (inverse) {
                dir = dir === DIRECTION.RIGHT ? DIRECTION.DOWN : DIRECTION.RIGHT;
              }
              return dir === DIRECTION.RIGHT ? this._sizeWatcher.getWidth() : this._sizeWatcher.getHeight();
            }
          }, {
            key: "setOffset",
            value: function setOffset(offset2) {
              if (this._offset === offset2)
                return;
              this._offset = offset2;
              this._$container.style.opacity = "1";
              if (this._direction === DIRECTION.RIGHT) {
                this._$container.style.left = "".concat(offset2, "px");
              } else {
                this._$container.style.top = "".concat(offset2, "px");
              }
            }
          }, {
            key: "remove",
            value: function remove() {
              this._sizeWatcher.tearDown();
              this._$container.parentNode.removeChild(this._$container);
            }
          }, {
            key: "getContainer",
            value: function getContainer() {
              return this._$container;
            }
          }, {
            key: "getOriginalEl",
            value: function getOriginalEl() {
              return this._$el;
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              return this._metadata;
            }
          }]);
          return Item2;
        }();
        var transitionDuration = 3e4;
        var Slider = /* @__PURE__ */ function() {
          function Slider2($el, direction) {
            _classCallCheck(this, Slider2);
            this._$el = $el;
            this._direction = direction;
            this._transitionState = null;
          }
          _createClass(Slider2, [{
            key: "setOffset",
            value: function setOffset(offset2, rate, force) {
              var transitionState = this._transitionState;
              var rateChanged = !transitionState || transitionState.rate !== rate;
              if (transitionState && !force) {
                var timePassed = performance.now() - transitionState.time;
                if (timePassed < transitionDuration - 1e4 && !rateChanged) {
                  return;
                }
              }
              if (force || rateChanged) {
                if (this._direction === DIRECTION.RIGHT) {
                  this._$el.style.transform = "translateX(".concat(offset2, "px)");
                } else {
                  this._$el.style.transform = "translateY(".concat(offset2, "px)");
                }
                this._$el.style.transition = "none";
                this._$el.offsetLeft;
              }
              if (rate && (force || rateChanged)) {
                this._$el.style.transition = "transform ".concat(transitionDuration, "ms linear");
              }
              if (rate) {
                var futureOffset = offset2 + rate / 1e3 * transitionDuration;
                if (this._direction === DIRECTION.RIGHT) {
                  this._$el.style.transform = "translateX(".concat(futureOffset, "px)");
                } else {
                  this._$el.style.transform = "translateY(".concat(futureOffset, "px)");
                }
              }
              this._transitionState = {
                time: performance.now(),
                rate
              };
            }
          }]);
          return Slider2;
        }();
        function defer(fn) {
          window.setTimeout(function() {
            return fn();
          }, 0);
        }
        function deferException(cb2) {
          try {
            return cb2();
          } catch (e) {
            defer(function() {
              throw e;
            });
          }
        }
        function toDomEl($el) {
          if (typeof $el === "string" || typeof $el === "number") {
            var $div = document.createElement("div");
            $div.textContent = $el + "";
            return $div;
          }
          return $el;
        }
        function last2(input) {
          return input.length ? input[input.length - 1] : null;
        }
        function first2(input) {
          return input.length ? input[0] : null;
        }
        var maxTranslateDistance = 5e5;
        var renderInterval = 100;
        var Marquee2 = /* @__PURE__ */ function() {
          function Marquee3($container) {
            var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$rate = _ref.rate, rate = _ref$rate === void 0 ? -25 : _ref$rate, _ref$upDown = _ref.upDown, upDown = _ref$upDown === void 0 ? false : _ref$upDown, _ref$startOnScreen = _ref.startOnScreen, startOnScreen = _ref$startOnScreen === void 0 ? false : _ref$startOnScreen;
            _classCallCheck(this, Marquee3);
            this._boundary = new Boundary({
              onEnter: function onEnter() {
                return {
                  callbacks: []
                };
              },
              onExit: function onExit(_ref2) {
                var callbacks = _ref2.onEnterResult.callbacks;
                callbacks.forEach(function(cb2) {
                  return defer(function() {
                    return cb2();
                  });
                });
              }
            });
            this._waitingForItem = true;
            this._nextItemWouldBeTouching = startOnScreen;
            this._rate = rate;
            this._lastEffectiveRate = rate;
            this._justReversedRate = false;
            this._correlation = null;
            this._direction = upDown ? DIRECTION.DOWN : DIRECTION.RIGHT;
            this._onItemRequired = [];
            this._onItemRemoved = [];
            this._onAllItemsRemoved = [];
            this._windowOffset = 0;
            this._containerSize = 0;
            this._containerSizeWatcher = null;
            this._items = [];
            this._pendingItem = null;
            this._visible = !!document.hidden;
            var $window = document.createElement("div");
            $window.style.display = "block";
            $window.style.overflow = "hidden";
            $window.style.position = "relative";
            if (this._direction === DIRECTION.DOWN) {
              $window.style.height = "100%";
            }
            this._$window = $window;
            this.windowInverseSize = null;
            this._updateWindowInverseSize();
            var $moving = document.createElement("div");
            this._$moving = $moving;
            $moving.style.display = "block";
            $moving.style.position = "absolute";
            $moving.style.left = "0";
            $moving.style.right = "0";
            this._slider = new Slider($moving, this._direction);
            $window.appendChild($moving);
            $container.appendChild($window);
          }
          _createClass(Marquee3, [{
            key: "onItemRequired",
            value: function onItemRequired(cb2) {
              this._onItemRequired.push(cb2);
            }
            // Called when an item is removed
          }, {
            key: "onItemRemoved",
            value: function onItemRemoved(cb2) {
              this._onItemRemoved.push(cb2);
            }
            // Called when the last item is removed
          }, {
            key: "onAllItemsRemoved",
            value: function onAllItemsRemoved(cb2) {
              this._onAllItemsRemoved.push(cb2);
            }
          }, {
            key: "getNumItems",
            value: function getNumItems() {
              return this._items.length;
            }
          }, {
            key: "setRate",
            value: function setRate(rate) {
              if (rate === this._rate) {
                return;
              }
              if (rate * this._lastEffectiveRate < 0) {
                this._justReversedRate = !this._justReversedRate;
              }
              this._rate = rate;
              if (rate) {
                this._lastEffectiveRate = rate;
                if (!this._items.length) {
                  this._waitingForItem = true;
                }
              } else {
                this._waitingForItem = false;
              }
              this._tick();
            }
          }, {
            key: "getRate",
            value: function getRate() {
              return this._rate;
            }
          }, {
            key: "clear",
            value: function clear() {
              var _this = this;
              this._boundary.enter(function() {
                _this._items.forEach(function(_ref3) {
                  var item = _ref3.item;
                  return _this._removeItem(item);
                });
                _this._items = [];
                _this._waitingForItem = true;
                _this._nextItemWouldBeTouching = false;
                _this._updateWindowInverseSize();
                _this._cleanup();
              });
            }
          }, {
            key: "isWaitingForItem",
            value: function isWaitingForItem() {
              return this._waitingForItem;
            }
          }, {
            key: "appendItem",
            value: function appendItem($el) {
              var _this2 = this;
              var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref4$metadata = _ref4.metadata, metadata = _ref4$metadata === void 0 ? null : _ref4$metadata;
              this._boundary.enter(function() {
                if (!_this2._waitingForItem) {
                  throw new Error("No room for item.");
                }
                $el = toDomEl($el);
                var itemAlreadyExists = _this2._items.some(function(_ref5) {
                  var item = _ref5.item;
                  return item.getOriginalEl() === $el;
                });
                if (itemAlreadyExists) {
                  throw new Error("Item already exists.");
                }
                _this2._waitingForItem = false;
                _this2._pendingItem = new Item($el, _this2._direction, metadata);
                _this2._tick();
              });
            }
          }, {
            key: "_removeItem",
            value: function _removeItem(item) {
              var _this3 = this;
              this._boundary.enter(function(_ref6) {
                var callbacks = _ref6.callbacks;
                item.remove();
                _this3._items.splice(_this3._items.indexOf(item), 1);
                _this3._onItemRemoved.forEach(function(cb2) {
                  callbacks.push(function() {
                    return cb2(item.getOriginalEl());
                  });
                });
              });
            }
            // update size of container so that the marquee items fit inside it.
            // This is needed because the items are posisitioned absolutely, so not in normal flow.
            // Without this, for DIRECTION.RIGHT, the height of the container would always be 0px, which is not useful
          }, {
            key: "_updateWindowInverseSize",
            value: function _updateWindowInverseSize() {
              if (this._direction === DIRECTION.DOWN) {
                return;
              }
              var maxSize = Math.max.apply(Math, _toConsumableArray(this._items.map(function(_ref7) {
                var item = _ref7.item;
                return item.getSize({
                  inverse: true
                });
              })));
              if (this.windowInverseSize !== maxSize) {
                this.windowInverseSize = maxSize;
                this._$window.style.height = "".concat(maxSize, "px");
              }
            }
          }, {
            key: "_scheduleRender",
            value: function _scheduleRender() {
              var _this4 = this;
              if (!this._renderTimer) {
                this._renderTimer = window.setTimeout(function() {
                  return _this4._tick();
                }, renderInterval);
              }
            }
          }, {
            key: "_cleanup",
            value: function _cleanup() {
              var _this$_containerSizeW;
              (_this$_containerSizeW = this._containerSizeWatcher) === null || _this$_containerSizeW === void 0 ? void 0 : _this$_containerSizeW.tearDown();
              this._containerSizeWatcher = null;
              this._correlation = null;
              this._windowOffset = 0;
            }
          }, {
            key: "_tick",
            value: function _tick() {
              var _this5 = this;
              this._boundary.enter(function(_ref8) {
                var callbacks = _ref8.callbacks;
                _this5._renderTimer && clearTimeout(_this5._renderTimer);
                _this5._renderTimer = null;
                if (!_this5._items.length && !_this5._pendingItem) {
                  _this5._cleanup();
                  return;
                }
                _this5._scheduleRender();
                if (!_this5._$window.isConnected) {
                  _this5._correlation = null;
                  return;
                }
                if (!_this5._containerSizeWatcher) {
                  _this5._containerSizeWatcher = new SizeWatcher(_this5._$window);
                }
                var now = performance.now();
                var resynced = false;
                if (_this5._correlation) {
                  var timePassed = now - _this5._correlation.time;
                  _this5._windowOffset = _this5._correlation.offset + _this5._correlation.rate * -1 * (timePassed / 1e3);
                } else {
                  resynced = true;
                }
                if (Math.abs(_this5._windowOffset) > maxTranslateDistance) {
                  resynced = true;
                  var shiftAmount = _this5._windowOffset;
                  _this5._items.forEach(function(item) {
                    return item.offset -= shiftAmount;
                  });
                  _this5._correlation = null;
                  _this5._windowOffset = 0;
                }
                var visible = !document.hidden;
                var goneVisible = visible && _this5._visible !== visible;
                _this5._visible = visible;
                _this5._slider.setOffset(_this5._windowOffset * -1, _this5._rate, resynced || goneVisible);
                if (!_this5._correlation || _this5._correlation.rate !== _this5._rate) {
                  _this5._correlation = {
                    time: now,
                    offset: _this5._windowOffset,
                    rate: _this5._rate
                  };
                }
                _this5._containerSize = _this5._direction === DIRECTION.RIGHT ? _this5._containerSizeWatcher.getWidth() : _this5._containerSizeWatcher.getHeight();
                var containerSize = Math.max(_this5._containerSize, 1);
                var justReversedRate = _this5._justReversedRate;
                _this5._justReversedRate = false;
                var newItemWouldBeTouching = _this5._nextItemWouldBeTouching;
                _this5._nextItemWouldBeTouching = null;
                var nextItemTouching = null;
                if (_this5._pendingItem) {
                  _this5._$moving.appendChild(_this5._pendingItem.getContainer());
                  var touching = _this5._rate <= 0 ? last2(_this5._items) : first2(_this5._items);
                  if (_this5._rate <= 0) {
                    _this5._items = [].concat(_toConsumableArray(_this5._items), [{
                      item: _this5._pendingItem,
                      appendRate: _this5._rate,
                      offset: newItemWouldBeTouching ? touching ? touching.offset + touching.item.getSize() : _this5._windowOffset : _this5._windowOffset + containerSize
                    }]);
                  } else {
                    _this5._items = [{
                      item: _this5._pendingItem,
                      appendRate: _this5._rate,
                      offset: newItemWouldBeTouching ? touching ? touching.offset - _this5._pendingItem.getSize() : _this5._windowOffset + containerSize - _this5._pendingItem.getSize() : _this5._windowOffset - _this5._pendingItem.getSize()
                    }].concat(_toConsumableArray(_this5._items));
                  }
                  _this5._pendingItem = null;
                }
                var buffer = renderInterval / 1e3 * Math.abs(_this5._rate);
                var requireNewItem = false;
                if (!_this5._waitingForItem && _this5._items.length) {
                  var firstItem = first2(_this5._items);
                  var lastItem = last2(_this5._items);
                  var _touching = _this5._rate <= 0 ? lastItem : firstItem;
                  if (_this5._rate <= 0 && lastItem.offset + _touching.item.getSize() - _this5._windowOffset <= containerSize + buffer || _this5._rate > 0 && _touching.offset - _this5._windowOffset > -1 * buffer) {
                    _this5._waitingForItem = requireNewItem = true;
                    nextItemTouching = justReversedRate ? null : {
                      $el: _touching.item.getOriginalEl(),
                      metadata: _touching.item.getMetadata()
                    };
                  }
                }
                if (nextItemTouching) {
                  _this5._nextItemWouldBeTouching = true;
                }
                _this5._items = _toConsumableArray(_this5._items).filter(function(_ref9) {
                  var item = _ref9.item, offset2 = _ref9.offset;
                  var keep = _this5._rate < 0 ? offset2 + item.getSize() > _this5._windowOffset : offset2 < _this5._windowOffset + containerSize;
                  if (!keep)
                    _this5._removeItem(item);
                  return keep;
                });
                if (!_this5._items.length) {
                  _this5._onAllItemsRemoved.forEach(function(cb2) {
                    return callbacks.push(cb2);
                  });
                }
                _this5._items.reduce(function(newOffset, item) {
                  if (newOffset !== null && item.offset < newOffset) {
                    item.offset = newOffset;
                  }
                  item.item.setOffset(item.offset);
                  return item.offset + item.item.getSize();
                }, null);
                _this5._updateWindowInverseSize();
                if (requireNewItem) {
                  var nextItem;
                  _this5._onItemRequired.some(function(cb2) {
                    return deferException(function() {
                      nextItem = cb2({
                        /** @deprecated */
                        immediatelyFollowsPrevious: !!nextItemTouching,
                        touching: nextItemTouching
                      });
                      return !!nextItem;
                    });
                  });
                  if (nextItem) {
                    _this5.appendItem(nextItem);
                  }
                  _this5._nextItemWouldBeTouching = false;
                }
              });
            }
          }]);
          return Marquee3;
        }();
        var indexMap = function(list) {
          var map4 = {};
          list.forEach(function(each2, i) {
            map4[each2] = map4[each2] || [];
            map4[each2].push(i);
          });
          return map4;
        };
        var longestCommonSubstring = function(seq1, seq2) {
          var result2 = { startString1: 0, startString2: 0, length: 0 };
          var indexMapBefore = indexMap(seq1);
          var previousOverlap = [];
          seq2.forEach(function(eachAfter, indexAfter) {
            var overlapLength;
            var overlap = [];
            var indexesBefore = indexMapBefore[eachAfter] || [];
            indexesBefore.forEach(function(indexBefore) {
              overlapLength = (indexBefore && previousOverlap[indexBefore - 1] || 0) + 1;
              if (overlapLength > result2.length) {
                result2.length = overlapLength;
                result2.startString1 = indexBefore - overlapLength + 1;
                result2.startString2 = indexAfter - overlapLength + 1;
              }
              overlap[indexBefore] = overlapLength;
            });
            previousOverlap = overlap;
          });
          return result2;
        };
        var longestCommonSubstring_1 = longestCommonSubstring;
        function loop2(marquee) {
          var buildersIn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          var seperatorBuilder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          var lastIndex = -1;
          var builders = buildersIn.slice();
          var getNextBuilder = function getNextBuilder2() {
            var offset2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
            var nextIndex = (lastIndex + offset2) % builders.length;
            return {
              builder: builders[nextIndex],
              index: nextIndex
            };
          };
          var appendItem = function appendItem2(touching) {
            var _touching$metadata;
            if (!builders.length || !marquee.isWaitingForItem()) {
              return;
            }
            if (seperatorBuilder && touching && ((_touching$metadata = touching.metadata) === null || _touching$metadata === void 0 ? void 0 : _touching$metadata.isSeperator) !== true) {
              var $el = toDomEl(seperatorBuilder());
              marquee.appendItem($el, {
                metadata: {
                  isSeperator: true
                }
              });
              return;
            }
            var _getNextBuilder = getNextBuilder(), builder = _getNextBuilder.builder, index = _getNextBuilder.index;
            lastIndex = index;
            marquee.appendItem(toDomEl(builder()));
          };
          marquee.onItemRequired(function(_ref) {
            var touching = _ref.touching;
            return appendItem(touching);
          });
          appendItem();
          return {
            update: function update(newBuilders) {
              var calculateNewIndex = function calculateNewIndex2() {
                var buildersStructure = builders.map(function(b, i) {
                  var prevIndex = builders.indexOf(b);
                  return prevIndex < i ? prevIndex : i;
                });
                var newBuildersStructure = newBuilders.map(function(b, i) {
                  return builders.indexOf(b);
                });
                var _longestSubstring = longestCommonSubstring_1(buildersStructure, newBuildersStructure), startString1 = _longestSubstring.startString1, startString2 = _longestSubstring.startString2, length = _longestSubstring.length;
                if (lastIndex >= startString1 && lastIndex < startString1 + length) {
                  return lastIndex + (startString2 - startString1);
                }
                return -1;
              };
              lastIndex = calculateNewIndex();
              builders = newBuilders.slice();
              appendItem(false);
            }
          };
        }
        exports2.Marquee = Marquee2;
        exports2.loop = loop2;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // lay/frontend/assets/src/js/app/frontend/globalevents/globalevents_controller.js
  var globalevents_controller = {
    triggerNewProjectPageLayoutObj: function(layoutObj) {
      window.laytheme.trigger("newprojectpagelayoutobj", layoutObj);
      window.Frontend.GlobalEvents.trigger("newprojectpagelayoutobj", layoutObj);
    },
    triggerProjectPageShown: function() {
      window.laytheme.trigger("projectpageshown");
      window.Frontend.GlobalEvents.trigger("projectpageshown");
    },
    triggerNewPage: function(layoutObj, type2, obj2) {
      window.laytheme.trigger("newpage", layoutObj, type2, obj2);
      window.Frontend.GlobalEvents.trigger("newpage", layoutObj, type2, obj2);
    },
    triggerNewPageShown: function(layoutObj, type2, obj2) {
      window.laytheme.trigger("newpageshown", layoutObj, type2, obj2);
      window.Frontend.GlobalEvents.trigger("newpageshown", layoutObj, type2, obj2);
    },
    triggerSwitchedDesktopLayoutToCustomPhoneLayout: function() {
      window.laytheme.trigger("switched_desktoplayout_to_customphonelayout");
    },
    triggerSwitchedCustomPhoneLayoutToDesktopLayout: function() {
      window.laytheme.trigger("switched_customphonelayout_to_desktoplayout");
    },
    triggerGridShown: function(gridObj, targetRegion, type2, obj2) {
      window.laytheme.trigger("gridshown", gridObj, targetRegion, type2, obj2);
    },
    triggerSizeChanged: function(size2) {
      window.laytheme.trigger("sizechanged", size2);
    },
    triggerPushState: function() {
      window.laytheme.trigger("pushstate");
    }
  };
  var globalevents_controller_default = globalevents_controller;

  // lay/frontend/assets/src/js/app/frontend/utility/utility_controller.js
  var eventsChannel = Backbone.Radio.channel("events");
  var utility_controller = {
    initModule: function() {
      setScrollBarWidthCssVar();
      jQuery(window).trigger("window_width_changed", setScrollBarWidthCssVar);
      initResizeOnlyWindowWidthEvent();
      bindScroll();
      bindResize();
      initScreenSize();
      triggerSizeChanged();
      setOrientation();
      initIsTouchDevice();
      setSupportsPlaysinlineOnTouchdevices();
      configureLazySizes();
      loadImagesInstantly();
      bindSizeBackgrounds();
      onGlobalEvents();
      bindOnFullpageRenderResizeBackgrounds();
    },
    map: function(value, istart, istop, ostart, ostop) {
      return map(value, istart, istop, ostart, ostop);
    },
    filterURL: function(url) {
      return filterURL(url);
    },
    isInternUrl: function(url) {
      return isInternUrl(url);
    },
    stringStartsWith: function(string, prefix) {
      return stringStartsWith(string, prefix);
    },
    fixBody: function() {
      fixBody();
    },
    unfixBody: function() {
      unfixBody();
    },
    stringifyCatIds: function(catids) {
      return stringifyCatIds(catids);
    },
    parseIdsString: function(catids) {
      return parseIdsString(catids);
    },
    fadeInImageOnLoadViaParent: function($target7) {
      fadeInImageOnLoadViaParent($target7);
    },
    setSrcAndSrcSetViaParent: function($target7) {
      setSrcAndSrcSetViaParent($target7);
    },
    setBodyClasses: function(obj2) {
      setBodyClasses(obj2);
    },
    setImageSizesAttribute: function($target7) {
      setImageSizesAttribute($target7);
    },
    getImageSrcAndSrcSet: function(el) {
      return getImageSrcAndSrcSet(el);
    }
  };
  var Utility = {
    orientation: window.innerWidth > window.innerHeight ? "landscape" : "portrait",
    previousOrientation: window.innerWidth > window.innerHeight ? "landscape" : "portrait",
    isPhoneSize: null,
    isDesktopSize: null,
    isTabletSize: null,
    isNotPhoneSize: null,
    screenSize: null,
    breakpoint: parseInt(frontendPassedData.breakpoint, 10),
    tabletBreakpoint: parseInt(frontendPassedData.tabletbreakpoint, 10),
    phoneBreakpoint: parseInt(frontendPassedData.breakpoint, 10),
    isTouchDevice: false,
    supportsPlaysInline: false,
    showOriginalImages: frontendPassedData.misc_options_showoriginalimages == "on" ? true : false,
    imageSizes: ["265", "512", "768", "1024", "1280", "1920", "2560", "3200", "3840", "4096"]
  };
  var setScrollBarWidthCssVar = function() {
    const scrollbarWidth = window.innerWidth - document.body.clientWidth;
    document.body.style.setProperty("--scrollbarWidth", scrollbarWidth + "px");
  };
  var getImageSrcAndSrcSet = function(el) {
    var srcset = "";
    var smallest_src = "";
    var full_src = el.sizes.full;
    full_src = filterURL(full_src);
    var sizesToBeFilled = ["_265", "_512", "_768", "_1024", "_1280", "_1920", "_2560", "_3200", "_3840", "_4096"];
    var sizes = el.sizes;
    for (var key in sizes) {
      if (key != "full") {
        var src = sizes[key];
        src = filterURL(src);
        srcset = src + " " + key.substring(1) + "w, " + srcset;
        var ix = sizesToBeFilled.indexOf(key);
        if (ix !== -1) {
          sizesToBeFilled.splice(ix, 1);
        }
      }
    }
    for (var i = 0; i < sizesToBeFilled.length; i++) {
      srcset += full_src + " " + sizesToBeFilled[i].substring(1) + "w, ";
    }
    srcset = srcset.slice(0, -2);
    var smallest = sizes.hasOwnProperty("_265") != -1 ? sizes["_265"] : false;
    if (smallest == "" || smallest == false) {
      smallest_src = full_src;
    } else {
      smallest_src = smallest;
    }
    smallest_src = filterURL(smallest_src);
    return { src: smallest_src, srcset };
  };
  var bindOnFullpageRenderResizeBackgrounds = function() {
    jQuery(window).on("fpAfterRender", function() {
      setTimeout(function() {
        setBackgroundSizesAttribute();
        lazySizes.autoSizer.checkElems();
      }, 0);
    });
  };
  var fadeInImageOnLoadViaParent = function($target7) {
    if (typeof $target7 == "undefined") {
      $target7 = jQuery(".lay-content");
    }
    $target7.find("img.setsizes, img.lay-gif, img.lay-image-original").each(function() {
      var img = this;
      if (img.complete) {
        img.classList.add("loaded");
      } else {
        img.addEventListener("load", function() {
          img.classList.add("loaded");
        });
      }
    });
  };
  var bindScroll = function() {
    jQuery(window).on("scroll", () => {
      eventsChannel.trigger("scroll");
    });
  };
  var stringifyCatIds = function(catids) {
    if (catids == "" || typeof catids == "undefined" || catids == null) {
      return "[]";
    }
    if (typeof catids == "string") {
      return catids;
    }
    for (var i = 0; i < catids.length; i++) {
      catids[i] = parseInt(catids[i], 10);
    }
    return JSON.stringify(catids);
  };
  var parseIdsString = function(catids) {
    if (catids == "" || typeof catids == "undefined" || catids == null) {
      return [];
    }
    if (Array.isArray(catids)) {
      return catids;
    }
    var catids = JSON.parse(catids);
    for (var i = 0; i < catids.length; i++) {
      catids[i] = parseInt(catids[i], 10);
    }
    return catids;
  };
  var stringStartsWith = function(string, prefix) {
    return string.slice(0, prefix.length).toLowerCase() == prefix.toLowerCase();
  };
  var alterClass = function($el, removals, additions) {
    if (removals.indexOf("*") === -1) {
      $el.removeClass(removals);
      return !additions ? $el : $el.addClass(additions);
    }
    var patt = new RegExp("\\s" + removals.replace(/\*/g, "[A-Za-z0-9-_]+").split(" ").join("\\s|\\s") + "\\s", "g");
    $el.each(function(i, it) {
      var cn = " " + it.className + " ";
      while (patt.test(cn)) {
        cn = cn.replace(patt, " ");
      }
      it.className = jQuery.trim(cn);
    });
    return !additions ? $el : $el.addClass(additions);
  };
  var isInternUrl = function(url) {
    var siteUrl = frontendPassedData.siteUrl;
    if (siteUrl.startsWith("http://")) {
      siteUrl = siteUrl.substr(7);
    } else if (siteUrl.startsWith("https://")) {
      siteUrl = siteUrl.substr(8);
    }
    if (siteUrl.startsWith("www.")) {
      siteUrl = siteUrl.substr(4);
    }
    var checkUrl = url;
    if (checkUrl.startsWith("http://")) {
      checkUrl = checkUrl.substr(7);
    } else if (checkUrl.startsWith("https://")) {
      checkUrl = checkUrl.substr(8);
    }
    if (checkUrl.startsWith("www.")) {
      checkUrl = checkUrl.substr(4);
    }
    if (checkUrl.startsWith(siteUrl)) {
      return true;
    }
  };
  var filterURL = function(url) {
    if (url !== null && url != "" && typeof url != "undefined") {
      url = getStaticUrl(url);
      var substr = url.substring(0, 5);
      if (substr == "http:" && frontendPassedData.is_ssl == true) {
        var part = url.substring(5);
        url = "https:" + part;
      } else if (substr == "https" && (frontendPassedData.is_ssl == false || frontendPassedData.is_ssl == "")) {
        var part = url.substring(5);
        url = "http" + part;
      }
      if (frontendPassedData.has_www == 1) {
        if (frontendPassedData.is_ssl == true) {
          if (url.substring(0, 12) != "https://www.") {
            var part = url.substring(8);
            url = "https://www." + part;
          }
        } else {
          if (url.substring(0, 11) != "http://www.") {
            var part = url.substring(7);
            url = "http://www." + part;
          }
        }
      } else {
        if (frontendPassedData.is_ssl == true) {
          if (url.substring(0, 12) == "https://www.") {
            var part = url.substring(12);
            url = "https://" + part;
          }
        } else {
          if (url.substring(0, 11) == "http://www.") {
            var part = url.substring(11);
            url = "http://" + part;
          }
        }
      }
    }
    return url;
  };
  var getStaticUrl = function(url) {
    if (url.startsWith("mailto:") || url.startsWith("#") || url.startsWith("tel:")) {
      return url;
    }
    if (url.substr(0, 1) == "/") {
      return frontendPassedData.siteUrl + url;
    }
    return url;
  };
  var processInstagramEmbeds = function() {
    setTimeout(function() {
      if (typeof window.instgrm != "undefined") {
        window.instgrm.Embeds.process();
      }
    }, 0);
  };
  var onGlobalEvents = function() {
    window.laytheme.on("newpageshown", function(layoutObj, type2, obj2) {
      processInstagramEmbeds();
      setImageSizesAttribute();
      polyFillResponsiveImages();
    });
    window.laytheme.on("searchresultshown", function() {
      var $target7 = jQuery("#search-region");
      setSrcAndSrcSetViaParent($target7);
      setImageSizesAttribute($target7);
      fadeInImageOnLoadViaParent($target7);
      polyFillResponsiveImages();
    });
  };
  var setSrcAndSrcSetViaParent = function($target7) {
    $target7.find("img.setsizes").each(function() {
      var srcset = jQuery(this).attr("data-srcset");
      var src = jQuery(this).attr("data-src");
      jQuery(this).attr({
        src,
        srcset
      });
    });
    $target7.find("img.lay-gif, img.lay-image-original").each(function() {
      var src = jQuery(this).attr("data-src");
      jQuery(this).attr("src", src);
    });
  };
  var polyFillResponsiveImages = function() {
    if (window.respimage) {
      window.respimage();
    }
  };
  var setImageSizesAttribute = function($target7) {
    if (typeof $target7 == "undefined") {
      $target7 = jQuery("body");
    }
    $target7.find("img.setsizes:not(img.setsizes-objectfit-cover)").each(function() {
      var w = this.clientWidth;
      if (w == 0) {
        var ar = jQuery(this).attr("data-ar");
        var h = this.clientHeight;
        w = h / ar;
      }
      w = roundUpSizes(w);
      jQuery(this).attr("sizes", w + "px");
    });
    setBackgroundSizesAttribute();
  };
  var roundUpSizes = function(w) {
    var sizes = [265, 512, 768, 1024, 1280, 1920, 2560, 3200, 3840, 4096];
    var width = w;
    var i;
    for (var i = 0; i < sizes.length; i++) {
      if (sizes[i] >= w) {
        width = sizes[i];
        break;
      }
    }
    return width;
  };
  var setBackgroundSizesAttribute = function($target7) {
    if (typeof $target7 == "undefined") {
      $target7 = jQuery("body");
    }
    $target7.find(".background-image img.setsizes.setsizes-objectfit-cover").each(function() {
      var rect = this.parentNode.getBoundingClientRect();
      var w = parseInt(jQuery(this).attr("data-w"), 10);
      var h = parseInt(jQuery(this).attr("data-h"), 10);
      var sizesW = 0;
      if (w / h < rect.width / rect.height) {
        sizesW = rect.width;
      } else {
        var imgH = rect.height;
        sizesW = h / w * imgH;
      }
      sizesW = roundUpSizes(sizesW);
      jQuery(this).attr("sizes", parseInt(sizesW, 10) + "px");
    });
  };
  var setBodyClasses = function(obj2) {
    var newClasses = "type-" + obj2.type + " id-" + obj2.id + " slug-" + obj2.slug + " page-id-" + obj2.id + " postid-" + obj2.id;
    if (typeof obj2.catid != "undefined") {
      for (var i = 0; i < obj2.catid.length; i++) {
        newClasses += " category-" + obj2.catid[i] + " ";
      }
    }
    alterClass(jQuery("body"), "type-* id-* slug-* page-id-* postid-* category-*", newClasses);
    jQuery("body").attr({
      "data-type": obj2.type,
      "data-id": obj2.id,
      "data-slug": obj2.slug,
      "data-catid": stringifyCatIds(obj2.catid)
    });
    var url = window.location.href;
    var lastChar = url.substring(url.length - 1);
    var lastChar2 = frontendPassedData.siteUrl.substring(frontendPassedData.siteUrl.length - 1);
    if (lastChar == "/" && lastChar2 != "/") {
      url = url.slice(0, -1);
    }
    if (url == frontendPassedData.siteUrl) {
      jQuery("body").addClass("home");
    } else {
      jQuery("body").removeClass("home");
    }
  };
  var map = function(value, istart, istop, ostart, ostop) {
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
  };
  var initIsTouchDevice = function() {
    Utility.isTouchDevice = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/);
    if (Utility.isTouchDevice == null) {
      Utility.isTouchDevice = false;
    }
  };
  var initResizeOnlyWindowWidthEvent = function() {
    var old_window_width = window.innerWidth;
    jQuery(window).on("resize", function() {
      if (old_window_width != window.innerWidth) {
        jQuery(window).trigger("window_width_changed");
      }
      old_window_width = window.innerWidth;
    });
  };
  var bindResize = function() {
    jQuery(window).on("orientationchange window_width_changed", function() {
      triggerSizeChanged();
      setOrientation();
    });
    jQuery(window).on(
      "window_width_changed",
      _.debounce(function() {
        setImageSizesAttribute();
      }, 300)
    );
  };
  var setOrientation = function() {
    Utility.orientation = window.innerWidth > window.innerHeight ? "landscape" : "portrait";
    if (Utility.orientation != Utility.previousOrientation) {
      window.laytheme.trigger("orientationchanged", Utility.orientation);
    }
    Utility.previousOrientation = Utility.orientation;
  };
  var initScreenSize = function() {
    if (window.innerWidth <= Utility.phoneBreakpoint) {
      Utility.screenSize = "phone";
    } else if (window.innerWidth <= Utility.tabletBreakpoint) {
      Utility.screenSize = "tablet";
    } else {
      Utility.screenSize = "desktop";
    }
  };
  var triggerSizeChanged = function() {
    var previousSizeType = Utility.screenSize;
    if (window.innerWidth <= Utility.phoneBreakpoint) {
      Utility.screenSize = "phone";
    } else if (window.innerWidth <= Utility.tabletBreakpoint) {
      Utility.screenSize = "tablet";
    } else {
      Utility.screenSize = "desktop";
    }
    switch (Utility.screenSize) {
      case "desktop":
        jQuery("html").addClass("desktop-size").removeClass("tablet-size phone-size");
        Utility.isPhoneSize = false;
        Utility.isTabletSize = false;
        Utility.isDesktopSize = true;
        Utility.isDesktopOrTabletSize = true;
        break;
      case "tablet":
        jQuery("html").addClass("tablet-size").removeClass("desktop-size phone-size");
        Utility.isPhoneSize = false;
        Utility.isTabletSize = true;
        Utility.isDesktopSize = false;
        Utility.isDesktopOrTabletSize = true;
        break;
      case "phone":
        jQuery("html").addClass("phone-size").removeClass("desktop-size tablet-size");
        Utility.isPhoneSize = true;
        Utility.isTabletSize = false;
        Utility.isDesktopSize = false;
        Utility.isDesktopOrTabletSize = false;
        break;
    }
    if (previousSizeType != Utility.screenSize) {
      globalevents_controller_default.triggerSizeChanged(Utility.screenSize);
    }
  };
  var loadImagesInstantly = function() {
    if (frontendPassedData.image_loading == "instant_load") {
      window.laytheme.on("newpageshown", function() {
        jQuery(".img img.lazyload, .thumb img.lazyload, .background-image img.lazyload").get().forEach(lazySizes.loader.unveil);
        setTimeout(function() {
          jQuery(".lay-carousel-slide.is-selected img").get().forEach(lazySizes.loader.unveil);
        }, 200);
      });
    }
  };
  var bindSizeBackgrounds = function() {
    if (!Modernizr.objectfit) {
      window.laytheme.on("newpageshown", sizeBackgroundsIfObjectFitNotSupported);
      jQuery(window).on("resize orientationchange", sizeBackgroundsIfObjectFitNotSupported);
    }
  };
  var sizeBackgroundsIfObjectFitNotSupported = function() {
    setTimeout(function() {
      jQuery(".background-image img").each(function() {
        var ar = jQuery(this).attr("data-ar");
        var rowRect = this.parentNode.getBoundingClientRect();
        var rowAr = rowRect.height / rowRect.width;
        if (typeof ar != "undefined") {
          if (ar > rowAr) {
            jQuery(this).addClass("bgw100").removeClass("bgh100");
          } else {
            jQuery(this).addClass("bgh100").removeClass("bgw100");
          }
        } else {
          jQuery(this).addClass("bgw100").removeClass("bgh100");
        }
      });
      setBackgroundSizesAttribute();
      jQuery(".background-video video").each(function() {
        var ar = jQuery(this).attr("data-ar");
        var rowRect = this.parentNode.getBoundingClientRect();
        var rowAr = rowRect.height / rowRect.width;
        if (typeof ar != "undefined") {
          if (ar > rowAr) {
            jQuery(this).addClass("w100").removeClass("h100");
          } else {
            jQuery(this).addClass("h100").removeClass("w100");
          }
        } else {
          jQuery(this).addClass("w100").removeClass("h100");
        }
      });
    }, 0);
  };
  var configureLazySizes = function() {
    var sizes = [265, 512, 768, 1024, 1280, 1920, 2560, 3200, 3840, 4096];
    document.addEventListener(
      "lazybeforesizes",
      function(e) {
        return function(e2) {
          var i;
          for (i = 0; i < sizes.length; i++) {
            if (sizes[i] >= e2.detail.width) {
              e2.detail.width = sizes[i];
              break;
            }
          }
        };
      }()
    );
  };
  var setSupportsPlaysinlineOnTouchdevices = function() {
    Utility.supportsPlaysInline = false;
    if (Utility.isTouchDevice) {
      var md = new MobileDetect(window.navigator.userAgent);
      if (md.os() == "iOS" && md.userAgent() == "Safari") {
        if (md.version("Safari") >= 10) {
          Utility.supportsPlaysInline = true;
          return;
        }
      }
      if (md.os() == "AndroidOS" && md.userAgent() == "Chrome") {
        if (md.version("Chrome") >= 53) {
          Utility.supportsPlaysInline = true;
          return;
        }
      }
      Utility.supportsPlaysInline = true;
    }
  };
  var isFixed = false;
  var fixedAtY = 0;
  var fixBody = function() {
    if (!isFixed) {
      isFixed = true;
      fixedAtY = window.pageYOffset || document.documentElement.scrollTop;
      jQuery("body").css({
        top: -fixedAtY + "px"
      });
      setTimeout(function() {
        jQuery("body").css("position", "fixed");
      }, 0);
    }
  };
  var unfixBody = function() {
    if (isFixed) {
      isFixed = false;
      jQuery("body").css("position", "");
      jQuery(document).scrollTop(fixedAtY);
    }
  };
  var waitForMasonryInitialized = function(masonryCols) {
    var d = new jQuery.Deferred();
    var masonryInColsHasInitialized = [];
    for (var i = 0; i < masonryCols.length; i++) {
      masonryInColsHasInitialized.push(false);
    }
    for (var i = 0; i < masonryCols.length; i++) {
      ;
      (function(index) {
        var col = masonryCols[index];
        if (col.classList.contains("masonry-initialized")) {
          masonryInColsHasInitialized[index] = true;
        } else {
          var observer = new MutationObserver(() => {
            if (col.classList.contains("masonry-initialized")) {
              masonryInColsHasInitialized[index] = true;
            }
          });
          observer.observe(col, { attributes: true, attributeFilter: ["class"] });
        }
      })(i);
    }
    var interval = setInterval(function() {
      if (masonryInColsHasInitialized.every(arrayElIsTrue)) {
        d.resolve();
        clearInterval(interval);
      }
    }, 30);
    return d.promise();
  };
  var getVisibleMasonryColumns = function($parents) {
    var $masonries = $parents.find(".contains-masonry-layout");
    if ($masonries.length == 0) {
      $masonries = $parents.closest(".contains-masonry-layout");
    }
    if ($masonries.length == 0) {
      return [];
    }
    var cols = [];
    $masonries.each(function() {
      if (isInsideViewport(this)) {
        cols.push(this);
      }
    });
    return cols;
  };
  var arrayElIsTrue = function(element, index, array) {
    return element == true;
  };
  var isInsideViewport = function(_this) {
    var rect = _this.getBoundingClientRect();
    if (rect.bottom > 0 && rect.top < window.innerHeight && rect.right > 0 && rect.left < window.innerWidth) {
      return true;
    }
    return false;
  };
  var isElVisibleInsideCarousel = function(carousel_el, slide_el, offset2) {
    var carousel_rect = carousel_el.getBoundingClientRect();
    var slide_rect = slide_el.getBoundingClientRect();
    var isInside = false;
    var carouselLeft = carousel_rect.left - offset2;
    var carouselRight = carousel_rect.right + offset2;
    if (slide_rect.left >= carouselLeft && slide_rect.left <= carouselRight) {
      isInside = true;
    }
    if (slide_rect.right >= carouselLeft && slide_rect.right <= carouselRight) {
      isInside = true;
    }
    var slide_midpoint = slide_rect.left + slide_rect.width / 2;
    if (slide_midpoint >= carouselLeft && slide_midpoint <= carouselRight) {
      isInside = true;
    }
    return isInside;
  };

  // lay/frontend/assets/src/js/app/frontend/cover/cover_controller.js
  var eventsChannel2 = Backbone.Radio.channel("events");
  var cover_controller = {
    initModule: function() {
      initModule();
    }
  };
  var cover_controller_default = cover_controller;
  var jqueryMap = {
    $cover: null
  };
  var stateMap = {
    doDarken: false,
    doParallax: false,
    enabled: false,
    frame: false
  };
  var initModule = function() {
    if (frontendPassedData.misc_options_cover == "on") {
      stateMap.enabled = true;
      if (frontendPassedData.cover_darken_when_scrolling == "on") {
        stateMap.doDarken = true;
      }
      if (frontendPassedData.cover_parallaxmove_when_scrolling == "on") {
        stateMap.doParallax = true;
      }
      window.laytheme.on("newpage", function(layoutObj, type2, obj2) {
        unbindScroll();
      });
      window.laytheme.on("newpageshown", function() {
        unbindScroll();
        jqueryMap.$cover = jQuery(".cover-region");
        if (jqueryMap.$cover.length > 0) {
          jQuery("html").addClass("prevent-overscroll");
          bindBreakpointChanged();
          if (Utility.isPhoneSize && frontendPassedData.cover_disable_for_phone == true) {
            stateMap.enabled = false;
          } else {
            stateMap.enabled = true;
          }
          bindCoverClick();
          resetHeights();
          bindResize2();
          bindScroll2();
        } else {
          jQuery("html").removeClass("prevent-overscroll");
        }
      });
    }
  };
  var enableOrDisableForDesktopOrPhone = function(size2) {
    switch (size2) {
      case "desktop":
      case "tablet":
        if (frontendPassedData.cover_disable_for_phone == true && stateMap.enabled == false) {
          stateMap.enabled = true;
          bindScroll2();
        }
        break;
      case "phone":
        if (frontendPassedData.cover_disable_for_phone == true) {
          stateMap.enabled = false;
          jqueryMap.$cover.attr("style", "");
          jQuery(".cover-region").removeClass("clickable-cover");
          jQuery(".cover-region").on("click");
          unbindScroll();
        }
        break;
    }
  };
  var bindResize2 = function() {
    jQuery(window).off("window_width_changed", doResize);
    jQuery(window).on("window_width_changed", doResize);
  };
  var bindBreakpointChanged = function() {
    window.laytheme.off("sizechanged", enableOrDisableForDesktopOrPhone);
    window.laytheme.on("sizechanged", enableOrDisableForDesktopOrPhone);
  };
  var doResize = function() {
    setCoverHeightAndPositionForMobile();
  };
  var resetHeights = function() {
    jQuery(".cover-region").css({
      "top": "",
      "height": "",
      "min-height": ""
    });
    jQuery(".cover-region-placeholder, .cover-region .row, .cover-region .row-inner, .cover-region .column-wrap, .cover-inner").css({
      "height": "",
      "min-height": ""
    });
  };
  var setCoverHeightAndPositionForMobile = function() {
    if (jqueryMap.$cover.is(":visible") && stateMap.enabled && Utility.isPhoneSize) {
      var h = jQuery(".navbar").height();
      if (!jQuery(".navbar").is(":visible")) {
        h = 0;
      }
      jQuery(".cover-region").css({
        "top": h + "px",
        "height": window.innerHeight - h + "px",
        "min-height": window.innerHeight - h + "px"
      });
      jQuery(".cover-region-placeholder, .cover-region .row, .cover-region .row-inner, .cover-region .column-wrap, .cover-inner").css({
        "height": window.innerHeight - h + "px",
        "min-height": window.innerHeight - h + "px"
      });
    } else {
      resetHeights();
    }
  };
  var unbindScroll = function() {
    cancelAnimationFrame(stateMap.frame);
  };
  var bindScroll2 = function() {
    cancelAnimationFrame(stateMap.frame);
    stateMap.frame = requestAnimationFrame(doScroll);
  };
  var doScroll = function() {
    var y = window.pageYOffset || document.documentElement.scrollTop;
    if (y <= window.innerHeight && jqueryMap.$cover.is(":visible") && stateMap.enabled) {
      var css = {};
      if (stateMap.doDarken) {
        var brightness = utility_controller.map(y, 0, window.innerHeight, 1, 0.2);
        if (brightness > 1) {
          brightness = 1;
        }
        css["filter"] = "brightness(" + brightness + ")";
        css["-webkit-filter"] = "brightness(" + brightness + ")";
      }
      if (stateMap.doParallax) {
        var translate = utility_controller.map(y, 0, window.innerHeight, 0, window.innerHeight / 3);
        css["transform"] = "translate3d(0,-" + translate + "px,0)";
        css["-webkit-transform"] = "translate3d(0,-" + translate + "px,0)";
      }
      if (stateMap.doParallax || stateMap.doDarken) {
        jqueryMap.$cover.css(css);
      }
    }
    requestAnimationFrame(doScroll);
  };
  var bindCoverClick = function() {
    if (frontendPassedData.cover_scrolldown_on_click == "on" && stateMap.enabled) {
      jQuery(".cover-region").addClass("clickable-cover");
      jQuery(".cover-region").on("click", function() {
        var $page = jQuery("html, body");
        var targetScrollPos = jQuery(".cover-content-desktop").offset().top + 1;
        var currentDevice = Utility.screenSize;
        if (currentDevice == "phone") {
          targetScrollPos = jQuery(".cover-content-phone").length > 0 ? jQuery(".cover-content-phone").offset().top + 1 : targetScrollPos;
        }
        $page.animate({ scrollTop: targetScrollPos }, 400, "easeOutSine", function() {
          $page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", stopAnimation);
        });
        $page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", $page, stopAnimation);
      });
    }
  };
  var stopAnimation = function(event2) {
    event2.data.stop();
  };

  // lay/frontend/assets/src/js/app/frontend/breakpoints/breakpoints_controller.js
  var breakpoints_controller = {
    initModule: function() {
      if (frontendPassedData.phone_layout_active == "on") {
        window.laytheme.on("newpageshown", setData);
        bindResize3();
      }
    }
  };
  var Breakpoints = {
    mainHasCustomPhoneGrid: false,
    footerHasCustomPhoneGrid: false
  };
  var setData = function() {
    Breakpoints.mainHasCustomPhoneGrid = jQuery("#custom-phone-grid").length == 1 ? true : false;
    Breakpoints.footerHasCustomPhoneGrid = jQuery("#footer-custom-phone-grid").length == 1 ? true : false;
  };
  var bindResize3 = function() {
    var lastSize = Utility.screenSize;
    jQuery(window).on("window_width_changed orientationchange", function() {
      if ((Utility.screenSize == "phone" && lastSize == "tablet" || Utility.screenSize == "phone" && lastSize == "desktop") && (Breakpoints.mainHasCustomPhoneGrid != false || Breakpoints.footerHasCustomPhoneGrid != false)) {
        globalevents_controller_default.triggerSwitchedDesktopLayoutToCustomPhoneLayout();
      } else if ((Utility.screenSize == "tablet" && lastSize == "phone" || Utility.screenSize == "desktop" && lastSize == "phone") && (Breakpoints.mainHasCustomPhoneGrid != false || Breakpoints.footerHasCustomPhoneGrid != false)) {
        globalevents_controller_default.triggerSwitchedCustomPhoneLayoutToDesktopLayout();
      }
      lastSize = Utility.screenSize;
    });
  };

  // lay/frontend/assets/src/js/app/frontend/passwordprotected/passwordprotected_controller.js
  window.laytheme.on("newpageshown", function() {
    if (jQuery(".password-form").length > 0) {
      jQuery(".password-ok").on("click", function() {
        onPasswordSubmit();
      });
      jQuery(".password-form input").on("keyup", function(event2) {
        if (event2.keyCode === 13) {
          onPasswordSubmit();
        }
      });
    }
  });
  function onPasswordSubmit() {
    var password = jQuery(".password-form input").val();
    layout_controller_default.showLayout(password);
  }
  var notifyWrongPassword = function() {
    jQuery(".password-form").addClass("wrong-password");
    setTimeout(function() {
      jQuery(".password-form").removeClass("wrong-password");
    }, 300);
  };

  // lay/frontend/assets/src/js/app/frontend/animations/animations_controller.js
  var status = "";
  var el_onscroll_active = frontendPassedData.element_transition_on_scroll == "on" ? true : false;
  var animations_controller = {
    initModule: function() {
      bindBeforeContentReplacementEvent();
      bindNewPageEvent();
      bindOnContentReady();
      bindTransitionEvents();
    },
    setTransitionStatus: function(s) {
      status = s;
    },
    getTransitionStatus: function() {
      return status;
    },
    doAfterComplete: function() {
      doAfterComplete();
    }
  };
  var bindBeforeContentReplacementEvent = function() {
    window.laytheme.on("before_content_replacement", function() {
      if ((parseInt(frontendPassedData.navigation_transition_out_duration, 10) == 0 || frontendPassedData.navigation_transition_out == "none") && parseInt(frontendPassedData.navigation_transition_in_duration, 10) != 0 && frontendPassedData.navigation_transition_in != "none") {
        insertWrapHideStyleSheet();
      }
    });
  };
  var fadeIn_SiteTitle_MenuBar_Menu_etc_helper = function() {
    if (isFirstLoad == true && frontendPassedData.navigation_transition_use_revealing_transition_on_first_visit == "on") {
      fadeIn_SiteTitle_MenuBar_Menu_etc();
    }
    isFirstLoad = false;
  };
  var removeWrapHideStyleSheet = function() {
    var style_to_delete = document.getElementById("lay-hide-wrap-css");
    if (style_to_delete) {
      style_to_delete.remove();
    }
  };
  var insertWrapHideStyleSheet = function() {
    var css = document.getElementById("lay-hide-wrap-css");
    if (!css) {
      jQuery("head").append(
        '<style id="lay-hide-wrap-css">body .lay-content{opacity: 0;}/* because we need to wait for masonry to initalize before starting animation */.col.type-thumbnailgrid .thumbnail-wrap{opacity: 0;}.col.type-elementgrid .element-wrap{opacity: 0;}</style>'
      );
    }
  };
  var getColumnsToAnimate = function($columns, transition_type) {
    var colsInViewport = [];
    var fpEnabled = jQuery("html").hasClass("fp-enabled");
    var animateInDetail = transition_type.indexOf("stagger") != -1 || transition_type.indexOf("up") != -1 || transition_type.indexOf("down") != -1;
    $columns.each(function() {
      if (isInsideViewport(this)) {
        var $row = jQuery(this).closest(".row");
        if (!fpEnabled || this.classList.contains("place-freely") || fpEnabled && $row.length > 0 && window.getComputedStyle(jQuery(this).closest(".row")[0]).visibility != "hidden") {
          if (animateInDetail && jQuery(this).hasClass("type-elementgrid")) {
            jQuery(this).find(".element-wrap").each(function() {
              if (isInsideViewport(this)) {
                colsInViewport.push(this);
              }
            });
          } else if (animateInDetail && jQuery(this).hasClass("type-thumbnailgrid")) {
            var $filter = jQuery(this).find(".lay-thumbnailgrid-filter-wrap");
            if ($filter.length > 0) {
              if (isInsideViewport($filter[0])) {
                colsInViewport.push($filter[0]);
              }
            }
            jQuery(this).find(".thumbnail-wrap").each(function() {
              if (isInsideViewport(this)) {
                colsInViewport.push(this);
              }
            });
          } else if (animateInDetail && jQuery(this).hasClass("type-productsgrid")) {
            jQuery(this).find(".lay-product").each(function() {
              if (isInsideViewport(this)) {
                colsInViewport.push(this);
              }
            });
          } else if (animateInDetail && jQuery(this).hasClass("type-carousel")) {
            jQuery(this).find(".lay-carousel-wrap").each(function() {
              if (isInsideViewport(this)) {
                colsInViewport.push(this);
              }
            });
          } else {
            colsInViewport.push(this);
          }
        }
      }
    });
    return colsInViewport;
  };
  var fadeIn_SiteTitle_MenuBar_Menu_etc = function() {
    jQuery("head").append('<style id="lay-show-sitetitle-menubar-menu-etc">.sitetitle, .laynav, #lay_canvas, .navbar, .lay-fadein, .mobile-title, .burger-wrap,  body #fp-nav, body .fp-slidesNav{opacity: 1;}</style>');
    setTimeout(function() {
      var style_to_delete = document.getElementById("lay-hide-sitetitle-menubar-menu-etc");
      if (style_to_delete) {
        style_to_delete.remove();
      }
      style_to_delete = document.getElementById("lay-show-sitetitle-menubar-menu-etc");
      if (style_to_delete) {
        style_to_delete.remove();
      }
    }, frontendPassedData.navigation_transition_in_duration);
  };
  function getDistance(x1, y1, x2, y2) {
    let y = x2 - x1;
    let x = y2 - y1;
    return Math.sqrt(x * x + y * y);
  }
  var sortByVisual = function(elements, transition_type) {
    var positions = [];
    for (var i = 0; i < elements.length; i++) {
      var rect = elements[i].getBoundingClientRect();
      var d;
      if (typeof transition_type != "undefined" && transition_type == "stagger-down") {
        d = getDistance(0, window.innerHeight, rect.left, rect.top);
      } else {
        d = getDistance(0, 0, rect.left, rect.top);
      }
      positions.push(d);
    }
    elements.sort(function(a, b) {
      var ix_a = elements.indexOf(a);
      var ix_b = elements.indexOf(b);
      return positions[ix_a] - positions[ix_b];
    });
  };
  var arrayElIsTrue2 = function(element, index, array) {
    return element == true;
  };
  var bindNewPageEvent = function() {
    window.laytheme.on("newpageshown", function() {
      jQuery("img").each(function() {
        this.addEventListener("error", function() {
          this.classList.add("loaded-error");
        });
      });
    });
  };
  var waitForInviewImagesLoaded = function($content, callback2) {
    var imagesInViewport = [];
    var imagesInViewportHaveLoaded = [];
    $content.find("img.lazyload, img.lay-gif, img.lay-image-original, img.setsizes, img.lay-image-responsive, img.carousel-img").each(function() {
      if (this.classList.contains("carousel-img")) {
        if (isInsideViewport(this)) {
          var lay_carousel = jQuery(this).closest(".lay-carousel")[0];
          if (lay_carousel.classList.contains("transition-fading") || lay_carousel.classList.contains("transition-immediate")) {
            var slide = jQuery(this).closest(".lay-carousel-slide")[0];
            if (slide.classList.contains("is-selected")) {
              imagesInViewport.push(this);
              imagesInViewportHaveLoaded.push(false);
            }
          } else {
            if (isElVisibleInsideCarousel(lay_carousel, this, -80)) {
              imagesInViewport.push(this);
              imagesInViewportHaveLoaded.push(false);
            }
          }
        }
      } else {
        if (isInsideViewport(this)) {
          imagesInViewport.push(this);
          imagesInViewportHaveLoaded.push(false);
        }
      }
    });
    if (imagesInViewport.length == 0) {
      callback2();
      return;
    }
    for (var i = 0; i < imagesInViewport.length; i++) {
      ;
      (function(index) {
        var $img = jQuery(imagesInViewport[index]);
        if ($img.hasClass("lazyloaded") || $img.hasClass("loaded") || $img.hasClass("loaded-error")) {
          imagesInViewportHaveLoaded[index] = true;
        } else {
          var observer = new MutationObserver(() => {
            if ($img.hasClass("lazyloaded") || $img.hasClass("loaded") || $img.hasClass("loaded-error")) {
              imagesInViewportHaveLoaded[index] = true;
            }
          });
          observer.observe($img[0], { attributes: true, attributeFilter: ["class"] });
        }
      })(i);
    }
    if (imagesInViewport.length > 0) {
      var interval = setInterval(function() {
        if (imagesInViewportHaveLoaded.every(arrayElIsTrue2)) {
          callback2();
          clearInterval(interval);
        }
      }, 30);
    }
  };
  var isFirstLoad = true;
  var column_selectors;
  var bindOnContentReady = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      column_selectors = void 0;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          column_selectors = ["#grid", ".cover-region-desktop", "#footer"];
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            column_selectors = ["#custom-phone-grid", ".cover-region-phone", "#footer-custom-phone-grid"];
          } else if (!footerHasPhoneCPL && hasCPL) {
            column_selectors = ["#custom-phone-grid", ".cover-region-phone", "#footer"];
          } else if (footerHasPhoneCPL && !hasCPL) {
            column_selectors = ["#grid", ".cover-region-desktop", "#footer-custom-phone-grid"];
          } else if (!footerHasPhoneCPL && !hasCPL) {
            column_selectors = ["#grid", ".cover-region-desktop", "#footer"];
          }
          break;
      }
      if (Array.isArray(column_selectors)) {
        for (let index = 0; index < column_selectors.length; index++) {
          column_selectors[index] = column_selectors[index] + ' .row[data-collapsed="false"] .col:not(.type-stack), ' + column_selectors[index] + " .col.place-freely";
        }
      }
      if (isFirstLoad == true && frontendPassedData.navigation_transition_use_revealing_transition_on_first_visit == "on") {
        window.laytheme.trigger("transition_in");
      }
    });
  };
  var doAfterComplete = function() {
    status = "ended";
    window.laytheme.trigger("transition_navigation_out_completed");
    jQuery("a.sitetitle, .laynav a").css("pointer-events", "");
    insertWrapHideStyleSheet();
  };
  var bindTransitionEvents = function() {
    window.laytheme.on("transition_out", function() {
      var translateVal = Utility.isPhoneSize ? parseInt(frontendPassedData.navigation_transition_y_translate_phone, 10) : parseInt(frontendPassedData.navigation_transition_y_translate_desktop, 10);
      var $columns = jQuery(column_selectors.join(","));
      var colsInViewport = getColumnsToAnimate($columns, frontendPassedData.navigation_transition_out);
      if (frontendPassedData.navigation_transition_out.indexOf("stagger") != -1 && colsInViewport.length > 1) {
        sortByVisual(colsInViewport, frontendPassedData.navigation_transition_out);
      }
      if (jQuery(".lay-imagehover-region").length > 0) {
        anime({
          targets: ".lay-imagehover-region",
          opacity: [1, 0],
          easing: "easeOutSine",
          duration: 100
        });
      }
      var myTimeline = anime.timeline({
        begin: function() {
          jQuery('.row[data-collapsed="true"] .col').css("display", "none");
          jQuery("a.sitetitle, .laynav a, .lay-content a, .lay-content .col, .clickable-cover").css("pointer-events", "none");
          jQuery(".thumbnail-wrap, .element-wrap").css({
            "transition-delay": "",
            transition: "none"
          });
          if (el_onscroll_active) {
            jQuery(".col").css({
              "transition-delay": "",
              transition: "none"
            });
            jQuery("body.lay-transition-elements-on-scroll .row.no-y-offsets:last-child").css("overflow", "visible");
          }
        },
        complete: function() {
          doAfterComplete();
        }
      });
      var onylAnimateWrap = frontendPassedData.navigation_transition_out == "none" || frontendPassedData.navigation_transition_out == "fade" ? true : false;
      if (onylAnimateWrap) {
        switch (frontendPassedData.navigation_transition_out) {
          case "fade":
            myTimeline.add({
              targets: ".lay-content",
              opacity: 0,
              easing: frontendPassedData.navigation_transition_out_easing,
              duration: frontendPassedData.navigation_transition_out_duration
            });
            break;
        }
      } else {
        switch (frontendPassedData.navigation_transition_out) {
          case "stagger-fade":
            myTimeline.add({
              targets: colsInViewport,
              opacity: 0,
              easing: frontendPassedData.navigation_transition_out_easing,
              duration: frontendPassedData.navigation_transition_out_duration,
              delay: anime.stagger(100)
              // increase delay by 100ms for each elements.
            });
            break;
          case "stagger-down":
            myTimeline.add({
              targets: colsInViewport,
              translateY: translateVal,
              opacity: 0,
              easing: frontendPassedData.navigation_transition_out_easing,
              duration: frontendPassedData.navigation_transition_out_duration,
              delay: anime.stagger(100)
              // increase delay by 100ms for each elements.
            });
            break;
          case "stagger-up":
            myTimeline.add({
              targets: colsInViewport,
              translateY: -translateVal,
              opacity: 0,
              easing: frontendPassedData.navigation_transition_out_easing,
              duration: frontendPassedData.navigation_transition_out_duration,
              delay: anime.stagger(100)
              // increase delay by 100ms for each elements.
            });
            break;
          case "down":
            myTimeline.add({
              targets: colsInViewport,
              translateY: translateVal,
              opacity: 0,
              easing: frontendPassedData.navigation_transition_out_easing,
              duration: frontendPassedData.navigation_transition_out_duration
            });
            break;
          case "up":
            myTimeline.add({
              targets: colsInViewport,
              translateY: -translateVal,
              opacity: 0,
              easing: frontendPassedData.navigation_transition_out_easing,
              duration: frontendPassedData.navigation_transition_out_duration
            });
            break;
        }
        myTimeline.add({
          targets: ".lay-content",
          opacity: 0,
          easing: "easeOutSine",
          duration: 100
        });
      }
    });
    window.laytheme.on("transition_in", function() {
      setTimeout(function() {
        var $parents = jQuery(column_selectors.join(","));
        var masonryCols = getVisibleMasonryColumns($parents);
        if (masonryCols.length > 0) {
          jQuery.when(waitForMasonryInitialized(masonryCols)).then(function() {
            setTimeout(function() {
              doTransitionIn();
            }, 50);
          });
        } else {
          doTransitionIn();
        }
      }, 0);
    });
  };
  var doTransitionIn = function() {
    status = "started";
    var translateVal = Utility.isPhoneSize ? parseInt(frontendPassedData.navigation_transition_y_translate_phone, 10) : parseInt(frontendPassedData.navigation_transition_y_translate_desktop, 10);
    var $columns = jQuery(column_selectors.join(","));
    var colsInViewport = getColumnsToAnimate($columns, frontendPassedData.navigation_transition_in);
    if (colsInViewport.length == 0) {
      fadeIn_SiteTitle_MenuBar_Menu_etc_helper();
      onTransitionInComplete([]);
      return;
    }
    if (frontendPassedData.navigation_transition_out.indexOf("stagger") != -1 && colsInViewport.length > 1) {
      sortByVisual(colsInViewport, frontendPassedData.navigation_transition_in);
    }
    if (frontendPassedData.navigation_transition_in != "none") {
      for (var i = 0; i < colsInViewport.length; i++) {
        var col = colsInViewport[i];
        col.classList.add("disable-css-transitions");
      }
    }
    if (jQuery(".lay-imagehover-region").length > 0) {
      jQuery(".lay-imagehover-region").css("opacity", "");
    }
    var myTimeline = anime.timeline({
      autoplay: false,
      begin: function() {
        fadeIn_SiteTitle_MenuBar_Menu_etc_helper();
      },
      complete: function() {
        onTransitionInComplete(colsInViewport);
      }
    });
    var onylAnimateWrap = frontendPassedData.navigation_transition_in == "none" || frontendPassedData.navigation_transition_in == "fade" ? true : false;
    if (onylAnimateWrap) {
      switch (frontendPassedData.navigation_transition_in) {
        case "none":
          myTimeline.add({
            targets: ".lay-content",
            opacity: 1,
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: 0
          });
          break;
        case "fade":
          myTimeline.add({
            targets: ".lay-content",
            opacity: [0, 1],
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: frontendPassedData.navigation_transition_in_duration
          });
          break;
      }
    } else {
      myTimeline.add({
        targets: ".lay-content",
        opacity: 1,
        easing: "easeOutSine",
        duration: 100
      });
      switch (frontendPassedData.navigation_transition_in) {
        case "stagger-fade":
          myTimeline.add({
            targets: colsInViewport,
            opacity: [0, 1],
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: frontendPassedData.navigation_transition_in_duration,
            delay: anime.stagger(100)
            // increase delay by 100ms for each elements.
          });
          break;
        case "stagger-up":
          myTimeline.add({
            targets: colsInViewport,
            translateY: [translateVal, 0],
            opacity: [0, 1],
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: frontendPassedData.navigation_transition_in_duration,
            delay: anime.stagger(100)
            // increase delay by 100ms for each elements.
          });
          break;
        case "stagger-down":
          myTimeline.add({
            targets: colsInViewport,
            translateY: [-translateVal, 0],
            opacity: [0, 1],
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: frontendPassedData.navigation_transition_in_duration,
            delay: anime.stagger(100)
            // increase delay by 100ms for each elements.
          });
          break;
        case "up":
          myTimeline.add({
            targets: colsInViewport,
            translateY: [translateVal, 0],
            opacity: [0, 1],
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: frontendPassedData.navigation_transition_in_duration
          });
          break;
        case "down":
          myTimeline.add({
            targets: colsInViewport,
            translateY: [-translateVal, 0],
            opacity: [0, 1],
            easing: frontendPassedData.navigation_transition_in_easing,
            duration: frontendPassedData.navigation_transition_in_duration
          });
          break;
      }
    }
    if (frontendPassedData.navigation_transition_in == "none") {
      myTimeline.play();
      onTransitionInComplete(colsInViewport);
      fadeIn_SiteTitle_MenuBar_Menu_etc_helper();
    } else {
      var $columns = jQuery(column_selectors.join(","));
      waitForInviewImagesLoaded($columns, function() {
        myTimeline.play();
      });
    }
  };
  var onTransitionInComplete = function(colsInViewport) {
    removeWrapHideStyleSheet();
    jQuery(".lay-content").attr("style", "");
    for (var i = 0; i < colsInViewport.length; i++) {
      var col = colsInViewport[i];
      col.classList.remove("disable-css-transitions");
    }
    for (var i = 0; i < colsInViewport.length; i++) {
      var col = colsInViewport[i];
      col.style.opacity = "";
      if (!col.classList.contains("has-parallax") && !col.hasAttribute("data-offsetx") && !col.hasAttribute("data-offsety")) {
        col.style.transform = "";
      }
    }
    jQuery("a.sitetitle, .laynav a").css("pointer-events", "");
    window.laytheme.trigger("transition_navigation_in_completed");
  };
  var animations_controller_default = animations_controller;

  // lay/frontend/assets/src/js/app/frontend/layout/layout_controller.js
  var layout_controller = {
    showLayout: function(password = "", callback2 = "") {
      showLayout(password, callback2);
    },
    initModule: function() {
      initModule2();
    },
    hideRegions: function() {
      hideRegions();
    }
  };
  var stateMap2 = {
    type: null,
    isFirstLoad: true,
    gridObj: null
  };
  var jqueryMap2 = {
    $body: null
  };
  var setjqueryMap = function() {
    jqueryMap2.$body = jQuery("body");
  };
  var progress = null;
  var showLayout = function(password, callback2) {
    var type2 = jqueryMap2.$body.attr("data-type");
    var id2 = jqueryMap2.$body.attr("data-id");
    stateMap2.type = type2;
    var ajax_data = {
      "action": "get_laytheme_layout",
      "id": id2,
      "type": type2,
      "password": password
    };
    if (progress) {
      progress.abort();
    }
    progress = jQuery.ajax({
      url: frontendPassedData.ajax_url,
      data: ajax_data,
      type: "post",
      success: (json) => {
        var result2 = window.JSON.parse(json);
        if (result2["notification"] == "wrongpassword") {
          notifyWrongPassword();
        } else {
          if (password != "") {
            animations_controller_default.doAfterComplete();
            status2 == "ended";
          }
          var status2 = animations_controller_default.getTransitionStatus();
          if (status2 == "ended") {
            replaceContentAndFireEvents(callback2, result2);
          } else {
            window.laytheme.once("transition_navigation_out_completed", function() {
              replaceContentAndFireEvents(callback2, result2);
            });
          }
        }
      },
      error: (event2) => {
        console.log("error loading page");
        console.log(event2);
      }
    });
  };
  var replaceContentAndFireEvents = function(callback2, result2) {
    window.laytheme.trigger("before_content_replacement");
    if (typeof callback2 == "function") {
      callback2();
    }
    jQuery(".lay-content").replaceWith(result2["markup"]);
    utility_controller.setBodyClasses(result2["obj"]);
    globalevents_controller_default.triggerNewPageShown({}, result2["type"], result2["obj"]);
    setTimeout(function() {
      window.laytheme.trigger("transition_in");
    }, 0);
  };
  var hideRegions = function() {
    window.laytheme.trigger("transition_out");
  };
  var initModule2 = function() {
    setjqueryMap();
  };
  var layout_controller_default = layout_controller;

  // lay/frontend/assets/src/js/app/frontend/parallax/parallax_controller.js
  var parallax_controller = {
    initModule: function() {
      initModule3();
    }
  };
  var eventsChannel3 = Backbone.Radio.channel("events");
  var parallax_controller_default = parallax_controller;
  var stateMap3 = {
    cols: [],
    scrollY: 0,
    parallaxActive: false
  };
  var getTransforms = function(trans) {
    return {
      "-webkit-transform": trans,
      "-moz-transform": trans,
      "-ms-transform": trans,
      transform: trans
    };
  };
  var parallaxScroll = function() {
    stateMap3.scrollY = window.pageYOffset || document.documentElement.scrollTop;
    for (var i = 0; i < stateMap3.cols.length; i++) {
      if (stateMap3.cols[i][1] == 0) {
        continue;
      }
      var offsetX_mu = stateMap3.cols[i][7];
      var offsetyMu = stateMap3.cols[i][6];
      var rect = stateMap3.cols[i][0][0].getBoundingClientRect();
      var offsetTop = rect.top + stateMap3.scrollY;
      var start = offsetTop - window.innerHeight - stateMap3.cols[i][2];
      if (start < 0) {
        start = 0;
      }
      var stop = offsetTop + rect.height - stateMap3.cols[i][2];
      var percentage = utility_controller.map(stateMap3.scrollY, start, stop, 0, 100);
      if (percentage < 0 || percentage > 100) {
        continue;
      }
      stateMap3.cols[i][2] = percentage * stateMap3.cols[i][1] * 11.2;
      var translateY = stateMap3.cols[i][2];
      switch (offsetyMu) {
        case "px":
          translateY += parseFloat(stateMap3.cols[i][3], 10);
          break;
        case "vw":
        case "%":
          translateY += window.innerWidth / 100 * stateMap3.cols[i][3];
          break;
      }
      var translateX = stateMap3.cols[i][4];
      stateMap3.cols[i][0].css(getTransforms("translate(" + translateX + offsetX_mu + ", " + translateY + "px)"));
    }
  };
  var bindResize4 = function() {
    var lastSize = Utility.screenSize;
    jQuery(window).on("window_width_changed orientationchange", function() {
      if (Utility.screenSize == "phone" && lastSize == "tablet" && Breakpoints.mainHasCustomPhoneGrid == false) {
        if (stateMap3.parallaxActive == true) {
          jQuery(".col").css(getTransforms(""));
          eventsChannel3.off("scroll", parallaxScroll);
          stateMap3.parallaxActive = false;
        }
      } else if (Utility.screenSize == "tablet" && lastSize == "phone") {
        if (stateMap3.parallaxActive == false && stateMap3.cols.length > 0) {
          eventsChannel3.on("scroll", parallaxScroll);
          stateMap3.parallaxActive = true;
        }
      }
      if (stateMap3.parallaxActive) {
        jQuery(window).trigger("scroll");
      }
      lastSize = Utility.screenSize;
    });
  };
  var bindNewSingle = function() {
    window.laytheme.on("newpageshown", function() {
      stateMap3.cols = [];
      jQuery(".col[data-yvel]").each(function() {
        var yvel = jQuery(this).attr("data-yvel");
        if (yvel < 1) {
          yvel = 1;
        }
        yvel = parseFloat(yvel);
        yvel -= 1;
        yvel = -yvel;
        var ytranslate = 0;
        var yoffset = jQuery(this).attr("data-offsety");
        if (typeof yoffset == "undefined") {
          yoffset = 0;
        }
        var xoffset = jQuery(this).attr("data-offsetx");
        if (typeof xoffset == "undefined") {
          xoffset = 0;
        }
        var offsetyMu = jQuery(this).attr("data-offsetymu");
        if (offsetyMu == void 0) {
          offsetyMu = "";
        }
        var offsetxMu = jQuery(this).attr("data-offsetxmu");
        if (offsetxMu == void 0) {
          offsetxMu = "";
        }
        var isMiddleAlignedPositionAbsoluteElementIn100vhRow = false;
        if (jQuery(this.parentNode.parentNode).hasClass("_100vh") && jQuery(this).hasClass("align-middle") && (jQuery(this).attr("data-type") == "text" || jQuery(this).attr("data-type") == "html" || jQuery(this).hasClass("absolute-position"))) {
          isMiddleAlignedPositionAbsoluteElementIn100vhRow = true;
        }
        var arr = [jQuery(this), yvel, ytranslate, yoffset, xoffset, isMiddleAlignedPositionAbsoluteElementIn100vhRow, offsetyMu, offsetxMu];
        stateMap3.cols.push(arr);
      });
      eventsChannel3.off("scroll", parallaxScroll);
      stateMap3.scrollY = 0;
      if (stateMap3.cols.length > 0) {
        if (Utility.isDesktopOrTabletSize || Breakpoints.mainHasCustomPhoneGrid) {
          eventsChannel3.on("scroll", parallaxScroll);
          stateMap3.parallaxActive = true;
        }
      }
    });
  };
  var initParallax = function() {
    bindNewSingle();
    bindResize4();
  };
  var initModule3 = function() {
    if (frontendPassedData.simple_parallax == "on") {
      initParallax();
    }
  };

  // lay/frontend/assets/src/js/app/frontend/html5video/load_html5_videos_controller.js
  var loadVideosInstantly = function($target7) {
    $target7.find("video.video-lazyload").each(function() {
      for (var source in this.children) {
        var videoSource = this.children[source];
        if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE" && videoSource.dataset.src != void 0) {
          videoSource.src = videoSource.dataset.src;
        }
      }
      this.load();
      this.classList.remove("video-lazyload");
      this.classList.add("loaded");
      if (this.classList.contains("autoplay")) {
        this.setAttribute("autoplay", "");
      }
    });
  };
  var loadSpecificVideo = function(video) {
    if (video.classList.contains("video-lazyload")) {
      for (var source in video.children) {
        var videoSource = video.children[source];
        if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE" && videoSource.dataset.src != void 0) {
          videoSource.src = videoSource.dataset.src;
        }
      }
      video.load();
      video.classList.remove("video-lazyload");
      video.classList.add("loaded");
      if (video.classList.contains("autoplay")) {
        video.setAttribute("autoplay", "");
      }
    }
  };
  function LazyLoadVideos($target7) {
    var $target7 = $target7;
    var init4 = function() {
      var $lazyVideos = $target7.find("video.video-lazyload");
      if ("IntersectionObserver" in window) {
        var lazyVideoObserver = new IntersectionObserver(function(entries, observer) {
          entries.forEach(function(video) {
            if (video.isIntersecting) {
              for (var source in video.target.children) {
                var videoSource = video.target.children[source];
                if (typeof videoSource.tagName === "string" && videoSource.tagName === "SOURCE" && videoSource.dataset.src != void 0) {
                  videoSource.src = videoSource.dataset.src;
                }
              }
              video.target.load();
              video.target.classList.remove("video-lazyload");
              video.target.classList.add("loaded");
              if (video.target.classList.contains("autoplay")) {
                video.target.setAttribute("autoplay", "");
              }
              lazyVideoObserver.unobserve(video.target);
            }
          });
        });
        $lazyVideos.each(function() {
          lazyVideoObserver.observe(this);
        });
      }
    };
    return {
      init: init4
    };
  }
  var initLazyLoadVideosOnScroll = function($target7) {
    var loadVideosObject = new LazyLoadVideos($target7);
    loadVideosObject.init();
  };
  var load_html5_videos_controller = {
    loadVideosInstantly: function($target7) {
      loadVideosInstantly($target7);
    },
    initLazyLoadVideosOnScroll: function($target7) {
      initLazyLoadVideosOnScroll($target7);
    },
    loadSpecificVideo: function($video) {
      loadSpecificVideo($video);
    }
  };
  var load_html5_videos_controller_default = load_html5_videos_controller;

  // lay/frontend/assets/src/js/app/frontend/html5video/html5video_controller.js
  var stateMap4 = {
    isIOS: false,
    isTouchDevice: false
  };
  var html5video_controller = {
    initModule: function() {
      initModule4();
    }
  };
  var html5video_controller_default = html5video_controller;
  var bindDelegatedEvents = function() {
    jQuery(document).on("click", ".lay-mute-unmute-button", function(e) {
      e.stopPropagation();
      e.preventDefault();
      jQuery(this).toggleClass("unmuted");
      var video = jQuery(this.parentNode).find("video")[0];
      video.muted = !video.muted;
      if (jQuery(this.parentNode).hasClass("video-slide") && video.muted == false) {
        var $otherUnmuteButtons = jQuery(this).closest(".lay-carousel").find(".lay-mute-unmute-button");
        var $thisUnmuteButton = jQuery(this);
        $otherUnmuteButtons.each(function() {
          if (!jQuery(this).is($thisUnmuteButton)) {
            jQuery(this).removeClass("unmuted");
            var video2 = jQuery(this.parentNode).find("video")[0];
            video2.muted = true;
          }
        });
      }
    });
  };
  var bindNewSingle2 = function() {
    jQuery(".html5video video").each(function() {
      var video = this;
      var $playicon = jQuery(this.parentNode).find(".html5video-customplayicon");
      var $placeholder = jQuery(this.parentNode).find(".html5-video-placeholder-image");
      $playicon.on("click", function() {
        jQuery(video).one("canplay", function() {
          this.play();
        });
        load_html5_videos_controller_default.loadSpecificVideo(video);
        jQuery(video).addClass("userinteractedwith-playing");
        jQuery(video).removeClass("userinteractedwith-paused");
        jQuery(video).show();
        jQuery(video)[0].play();
        jQuery(this).hide();
        $placeholder.hide();
      });
    });
    jQuery(".html5video .html5-video-placeholder-image.playpauseonclick").each(function() {
      var video = jQuery(this.parentNode).find("video")[0];
      var $playicon = jQuery(this.parentNode).find(".html5video-customplayicon");
      jQuery(this).on("click", function() {
        jQuery(video).one("canplay", function() {
          this.play();
        });
        load_html5_videos_controller_default.loadSpecificVideo(video);
        jQuery(video).addClass("userinteractedwith-playing");
        jQuery(video).removeClass("userinteractedwith-paused");
        jQuery(video).show();
        jQuery(video)[0].play();
        jQuery(this).hide();
        $playicon.hide();
      });
    });
    var pausePlayOnClickTarget = ".html5video video.playpauseonclick";
    jQuery(pausePlayOnClickTarget).on("click", function() {
      if (this.paused) {
        jQuery(this).one("canplay", function() {
          this.play();
        });
        load_html5_videos_controller_default.loadSpecificVideo(this);
        this.play();
        jQuery(this.parentNode).find(".html5video-customplayicon").hide();
        jQuery(this).addClass("userinteractedwith-playing");
        jQuery(this).removeClass("userinteractedwith-paused");
      } else {
        this.pause();
        jQuery(this.parentNode).find(".html5video-customplayicon").show();
        jQuery(this).removeClass("userinteractedwith-playing");
        jQuery(this).addClass("userinteractedwith-paused");
      }
    });
  };
  var bindPlayVideoThumbnailsOnMouseover = function() {
    if (frontendPassedData.video_thumbnail_mouseover_behaviour == "play_on_mouseover") {
      jQuery("body").on("mouseenter", ".thumb-rel", function() {
        var $vid = jQuery(this).find("video");
        if ($vid.length > 0) {
          jQuery($vid[0]).one("canplay", function() {
            this.play();
          });
          load_html5_videos_controller_default.loadSpecificVideo($vid[0]);
          $vid[0].play();
        }
      });
      jQuery("body").on("mouseleave", ".thumb-rel", function() {
        var $vid = jQuery(this).find("video");
        if ($vid.length > 0) {
          $vid[0].pause();
        }
      });
    }
  };
  var initModule4 = function() {
    stateMap4.isIOS = /iPad|iPhone|iPod/.test(navigator.platform);
    stateMap4.isTouchDevice = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/);
    window.laytheme.on("newpageshown", bindNewSingle2);
    if (!stateMap4.isTouchDevice) {
      bindPlayVideoThumbnailsOnMouseover();
    }
    bindDelegatedEvents();
  };

  // lay/frontend/assets/src/js/app/frontend/prevnext/prevnext_controller.js
  var prevnext_controller = {
    getProjectLinkAttrs: function(nextprev) {
      return getProjectLinkAttrs(nextprev);
    },
    getCatId: function(postid) {
      return getCatId(postid);
    },
    getCatLength: function(catid2) {
      return getCatLength(catid2);
    },
    showHideProjectArrows: function(state) {
      showHideProjectArrows(state);
    },
    maybeHideProjectArrowsOnInit: function(state) {
      maybeHideProjectArrowsOnInit(state);
    },
    initModule: function() {
      initModule5();
    }
  };
  var prevnext_controller_default = prevnext_controller;
  var stateMap5 = {
    id: null,
    catid: null,
    type: null,
    projectsMeta: []
  };
  var jqueryMap3 = {
    $pa_next: null,
    $pa_prev: null,
    $body: null
  };
  var setStateMap = function() {
    stateMap5.catid = utility_controller.parseIdsString(jqueryMap3.$body.attr("data-catid"));
    stateMap5.id = jqueryMap3.$body.attr("data-id");
    stateMap5.type = jqueryMap3.$body.attr("data-type");
  };
  var updatePrevNextLinksAddedWithTinyMCE = function() {
    if (jQuery("body").attr("data-type") == "project") {
      jQuery('a[href="#laynextproject"], a.laynextproject').each(function() {
        var obj2 = getProjectLinkObj("next");
        if (typeof obj2 != "undefined") {
          jQuery(this).attr({
            "data-type": "project",
            "href": obj2.url,
            "data-catid": utility_controller.stringifyCatIds(obj2.catid),
            "data-id": obj2.id,
            "data-title": obj2.title
          });
        }
      });
      jQuery('a[href="#layprevproject"], a.layprevproject').each(function() {
        var obj2 = getProjectLinkObj("prev");
        if (typeof obj2 != "undefined") {
          jQuery(this).attr({
            "data-type": "project",
            "href": obj2.url,
            "data-catid": utility_controller.stringifyCatIds(obj2.catid),
            "data-id": obj2.id,
            "data-title": obj2.title
          });
        }
      });
    }
  };
  var maybeHideProjectArrowsOnInit = function(state) {
    if (state.type == "project" && frontendPassedData.show_arrows == "on") {
      var catlength = getCatLength(state.catid);
      if (catlength <= 1) {
        jQuery(".project-arrow").addClass("hide");
      }
    }
    if (state.type != "project") {
      jQuery(".project-arrow").addClass("hide");
    }
  };
  var showHideProjectArrows = function(state) {
    if (frontendPassedData.show_arrows == "on") {
      if (state == null) {
        return;
      }
      var oldType = state.type;
      if (state.type != "project") {
        jQuery(".project-arrow").addClass("hide");
      }
      if (state.type == "project") {
        var catlength = getCatLength(state.catid);
        if (catlength <= 1) {
          jQuery(".project-arrow").addClass("hide");
        } else if (frontendPassedData.pa_type != "project-thumbnails") {
          jQuery(".project-arrow").removeClass("hide");
        }
      }
      if (oldType == "project" && state.type == "project" && frontendPassedData.pa_type == "project-thumbnails") {
        jQuery(".project-arrow").addClass("hide");
      }
    }
  };
  var getProjectIndex = function(nextprev) {
    switch (frontendPassedData.prevnext_navigate_through) {
      case "same_category":
        var ix, i;
        var currentId = stateMap5.id;
        var currentCatIds = stateMap5.catid;
        var currentCatId = getCurrentCatId(currentCatIds);
        if (typeof stateMap5.projectsMeta[currentCatId] == "undefined") {
          return 0;
        }
        var length = stateMap5.projectsMeta[currentCatId].length;
        for (i = 0; i < length; i++) {
          if (currentId == stateMap5.projectsMeta[currentCatId][i]["id"]) {
            ix = i;
            break;
          }
        }
        if (nextprev == "next") {
          ix++;
          if (ix == length) {
            ix = 0;
          }
        } else if (nextprev == "prev") {
          ix--;
          if (ix < 0) {
            ix = length - 1;
          }
        }
        return ix;
        break;
      case "all_projects":
        var ix, i;
        var currentId = stateMap5.id;
        var length = stateMap5.projectsMeta.length;
        for (i = 0; i < length; i++) {
          if (currentId == stateMap5.projectsMeta[i]["id"]) {
            ix = i;
            break;
          }
        }
        if (nextprev == "next") {
          ix++;
          if (ix == length) {
            ix = 0;
          }
        } else if (nextprev == "prev") {
          ix--;
          if (ix < 0) {
            ix = length - 1;
          }
        }
        return ix;
        break;
    }
  };
  var getProjectLinkAttrs = function(nextprev) {
    if (typeof obj != "undefined") {
      return 'href="' + obj.url + '" data-catid="' + obj.catid + '" data-id="' + obj.id + '" data-title="' + obj.title + '" data-type="project"';
    }
  };
  var getProjectLinkObj = function(nextprev) {
    var ix = getProjectIndex(nextprev);
    if (jQuery.isNumeric(ix)) {
      switch (frontendPassedData.prevnext_navigate_through) {
        case "same_category":
          var currentCatIds = stateMap5.catid;
          var currentCatId = getCurrentCatId(currentCatIds);
          if (typeof currentCatId != "undefined") {
            return {
              title: stateMap5.projectsMeta[currentCatId][ix]["title"],
              url: stateMap5.projectsMeta[currentCatId][ix]["url"],
              id: stateMap5.projectsMeta[currentCatId][ix]["id"],
              catid: stateMap5.projectsMeta[currentCatId][ix]["catid"],
              thumb: stateMap5.projectsMeta[currentCatId][ix]["thumb"],
              thumbar: stateMap5.projectsMeta[currentCatId][ix]["thumbar"]
            };
          }
          break;
        case "all_projects":
          return {
            title: stateMap5.projectsMeta[ix]["title"],
            url: stateMap5.projectsMeta[ix]["url"],
            id: stateMap5.projectsMeta[ix]["id"],
            catid: stateMap5.projectsMeta[ix]["catid"],
            thumb: stateMap5.projectsMeta[ix]["thumb"],
            thumbar: stateMap5.projectsMeta[ix]["thumbar"]
          };
          break;
      }
    }
  };
  var updateArrows = function() {
    if (frontendPassedData.show_arrows == "on" && jqueryMap3.$body.attr("data-type") == "project") {
      var nextAttrs = getProjectLinkObj("next");
      var prevAttrs = getProjectLinkObj("prev");
      if (typeof nextAttrs != "undefined") {
        jqueryMap3.$pa_next.attr({
          "data-title": nextAttrs.title,
          "data-catid": utility_controller.stringifyCatIds(nextAttrs.catid),
          "data-id": nextAttrs.id,
          "href": nextAttrs.url
        });
      }
      if (typeof prevAttrs != "undefined") {
        jqueryMap3.$pa_prev.attr({
          "data-title": prevAttrs.title,
          "data-catid": utility_controller.stringifyCatIds(prevAttrs.catid),
          "data-id": prevAttrs.id,
          "href": prevAttrs.url
        });
      }
      if (frontendPassedData.pa_type == "project-thumbnails") {
        if (typeof nextAttrs != "undefined") {
          var nextImg = '<img src="' + nextAttrs.thumb["_512"] + '" alt="">';
          jqueryMap3.$pa_next.html('<div class="pa-thumb-wrap" style="padding-bottom:' + nextAttrs.thumbar * 100 + '%;">' + nextImg + "</div>");
        }
        if (typeof prevAttrs != "undefined") {
          var prevImg = '<img src="' + prevAttrs.thumb["_512"] + '" alt="">';
          jqueryMap3.$pa_prev.html('<div class="pa-thumb-wrap" style="padding-bottom:' + prevAttrs.thumbar * 100 + '%;">' + prevImg + "</div>");
        }
        if (frontendPassedData.prevnext_navigate_through == "same_category") {
          var catlength = getCatLength(stateMap5.catid);
          if (catlength > 1) {
            jqueryMap3.$pa_next.removeClass("hide");
            jqueryMap3.$pa_prev.removeClass("hide");
          }
        } else {
          jqueryMap3.$pa_next.removeClass("hide");
          jqueryMap3.$pa_prev.removeClass("hide");
        }
      }
    }
  };
  var getCatLength = function(catid2) {
    if (typeof catid2 != "undefined" && catid2 != "") {
      if (frontendPassedData.prevnext_navigate_through == "same_category") {
        var catid_to_go_through = getCurrentCatId(catid2);
        return stateMap5.projectsMeta[catid_to_go_through].length;
      } else {
        return stateMap5.projectsMeta.length;
      }
    }
  };
  var getCatId = function(postid) {
    var catids = [];
    switch (frontendPassedData.prevnext_navigate_through) {
      case "same_category":
        for (var prop in stateMap5.projectsMeta) {
          for (var i = 0; i < stateMap5.projectsMeta[prop].length; i++) {
            if (stateMap5.projectsMeta[prop][i]["id"] == postid) {
              catids.push(prop);
            }
          }
        }
        break;
      case "all_projects":
        for (var i = 0; i < stateMap5.projectsMeta.length; i++) {
          if (postid == stateMap5.projectsMeta[i]["id"]) {
            catids.push(stateMap5.projectsMeta[i]["catid"]);
          }
        }
        break;
    }
    return catids;
  };
  var getCurrentCatId = function(currentCatIds) {
    if (Array.isArray(currentCatIds)) {
      return currentCatIds[0];
    }
    return currentCatIds;
  };
  var setjqueryMap2 = function() {
    jqueryMap3.$pa_next = jQuery(".pa-next");
    jqueryMap3.$pa_prev = jQuery(".pa-prev");
    jqueryMap3.$body = jQuery("body");
  };
  var initModule5 = function() {
    setjqueryMap2();
    stateMap5.projectsMeta = JSON.parse(frontendPassedData.projectsMeta);
    window.laytheme.on("newpageshown", function() {
      showHideProjectArrows(window.history.state);
      setStateMap();
      updateArrows();
      updatePrevNextLinksAddedWithTinyMCE();
    });
  };

  // lay/frontend/assets/src/js/app/frontend/prevnext/prevnext_news_controller.js
  var prevnext_news_controller = {
    initModule: function() {
      initModule6();
    }
  };
  var initModule6 = function() {
    setStateMap2();
    stateMap6.newsMeta = JSON.parse(frontendPassedData.newsMeta);
    window.laytheme.on("newpageshown", function() {
      setStateMap2();
      updatePrevNextLinksAddedWithTinyMCE2();
    });
  };
  var prevnext_news_controller_default = prevnext_news_controller;
  var stateMap6 = {
    id: null,
    catid: null,
    type: null,
    newsMeta: []
  };
  var setStateMap2 = function() {
    stateMap6.catid = utility_controller.parseIdsString(jQuery("body").attr("data-catid"));
    stateMap6.id = jQuery("body").attr("data-id");
    stateMap6.type = jQuery("body").attr("data-type");
  };
  var getNewsIndex = function(nextprev) {
    var ix, i;
    var currentId = stateMap6.id;
    var length = stateMap6.newsMeta.length;
    for (i = 0; i < length; i++) {
      if (currentId == stateMap6.newsMeta[i]["id"]) {
        ix = i;
        break;
      }
    }
    if (nextprev == "next") {
      ix++;
      if (ix == length) {
        ix = 0;
      }
    } else if (nextprev == "prev") {
      ix--;
      if (ix < 0) {
        ix = length - 1;
      }
    }
    return ix;
  };
  var getNewsLinkObj = function(nextprev) {
    var ix = getNewsIndex(nextprev);
    if (jQuery.isNumeric(ix)) {
      return {
        title: stateMap6.newsMeta[ix]["title"],
        url: stateMap6.newsMeta[ix]["url"],
        id: stateMap6.newsMeta[ix]["id"],
        catid: stateMap6.newsMeta[ix]["catid"],
        thumb: stateMap6.newsMeta[ix]["thumb"],
        thumbar: stateMap6.newsMeta[ix]["thumbar"]
      };
    }
  };
  var updatePrevNextLinksAddedWithTinyMCE2 = function() {
    if (jQuery("body").attr("data-type") == "lay_news") {
      jQuery('a[href="#laynextproject"], a.laynextproject').each(function() {
        var obj2 = getNewsLinkObj("next");
        if (typeof obj2 != "undefined") {
          jQuery(this).attr({
            "data-type": "news",
            "href": obj2.url,
            "data-catid": utility_controller.stringifyCatIds(obj2.catid),
            "data-id": obj2.id,
            "data-title": obj2.title
          });
        }
      });
      jQuery('a[href="#layprevproject"], a.layprevproject').each(function() {
        var obj2 = getNewsLinkObj("prev");
        if (typeof obj2 != "undefined") {
          jQuery(this).attr({
            "data-type": "news",
            "href": obj2.url,
            "data-catid": utility_controller.stringifyCatIds(obj2.catid),
            "data-id": obj2.id,
            "data-title": obj2.title
          });
        }
      });
    }
  };

  // lay/frontend/assets/src/js/app/frontend/scrolltotop/scrolltotop_controller.js
  var scrolltotop_controller = {
    initModule: function() {
      jqueryMap4.$htmlbody = jQuery("html, body");
      window.laytheme.on("newpageshown", bindScrollToTopClick);
    }
  };
  var scrolltotop_controller_default = scrolltotop_controller;
  var jqueryMap4 = {
    $htmlbody: null
  };
  var bindScrollToTopClick = function() {
    jQuery(".scrolltotop").on("click", function(e) {
      e.preventDefault();
      e.stopPropagation();
      if (jQuery("html").hasClass("fp-enabled")) {
        jQuery.fn.fullpage.moveTo(1, 0);
      } else {
        jqueryMap4.$htmlbody.animate({ scrollTop: 0 }, 600, "easeOutQuint", function() {
          jqueryMap4.$htmlbody.off("scroll wheel DOMMouseScroll mousewheel touchmove");
        });
        jqueryMap4.$htmlbody.on("scroll wheel DOMMouseScroll mousewheel touchmove", function() {
          jqueryMap4.$htmlbody.stop();
        });
      }
    });
  };

  // lay/frontend/assets/src/js/app/frontend/showhide_onscroll/showhide_onscroll_nav.js
  var navshow_hide_safety_offset = 20;
  var navshowhide_instances = [];
  var NavShowHide = function(identifier) {
    this.identifier = identifier;
    this.$nav_el = jQuery("nav." + identifier);
    this.suffix = identifier == "primary" ? "" : "_" + identifier;
    this.nav_hide = frontendPassedData.nav_customizer_properties["nav_hide" + this.suffix];
    this.nav_hidewhenscrollingdown = frontendPassedData.nav_customizer_properties["nav_hidewhenscrollingdown" + this.suffix];
    this.nav_fadeout_whenscrollingdown = frontendPassedData.nav_customizer_properties["nav_fadeout_whenscrollingdown" + this.suffix];
    this.max_translate_bottom = -1;
    this.max_translate_top = -1;
    this.nav_hidewhenscrolling_show_on_mouseover = frontendPassedData.nav_customizer_properties["nav_hidewhenscrolling_show_on_mouseover" + this.suffix];
    this.nav_position = frontendPassedData.nav_customizer_properties["nav_position" + this.suffix];
    this.rect = null;
    this.height_and_space_around = null;
    this.set_height_and_space_around();
  };
  NavShowHide.prototype.setRect = function() {
    this.rect = this.$nav_el[0].getBoundingClientRect();
  };
  NavShowHide.prototype.set_height_and_space_around = function() {
    this.setRect();
    this.height_and_space_around = this.$nav_el.outerHeight();
    if (this.nav_position.indexOf("top") != -1) {
      this.height_and_space_around += this.rect.top;
    } else {
      this.height_and_space_around += window.innerHeight - this.rect.bottom;
    }
    this.height_and_space_around += navshow_hide_safety_offset;
  };
  NavShowHide.prototype.show_on_mouseover = function(position) {
    if (!this.nav_hidewhenscrolling_show_on_mouseover) {
      return;
    }
    if (this.nav_position.indexOf(position) != -1) {
      this.show();
    }
  };
  NavShowHide.prototype.show = function() {
    if (this.nav_hidewhenscrollingdown && !this.nav_hide) {
      if (window.lay_lightbox_opened == false || typeof window.lay_lightbox_opened == "undefined") {
        if (this.$nav_el.hasClass("hidden")) {
          this.$nav_el.removeClass("hidden").css({ "transform": "", "opacity": "", "pointer-events": "" });
        }
      }
    }
    if (this.nav_fadeout_whenscrollingdown && !this.nav_hide) {
      if (window.lay_lightbox_opened == false || typeof window.lay_lightbox_opened == "undefined") {
        if (this.$nav_el.hasClass("hidden")) {
          this.$nav_el.removeClass("hidden").css({ "transform": "", "opacity": "", "pointer-events": "" });
        }
      }
    }
  };
  NavShowHide.prototype.hide = function() {
    if ((this.nav_fadeout_whenscrollingdown || this.nav_hidewhenscrollingdown) && Utility.isDesktopOrTabletSize && !this.nav_hide) {
      if (this.nav_fadeout_whenscrollingdown) {
        if (!this.$nav_el.hasClass("hidden")) {
          this.$nav_el.css({ opacity: 0, "pointer-events": "none" });
        }
      }
      this.setRect();
      if (this.nav_hidewhenscrollingdown) {
        if (!this.$nav_el.hasClass("hidden")) {
          var x = 0;
          if (this.nav_position.indexOf("center") != -1) {
            x = "-50%";
          }
          if (this.nav_position.indexOf("top") != -1) {
            var h = this.rect.bottom + navshow_hide_safety_offset;
            if (h > this.max_translate_top) {
              this.max_translate_top = h;
            } else {
              h = this.max_translate_top;
            }
            this.$nav_el.css("transform", "translate(" + x + ",-" + h + "px)");
          } else {
            var h = window.innerHeight - this.rect.top + navshow_hide_safety_offset;
            if (h > this.max_translate_bottom) {
              this.max_translate_bottom = h;
            } else {
              h = this.max_translate_bottom;
            }
            this.$nav_el.css("transform", "translate(" + x + "," + h + "px)");
          }
        }
      }
      this.$nav_el.addClass("hidden");
    }
  };
  var init = function() {
    switch (parseInt(frontendPassedData.nav_amount, 10)) {
      case 1:
        var nav_showhide = new NavShowHide("primary");
        navshowhide_instances = [nav_showhide];
        break;
      case 2:
        var nav_showhide = new NavShowHide("primary");
        var nav_showhide_second_menu = new NavShowHide("second_menu");
        navshowhide_instances = [nav_showhide, nav_showhide_second_menu];
        break;
      case 3:
        var nav_showhide = new NavShowHide("primary");
        var nav_showhide_second_menu = new NavShowHide("second_menu");
        var nav_showhide_third_menu = new NavShowHide("third_menu");
        navshowhide_instances = [nav_showhide, nav_showhide_second_menu, nav_showhide_third_menu];
        break;
      case 4:
        var nav_showhide = new NavShowHide("primary");
        var nav_showhide_second_menu = new NavShowHide("second_menu");
        var nav_showhide_third_menu = new NavShowHide("third_menu");
        var nav_showhide_fourth_menu = new NavShowHide("fourth_menu");
        navshowhide_instances = [nav_showhide, nav_showhide_second_menu, nav_showhide_third_menu, nav_showhide_fourth_menu];
        break;
    }
  };
  jQuery(document).ready(function() {
    init();
  });
  var get_navshowhide_instances = function() {
    return navshowhide_instances;
  };
  var showhide_onscroll_nav_default = get_navshowhide_instances;

  // lay/frontend/assets/src/js/app/frontend/showhide_onscroll/showhide_onscroll_controller.js
  var eventsChannel4 = Backbone.Radio.channel("events");
  var documentHeight = jQuery(document).outerHeight();
  var showhide_onscroll_controller = {
    initModule: function() {
      initModule7();
    },
    showAll: function() {
      showAll();
    },
    hideAll: function() {
      hideAll();
    },
    setJqueryMap: function() {
      setJqueryMap();
    },
    hideSt: function() {
      hideSt();
    },
    hideNav: function() {
      hideAllNavs();
    },
    hideNavBar: function() {
      hideNavbar();
    },
    showSt: function() {
      showSt();
    },
    getStPos: function() {
      return getStPos();
    }
  };
  var showhide_onscroll_controller_default = showhide_onscroll_controller;
  var configMap = {
    safetyOffset: 20,
    scrollThreshold: 50
  };
  var stateMap7 = {
    oldScrollY: 0,
    stheight: 0,
    st_pos: "top",
    st_hidewhenscrollingdown: false,
    st_fadeout_whenscrollingdown: false,
    st_exists: true,
    navbar_exists: true,
    navbar_hidewhenscrollingdown: false,
    navbar_fadeout_whenscrollingdown: false,
    mouseover_target_area_bottom: 0,
    mouseover_target_area_top: 0
  };
  var jqueryMap5 = {
    $navbar: null,
    $st: null
  };
  var getStPos = function() {
    return stateMap7.st_pos;
  };
  var showSt = function() {
    if ((stateMap7.st_hidewhenscrollingdown || stateMap7.st_fadeout_whenscrollingdown) && stateMap7.st_exists) {
      if (window.lay_lightbox_opened == false || typeof window.lay_lightbox_opened == "undefined") {
        if (jqueryMap5.$st.hasClass("hidden")) {
          jqueryMap5.$st.removeClass("hidden").css({ transform: "", "pointer-events": "", opacity: "" });
        }
      }
    }
  };
  var hideSt = function() {
    if ((stateMap7.st_hidewhenscrollingdown || stateMap7.st_fadeout_whenscrollingdown) && Utility.isDesktopOrTabletSize && stateMap7.st_exists) {
      if (!jqueryMap5.$st.hasClass("hidden")) {
        if (stateMap7.st_hidewhenscrollingdown) {
          var rect = jqueryMap5.$st[0].getBoundingClientRect();
          var x = 0;
          if (frontendPassedData.st_position.indexOf("center") != -1) {
            x = "-50%";
          }
          if (stateMap7.st_pos == "top") {
            var h = rect.bottom + configMap.safetyOffset;
            jqueryMap5.$st.css("transform", "translate(" + x + ",-" + h + "px)");
          } else if (stateMap7.st_pos == "bottom") {
            var h = window.innerHeight - rect.top + configMap.safetyOffset;
            jqueryMap5.$st.css("transform", "translate(" + x + "," + h + "px)");
          }
        }
        if (stateMap7.st_fadeout_whenscrollingdown) {
          jqueryMap5.$st.css({ opacity: 0, "pointer-events": "none" });
        }
        jqueryMap5.$st.addClass("hidden");
      }
    }
  };
  var bindScroll3 = function() {
    eventsChannel4.on("scroll", function() {
      var scrollY = window.pageYOffset || document.documentElement.scrollTop;
      if (scrollY > 0 && scrollY < documentHeight - window.innerHeight && Utility.isDesktopOrTabletSize) {
        if (scrollY > stateMap7.oldScrollY && scrollY > configMap.scrollThreshold) {
          stateMap7.startedScrollingUpY = scrollY;
          hideAllNavs();
          hideSt();
          hideNavbar();
        }
        if (scrollY < stateMap7.oldScrollY && scrollY < stateMap7.startedScrollingUpY - configMap.scrollThreshold / 2) {
          showAllNavs();
          showSt();
          showNavbar();
        }
        if (scrollY < configMap.scrollThreshold) {
          showAllNavs();
          showSt();
          showNavbar();
        }
        stateMap7.oldScrollY = scrollY;
      }
    });
    jQuery(window).on("fpOnLeave", function(event2, obj2) {
      switch (obj2.direction) {
        case "up":
          showAllNavs();
          showSt();
          showNavbar();
          break;
        case "down":
          hideAllNavs();
          hideSt();
          hideNavbar();
          break;
      }
    });
  };
  var hideAllNavs = function() {
    var navshowhide_instances2 = showhide_onscroll_nav_default();
    for (var i = 0; i < navshowhide_instances2.length; i++) {
      navshowhide_instances2[i].hide();
    }
  };
  var showAllNavs = function() {
    var navshowhide_instances2 = showhide_onscroll_nav_default();
    for (var i = 0; i < navshowhide_instances2.length; i++) {
      navshowhide_instances2[i].show();
    }
  };
  var setJqueryMap = function() {
    if (stateMap7.navbar_exists) {
      jqueryMap5.$navbar = jQuery(".navbar");
    }
    if (stateMap7.st_exists) {
      jqueryMap5.$st = jQuery(".sitetitle");
    }
  };
  var hideNavbar = function() {
    if (stateMap7.navbar_exists && (stateMap7.navbar_hidewhenscrollingdown || stateMap7.navbar_fadeout_whenscrollingdown) && Utility.isDesktopOrTabletSize) {
      if (!jqueryMap5.$navbar.hasClass("hidden")) {
        if (stateMap7.navbar_hidewhenscrollingdown) {
          var rect = jqueryMap5.$navbar[0].getBoundingClientRect();
          if (frontendPassedData.navbar_position == "top") {
            var h = rect.height + configMap.safetyOffset;
            jqueryMap5.$navbar.css("transform", "translateY(" + -h + "px)");
          } else if (frontendPassedData.navbar_position == "bottom") {
            var h = rect.height + configMap.safetyOffset;
            jqueryMap5.$navbar.css("transform", "translateY(" + h + "px)");
          }
        }
        if (stateMap7.navbar_fadeout_whenscrollingdown) {
          jqueryMap5.$navbar.css({ opacity: 0, "pointer-events": "none" });
        }
        jqueryMap5.$navbar.addClass("hidden");
      }
    }
  };
  var showNavbar = function() {
    if (stateMap7.navbar_exists && (stateMap7.navbar_hidewhenscrollingdown || stateMap7.navbar_fadeout_whenscrollingdown)) {
      if (window.lay_lightbox_opened == false || typeof window.lay_lightbox_opened == "undefined") {
        jqueryMap5.$navbar.removeClass("hidden").css({ transform: "", "pointer-events": "", opacity: "1" });
      }
    }
  };
  var setStHeight = function() {
    stateMap7.stheight = 0;
    if (stateMap7.st_exists && (stateMap7.st_hidewhenscrollingdown || stateMap7.st_fadeout_whenscrollingdown)) {
      var h = jqueryMap5.$st.outerHeight();
      if (stateMap7.st_pos == "top" || stateMap7.st_pos == "center") {
        h += jqueryMap5.$st[0].getBoundingClientRect().top;
      } else if (stateMap7.st_pos == "bottom") {
        h += window.innerHeight - jqueryMap5.$st[0].getBoundingClientRect().bottom;
      }
      h += configMap.safetyOffset;
      stateMap7.stheight = h;
    }
  };
  var bindWindowResize = function() {
    jQuery(window).on(
      "window_width_changed",
      _.debounce(function() {
        documentHeight = jQuery(document).outerHeight();
        setStHeight();
        var navshowhide_instances2 = showhide_onscroll_nav_default();
        for (var i = 0; i < navshowhide_instances2.length; i++) {
          navshowhide_instances2[i].set_height_and_space_around();
        }
      }, 300)
    );
  };
  var bindMouseMove = function() {
    jQuery(window).on(
      "mousemove",
      _.throttle(function(e) {
        if (Utility.isDesktopOrTabletSize) {
          var navshowhide_instances2 = showhide_onscroll_nav_default();
          if (e.clientY <= stateMap7.mouseover_target_area_top) {
            for (var i = 0; i < navshowhide_instances2.length; i++) {
              navshowhide_instances2[i].show_on_mouseover("top");
            }
            if (stateMap7.st_pos == "top") {
              showSt();
            }
            if (frontendPassedData.navbar_position == "top") {
              showNavbar();
            }
          }
          if (e.clientY >= window.innerHeight - stateMap7.mouseover_target_area_bottom) {
            for (var i = 0; i < navshowhide_instances2.length; i++) {
              navshowhide_instances2[i].show_on_mouseover("bottom");
            }
            if (stateMap7.st_pos == "bottom") {
              showSt();
            }
            if (frontendPassedData.navbar_position == "bottom") {
              showNavbar();
            }
          }
        }
      }, 100)
    );
  };
  var setMouseoverTopMaxArea = function() {
    var maxH = 0;
    if (stateMap7.st_pos == "top") {
      maxH = stateMap7.stheight;
    }
    var navshowhide_instances2 = showhide_onscroll_nav_default();
    for (var i = 0; i < navshowhide_instances2.length; i++) {
      if (navshowhide_instances2[i].nav_position.indexOf("top") != -1) {
        var space = navshowhide_instances2[i].height_and_space_around;
        if (space > maxH) {
          maxH = space;
        }
      }
    }
    if (frontendPassedData.navbar_position == "top" && stateMap7.navbar_exists) {
      var navbar_h = jqueryMap5.$navbar.height();
      maxH = maxH < navbar_h ? navbar_h : maxH;
    }
    stateMap7.mouseover_target_area_top = maxH;
  };
  var setMouseoverBottomMaxArea = function() {
    var maxH = 0;
    if (stateMap7.st_pos == "bottom") {
      maxH = stateMap7.stheight;
    }
    var navshowhide_instances2 = showhide_onscroll_nav_default();
    for (var i = 0; i < navshowhide_instances2.length; i++) {
      if (navshowhide_instances2[i].nav_position.indexOf("bottom") != -1) {
        var space = navshowhide_instances2[i].height_and_space_around;
        if (space > maxH) {
          maxH = space;
        }
      }
    }
    if (frontendPassedData.navbar_position == "bottom" && stateMap7.navbar_exists) {
      var navbar_h = jqueryMap5.$navbar.height();
      maxH = maxH < navbar_h ? navbar_h : maxH;
    }
    stateMap7.mouseover_target_area_bottom = maxH;
  };
  var initModule7 = function() {
    if (frontendPassedData.st_position.indexOf("top") != -1) {
      stateMap7.st_pos = "top";
    } else if (frontendPassedData.st_position.indexOf("bottom") != -1) {
      stateMap7.st_pos = "bottom";
    } else {
      stateMap7.st_pos = "center";
    }
    if (frontendPassedData.st_hidewhenscrollingdown == 1) {
      stateMap7.st_hidewhenscrollingdown = true;
    } else {
      stateMap7.st_hidewhenscrollingdown = false;
    }
    if (frontendPassedData.st_fadeout_whenscrollingdown == 1) {
      stateMap7.st_fadeout_whenscrollingdown = true;
    } else {
      stateMap7.st_fadeout_whenscrollingdown = false;
    }
    if (frontendPassedData.st_hide == 1) {
      stateMap7.st_exists = false;
    } else {
      stateMap7.st_exists = true;
    }
    if (frontendPassedData.navbar_hide == 1) {
      stateMap7.navbar_exists = false;
    } else {
      stateMap7.navbar_exists = true;
    }
    if (frontendPassedData.navbar_fadeout_whenscrollingdown == 1) {
      stateMap7.navbar_fadeout_whenscrollingdown = true;
    } else {
      stateMap7.navbar_fadeout_whenscrollingdown = false;
    }
    if (frontendPassedData.navbar_hidewhenscrollingdown == 1) {
      stateMap7.navbar_hidewhenscrollingdown = true;
    } else {
      stateMap7.navbar_hidewhenscrollingdown = false;
    }
    setJqueryMap();
    setStHeight();
    bindScroll3();
    bindWindowResize();
    bindMouseMove();
    setMouseoverTopMaxArea();
    setMouseoverBottomMaxArea();
    if (jQuery(".sitetitle").hasClass("img")) {
      var img = jQuery(".sitetitle img")[0];
      if (img.complete) {
        setStHeight();
      } else {
        img.onload = function() {
          setStHeight();
        };
      }
    }
    window.laytheme.on("newpageshown", function() {
      showAll();
    });
  };
  var hideAll = function() {
    hideAllNavs();
    hideSt();
    if (typeof hideNavBar == "function") {
      hideNavBar();
    }
  };
  var showAll = function() {
    showAllNavs();
    showSt();
    showNavbar();
  };

  // lay/frontend/assets/src/js/app/frontend/maxwidth/maxwidth_controller.js
  var maxwidth_controller = {
    initModule: function() {
      initModule8();
    }
  };
  var maxwidth_controller_default = maxwidth_controller;
  var maxwidth = 0;
  var jqueryMap6 = {
    $body: null,
    $nav: null,
    $st: null
  };
  var setJqueryMap2 = function() {
    jqueryMap6.$body = jQuery("body");
    jqueryMap6.$nav = jQuery("nav.primary");
    jqueryMap6.$nav2 = jQuery("nav.second_menu");
    jqueryMap6.$nav3 = jQuery("nav.third_menu");
    jqueryMap6.$nav4 = jQuery("nav.fourth_menu");
    jqueryMap6.$st = jQuery(".sitetitle");
  };
  var init2 = function() {
    maxwidth = parseInt(frontendPassedData.maxwidth, 10);
    setJqueryMap2();
    bindResize5();
    positionNavAndSt();
  };
  var bindResize5 = function() {
    jQuery(window).on("window_width_changed", positionNavAndSt);
  };
  var positionNavAndSt = function() {
    var bodyWidth = jqueryMap6.$body.innerWidth();
    var nav_props = frontendPassedData.nav_customizer_properties;
    var frame_left = parseFloat(frontendPassedData.frame_left);
    var frame_right = parseFloat(frontendPassedData.frame_right);
    if (frontendPassedData.frame_leftright_mu == "%") {
      frame_left = maxwidth / 100 * frame_left;
      frame_right = maxwidth / 100 * frame_right;
    }
    if (bodyWidth > maxwidth && Utility.isDesktopOrTabletSize) {
      var leftSpace = (bodyWidth - maxwidth) / 2 + frame_left;
      var rightSpace = (bodyWidth - maxwidth) / 2 + frame_right;
      if (frontendPassedData.st_position.indexOf("left") != -1) {
        jqueryMap6.$st.css("left", leftSpace + "px");
      } else if (frontendPassedData.st_position.indexOf("right") != -1) {
        jqueryMap6.$st.css("right", rightSpace + "px");
      }
      if (nav_props.nav_position.indexOf("left") != -1) {
        jqueryMap6.$nav.css("left", leftSpace + "px");
      } else if (nav_props.nav_position.indexOf("right") != -1) {
        jqueryMap6.$nav.css("right", rightSpace + "px");
      }
      if (frontendPassedData.nav_amount >= 2) {
        if (nav_props.nav_position_second_menu.indexOf("left") != -1) {
          jqueryMap6.$nav2.css("left", leftSpace + "px");
        } else if (nav_props.nav_position_second_menu.indexOf("right") != -1) {
          jqueryMap6.$nav2.css("right", rightSpace + "px");
        }
      }
      if (frontendPassedData.nav_amount >= 3) {
        if (nav_props.nav_position_third_menu.indexOf("left") != -1) {
          jqueryMap6.$nav3.css("left", leftSpace + "px");
        } else if (nav_props.nav_position_third_menu.indexOf("right") != -1) {
          jqueryMap6.$nav3.css("right", rightSpace + "px");
        }
      }
      if (frontendPassedData.nav_amount >= 4) {
        if (nav_props.nav_position_fourth_menu.indexOf("left") != -1) {
          jqueryMap6.$nav4.css("left", leftSpace + "px");
        } else if (nav_props.nav_position_fourth_menu.indexOf("right") != -1) {
          jqueryMap6.$nav4.css("right", rightSpace + "px");
        }
      }
    } else {
      if (frontendPassedData.st_position.indexOf("left") != -1) {
        jqueryMap6.$st.css("left", "");
      } else if (frontendPassedData.st_position.indexOf("right") != -1) {
        jqueryMap6.$st.css("right", "");
      }
      if (nav_props.nav_position.indexOf("left") != -1) {
        jqueryMap6.$nav.css("left", "");
      } else if (nav_props.nav_position.indexOf("right") != -1) {
        jqueryMap6.$nav.css("right", "");
      }
      if (frontendPassedData.nav_amount >= 2) {
        if (nav_props.nav_position_second_menu.indexOf("left") != -1) {
          jqueryMap6.$nav2.css("left", "");
        } else if (nav_props.nav_position_second_menu.indexOf("right") != -1) {
          jqueryMap6.$nav2.css("right", "");
        }
      }
      if (frontendPassedData.nav_amount >= 3) {
        if (nav_props.nav_position_third_menu.indexOf("left") != -1) {
          jqueryMap6.$nav3.css("left", "");
        } else if (nav_props.nav_position_third_menu.indexOf("right") != -1) {
          jqueryMap6.$nav3.css("right", "");
        }
      }
      if (frontendPassedData.nav_amount >= 4) {
        if (nav_props.nav_position_fourth_menu.indexOf("left") != -1) {
          jqueryMap6.$nav4.css("left", "");
        } else if (nav_props.nav_position_fourth_menu.indexOf("right") != -1) {
          jqueryMap6.$nav4.css("right", "");
        }
      }
    }
  };
  var initModule8 = function() {
    if (frontendPassedData.misc_options_max_width_apply_to_logo_and_nav == "on" && frontendPassedData.maxwidth != 0) {
      init2();
    }
  };

  // lay/frontend/assets/src/js/app/frontend/mobile/mobile_menu_controller.js
  var eventsChannel5 = Backbone.Radio.channel("events");
  var mobile_menu_controller = {
    initModule: function() {
      if (frontendPassedData.mobile_menu_style != "style_desktop_menu") {
        initModule9();
      }
    },
    hideMenu: function() {
      if (frontendPassedData.mobile_menu_style != "style_desktop_menu") {
        hideMenu();
      }
    },
    hideMobileMenu: function() {
      if (frontendPassedData.mobile_menu_style != "style_desktop_menu") {
        hideMobileMenu();
      }
    }
  };
  var mobile_menu_controller_default = mobile_menu_controller;
  var stateMap8 = {
    wWidth: window.innerWidth,
    oldInnerWidth: window.innerWidth,
    isOpen: false
  };
  var jqueryMap7 = {
    $nav: null,
    $navul: null,
    $burger: null
  };
  var bindIconClicks = function() {
    switch (frontendPassedData.mobile_burger_type) {
      case "default":
      case "default_thin":
        jQuery(".burger-wrap-default").on("click", doBurgerToggle);
        break;
      case "new":
        jQuery(".burger-wrap-new").on("click", doBurgerToggle);
        break;
      case "custom":
        jQuery(".burger-custom-wrap-close").on("click", function() {
          if (jqueryMap7.$nav.hasClass("active")) {
            hideMenu();
          }
        });
        jQuery(".burger-custom-wrap-open").on("click", function() {
          if (!jqueryMap7.$nav.hasClass("active")) {
            showMenu();
          }
        });
        break;
    }
  };
  var showMenu = function() {
    jqueryMap7.$nav.addClass("active");
    jQuery("body").addClass("mobile-menu-open");
    stateMap8.isOpen = true;
    switch (frontendPassedData.mobile_menu_style) {
      case "style_1":
        var navbarBottom = 0;
        if (frontendPassedData.mobile_hide_menubar != "1") {
          navbarBottom = jQuery(".navbar")[0].getBoundingClientRect().bottom;
        }
        jQuery("body").addClass("animate-mobile-menu");
        jqueryMap7.$nav.on("transitionend", function() {
          jQuery("body").removeClass("animate-mobile-menu");
        });
        jqueryMap7.$nav.css({
          transform: "translateY(" + navbarBottom + "px)",
          "-webkit-transform": "translateY(" + navbarBottom + "px)",
          top: 0
        });
        break;
      case "style_2":
        break;
      case "style_3":
        var navbarH = 0;
        if (frontendPassedData.mobile_hide_menubar != "1") {
          navbarH = jQuery(".navbar").height();
        }
        var top = navbarH;
        if (frontendPassedData.woocommerce_active && jQuery(".woocommerce-store-notice").length > 0 && jQuery(".woocommerce-store-notice").is(":visible")) {
          top += jQuery(".woocommerce-store-notice").outerHeight();
        }
        jqueryMap7.$nav.css({
          height: window.innerHeight - navbarH + "px",
          top: top + "px"
        });
        break;
    }
  };
  var doBurgerToggle = function() {
    if (!jqueryMap7.$nav.hasClass("active")) {
      switch (frontendPassedData.mobile_burger_type) {
        case "new":
        case "default":
        case "default_thin":
          if (frontendPassedData.mobile_menu_style != "style_2") {
            jqueryMap7.$burger.addClass("active");
          }
          break;
      }
      showMenu();
    } else {
      hideMenu();
    }
  };
  var bindWindowResize2 = function() {
    jQuery(window).on("resize orientationchange", function() {
      stateMap8.oldInnerWidth = stateMap8.wWidth;
      stateMap8.wWidth = window.innerWidth;
      if (Utility.isDesktopOrTabletSize) {
        if (stateMap8.oldInnerWidth <= Utility.breakpoint) {
          resetMobileMenuMaxHeight();
          jqueryMap7.$nav.css({
            transform: "",
            "-webkit-transform": ""
          });
          jqueryMap7.$nav.removeClass("active transition");
          if (frontendPassedData.mobile_menu_style != "style_2") {
            jqueryMap7.$burger.removeClass("active");
          }
          jQuery("body").removeClass("mobile-menu-open");
        }
      } else {
        if (stateMap8.oldInnerWidth > Utility.breakpoint) {
          if (!jqueryMap7.$nav.hasClass("active")) {
            hideMenu();
          }
          showhide_onscroll_controller_default.showAll();
        }
        setMobileMenuMaxHeight();
      }
    });
  };
  var setMobileMenuMaxHeight = function() {
    if (!Utility.isDesktopOrTabletSize) {
      switch (frontendPassedData.mobile_menu_style) {
        case "style_1":
          var navbarH = jQuery(".navbar").outerHeight();
          var h = window.innerHeight - navbarH;
          jqueryMap7.$nav.css("max-height", h + "px");
          break;
        case "style_2":
          var h = window.innerHeight;
          jqueryMap7.$nav.css("max-height", h + "px");
          break;
      }
    }
  };
  var resetMobileMenuMaxHeight = function() {
    if (Utility.isDesktopOrTabletSize) {
      jqueryMap7.$nav.css("max-height", "");
    }
  };
  var hideMenu = function() {
    stateMap8.isOpen = false;
    if (Utility.isPhoneSize) {
      hideMobileMenu();
    } else {
      if (frontendPassedData.mobile_menu_style != "style_2") {
        jqueryMap7.$burger.removeClass("active");
      }
      jQuery("body").removeClass("mobile-menu-open");
      jqueryMap7.$nav.removeClass("active").css({
        transform: "",
        "-webkit-transform": ""
      });
    }
  };
  var hideMobileMenu = function() {
    if (Utility.isPhoneSize) {
      stateMap8.isOpen = false;
      jqueryMap7.$nav.removeClass("active");
      jQuery("body").removeClass("mobile-menu-open");
      if (frontendPassedData.mobile_menu_style != "style_2") {
        jqueryMap7.$burger.removeClass("active");
      }
      switch (frontendPassedData.mobile_menu_style) {
        case "style_1":
          var top = jqueryMap7.$navul.outerHeight();
          top *= -1;
          var navh = jQuery(".navbar").outerHeight();
          top -= navh;
          jQuery("body").addClass("animate-mobile-menu");
          jqueryMap7.$nav.on("transitionend", function() {
            jQuery("body").removeClass("animate-mobile-menu");
          });
          jqueryMap7.$nav.css({
            transform: "translateY(" + top + "px)",
            "-webkit-transform": "translateY(" + top + "px)"
          });
          break;
        case "style_2":
          break;
        case "style_3":
          jqueryMap7.$nav.css({
            height: ""
          });
          break;
      }
    }
  };
  var setjQueryMap = function() {
    jqueryMap7.$nav = jQuery("nav.mobile-nav");
    jqueryMap7.$navul = jqueryMap7.$nav.find("ul");
    jqueryMap7.$burger = jQuery(".burger-default, .burger-new");
  };
  var preventAnchorDrag = function() {
    jQuery("nav.mobile-nav a").on("dragstart", function(ev) {
      ev.preventDefault();
    });
  };
  var $notice;
  var $mobilenav;
  var $navbar;
  var bindScroll4 = function() {
    if (frontendPassedData.mobile_navbar_fixed == "") {
      return;
    }
    $notice = jQuery(".woocommerce-store-notice");
    $mobilenav = jQuery(".mobile-nav");
    $navbar = jQuery(".navbar");
    switch (frontendPassedData.mobile_menu_style) {
      case "style_1":
        if ($notice.length > 0 && $mobilenav.length > 0 && $navbar.length > 0) {
          eventsChannel5.on("scroll", function() {
            if (stateMap8.isOpen) {
              var navbarRect = $navbar[0].getBoundingClientRect();
              var diff = navbarRect.bottom;
              $mobilenav.css("transform", "translateY(" + diff + "px)");
            }
          });
        }
        break;
      case "style_2":
        break;
      case "style_3":
        if ($notice.length > 0 && $mobilenav.length > 0) {
          eventsChannel5.on("scroll", function() {
            var rect = $notice[0].getBoundingClientRect();
            var diff = window.scrollY;
            if (diff >= rect.height) {
              diff = rect.height;
            }
            $mobilenav.css("transform", "translateY(-" + diff + "px)");
          });
        }
        break;
    }
  };
  var initModule9 = function() {
    preventAnchorDrag();
    setjQueryMap();
    bindScroll4();
    bindWindowResize2();
    bindIconClicks();
    setMobileMenuMaxHeight();
    WebFont.load({
      custom: {
        families: frontendPassedData.m_st_fontfamily
      },
      active: function() {
        hideMobileMenu();
      },
      classes: false
    });
    hideMobileMenu();
    setTimeout(function() {
      jQuery("body").addClass("mobile-menu-animation-possible");
    }, 0);
    jQuery(document).ready(function() {
      setTimeout(function() {
        window.laytheme.on("newpage", hideMobileMenu);
      }, 100);
    });
    window.laytheme.on("searchshown", hideMobileMenu);
  };

  // lay/frontend/assets/src/js/app/frontend/shortcodes/shortcodes_controller.js
  var shortcodes_controller = {
    maybeReload: function(stateObj) {
      return maybeReload(stateObj);
    }
  };
  var shortcodes_controller_default = shortcodes_controller;
  var maybeReload = function(stateObj) {
    var state = stateObj;
    if (state == null) {
      return false;
    }
    var id2 = state.id;
    var type2 = state.type;
    var footerIdToCheck = false;
    switch (type2) {
      case "project":
        var footer_active_in_projects = frontendPassedData.footer_active_in_projects;
        if (footer_active_in_projects == "all") {
          footerIdToCheck = frontendPassedData.projectsFooterId;
        } else if (footer_active_in_projects == "individual") {
          if (frontendPassedData.individual_project_footers != "") {
            var obj2 = JSON.parse(frontendPassedData.individual_project_footers);
            if (_.isObject(obj2) && typeof obj2[id2] != "undefined") {
              footerIdToCheck = obj2[id2];
            }
          }
        }
        break;
      case "page":
        var footer_active_in_pages = frontendPassedData.footer_active_in_pages;
        if (footer_active_in_pages == "all") {
          footerIdToCheck = frontendPassedData.pagesFooterId;
        } else if (footer_active_in_pages == "individual") {
          if (frontendPassedData.individual_page_footers != "") {
            var obj2 = JSON.parse(frontendPassedData.individual_page_footers);
            if (_.isObject(obj2) && typeof obj2[id2] != "undefined") {
              footerIdToCheck = obj2[id2];
            }
          }
        }
        break;
      case "category":
        var footer_active_in_categories = frontendPassedData.footer_active_in_categories;
        if (footer_active_in_categories == "all") {
          footerIdToCheck = frontendPassedData.categoriesFooterId;
        } else if (footer_active_in_categories == "individual") {
          if (frontendPassedData.individual_category_footers != "") {
            var obj2 = JSON.parse(frontendPassedData.individual_category_footers);
            if (_.isObject(obj2) && typeof obj2[id2] != "undefined") {
              footerIdToCheck = obj2[id2];
            }
          }
        }
        break;
    }
    var shortcodes = frontendPassedData.shortcodes;
    if (jQuery.isArray(shortcodes) && footerIdToCheck != false) {
      for (var i = 0; i < shortcodes.length; i++) {
        var occurence = shortcodes[i];
        if (occurence["info"]["type"] == "post" && occurence["info"]["id"] == footerIdToCheck) {
          return true;
        }
      }
    }
    if (type2 == "project" || type2 == "page") {
      type2 = "post";
    }
    if (jQuery.isArray(shortcodes)) {
      for (var i = 0; i < shortcodes.length; i++) {
        if (shortcodes[i]["info"]["type"] == type2 && shortcodes[i]["info"]["id"] == id2) {
          return true;
        }
      }
    }
    return false;
  };

  // lay/frontend/assets/src/js/app/frontend/history/bind_anchors.js
  var bindAnchors = function() {
    jQuery(document).on("click", 'a[data-type]:not([target="_blank"])', function(event2) {
      if (jQuery(this.parentNode).hasClass("laycart") && frontendPassedData.sideCartPluginActive == true) {
        event2.preventDefault();
        event2.stopPropagation();
        return;
      }
      if (frontendPassedData.is_customize || window.navigator.userAgent.indexOf("Instagram") != -1) {
        return;
      }
      var $this = jQuery(this);
      var href = $this.attr("href");
      href = utility_controller.filterURL(href);
      if (jQuery("body").attr("data-type") == jQuery(this).attr("data-type") && jQuery("body").attr("data-id") == jQuery(this).attr("data-id")) {
        event2.preventDefault();
        mobile_menu_controller_default.hideMobileMenu();
      } else if (jQuery(this).attr("data-type") != "custom" && !event2.metaKey && !event2.ctrlKey) {
        event2.preventDefault();
        var title = passedDataHistory.title;
        var attr_title = $this.attr("data-title");
        if (typeof attr_title != "undefined" && attr_title != "") {
          title = passedDataHistory.titleprefix + _.unescape($this.attr("data-title"));
        }
        var catids = utility_controller.parseIdsString($this.attr("data-catid"));
        history_controller_new_default.pushState({ type: $this.attr("data-type"), id: $this.attr("data-id"), catid: catids }, title, href);
      }
    });
  };

  // lay/frontend/assets/src/js/app/frontend/history/transition_timer.js
  var stateMap9 = {
    animationTimer: null,
    animationInterval: null,
    animDur: 300
  };
  var startTimer = function() {
    stateMap9.animationTimer = 0;
    clearInterval(stateMap9.animationInterval);
    stateMap9.animationInterval = setInterval(function() {
      stateMap9.animationTimer += 50;
      if (stateMap9.animationTimer >= stateMap9.animDur) {
        window.laytheme.trigger("content_fadeout_transition_ended");
        clearInterval(stateMap9.animationInterval);
      }
    }, 50);
  };
  var getTimeToWait = function() {
    clearInterval(stateMap9.animationInterval);
    if (stateMap9.animationTimer >= stateMap9.animDur || elements_transition_ended) {
      return 0;
    } else {
      return stateMap9.animDur - stateMap9.animationTimer;
    }
  };
  var initModule10 = function() {
    stateMap9.animDur = parseInt(frontendPassedData.navigation_transition_duration, 10) / 2;
    window.laytheme.on("transition_navigation_in_started", function() {
      elements_transition_ended = false;
    });
    window.laytheme.on("transition_navigation_out_completed", function() {
      elements_transition_ended = true;
    });
  };
  var elements_transition_ended = false;
  var transition_timer_controller = {
    initModule: function() {
      initModule10();
    },
    startTimer: function() {
      startTimer();
    },
    hasElementTransitionEnded: function() {
      return elements_transition_ended;
    },
    getTimeToWait: function() {
      return getTimeToWait();
    }
  };

  // lay/frontend/assets/src/js/app/frontend/history/activate_menupoints.js
  var activateCurrentMenuPoint = function() {
    if (!frontendPassedData.woocommerce_active) {
      jQuery(".current-menu-parent").removeClass("current-menu-parent");
      jQuery(".current-menu-ancestor").removeClass("current-menu-ancestor");
      jQuery(".current-menu-item:not(.qtranxs-lang-menu-item)").removeClass("current-menu-item");
      jQuery(".current_page_item:not(.qtranxs-lang-menu-item)").removeClass("current_page_item");
    }
    var $anchor = jQuery('nav a[data-id="' + window.history.state.id + '"][data-type="' + window.history.state.type + '"]');
    if ($anchor.length != 0) {
      $anchor.each(function() {
        jQuery(this.parentNode).addClass("current-menu-item");
        jQuery(this.parentNode.parentNode).closest("li.menu-item").addClass("current-menu-parent");
      });
    }
    var catids = window.history.state.catid;
    if (!Array.isArray(catids)) {
      catids = [catids];
    }
    for (var i = 0; i < catids.length; i++) {
      var catid2 = catids[i];
      var $anchor = jQuery('nav a[data-catid="' + catid2 + '"][data-type="category"]');
      if ($anchor.length != 0) {
        $anchor.each(function() {
          jQuery(this.parentNode).addClass("current-menu-item");
          jQuery(this.parentNode.parentNode).closest("li.menu-item").addClass("current-menu-parent");
        });
      }
    }
  };

  // lay/frontend/assets/src/js/app/frontend/history/history_controller_new.js
  var currentScrollPos = 0;
  var lastScrollPos = 0;
  var lastFooterScrollPos = 0;
  var currentFpSlide = 0;
  var lastFpSlide = 0;
  var jqueryMap8 = {
    $body: null
  };
  var getState = function() {
    return window.history.state;
  };
  var initHistory = function() {
    console.log("init history");
    if ("scrollRestoration" in window.history) {
      window.history.scrollRestoration = "manual";
    }
    var url = window.location.href;
    var obj2 = {
      scrollpos: window.scrollY,
      fullscreenSliderPos: 0,
      type: jqueryMap8.$body.attr("data-type"),
      id: jqueryMap8.$body.attr("data-id"),
      catid: utility_controller.parseIdsString(jqueryMap8.$body.attr("data-catid"))
    };
    window.history.replaceState(obj2, jQuery("title").text(), url);
    activateCurrentMenuPoint();
    prevnext_controller_default.maybeHideProjectArrowsOnInit(window.history.state);
  };
  var pushState = function(stateObj, title, href) {
    if (isSameState(stateObj)) {
      return;
    }
    bindScrollToTop();
    window.history.pushState(stateObj, title, href);
    document.title = title;
    globalevents_controller_default.triggerPushState();
    handleStateChange(stateObj);
  };
  var isSameState = function(stateObj) {
    if (window.history.state == null) {
      return false;
    }
    if (window.history.state.id == stateObj.id && window.history.state.type == stateObj.type) {
      return true;
    }
    return false;
  };
  var bindPopState = function() {
    window.addEventListener("popstate", function(event2) {
      if (window.location.href.indexOf("#") != -1) {
      }
      if (event2.state === null && window.location.href.indexOf("#") != -1) {
        var obj2 = {
          scrollpos: window.scrollY,
          type: jqueryMap8.$body.attr("data-type"),
          id: jqueryMap8.$body.attr("data-id"),
          catid: utility_controller.parseIdsString(jqueryMap8.$body.attr("data-catid"))
        };
        var url = window.location.href;
        window.history.replaceState(obj2, jQuery("title").text(), url);
      } else {
        window.laytheme.trigger("popstate");
        if (event2.state.type == jQuery("body").attr("data-type") && event2.state.id == jQuery("body").attr("data-id")) {
        } else {
          bindScrollToLastPosition(event2.state);
          handleStateChange(event2.state);
        }
      }
    });
  };
  var setFooterScrollTop = function() {
    if (document.querySelector("#footer-region") != null) {
      lastFooterScrollPos = document.querySelector("#footer-region").scrollTop;
    }
  };
  var handleStateChange = function(stateObj) {
    transition_timer_controller.startTimer();
    lastScrollPos = currentScrollPos;
    currentScrollPos = window.scrollY;
    lastFpSlide = currentFpSlide;
    currentFpSlide = currentSlidePos;
    var doreload = shortcodes_controller_default.maybeReload(stateObj);
    if (frontendPassedData.misc_options_disable_ajax == "on") {
      doreload = true;
    }
    if (!doreload) {
      var hideRegions2 = false;
      if (parseInt(frontendPassedData.navigation_transition_out_duration, 10) != 0) {
        hideRegions2 = true;
      }
      if (frontendPassedData.navigation_transition_out == "none") {
        hideRegions2 = false;
      }
      if (hideRegions2) {
        layout_controller_default.hideRegions();
      } else {
        animations_controller_default.setTransitionStatus("ended");
        window.laytheme.trigger("transition_navigation_out_completed");
      }
      jQuery("body").attr({
        "data-type": stateObj.type,
        "data-id": stateObj.id,
        "data-catid": utility_controller.stringifyCatIds(stateObj.catid)
      });
      activateCurrentMenuPoint();
      layout_controller_default.showLayout("", setFooterScrollTop);
      window.laytheme.trigger("newpage");
    } else {
      window.location.reload(false);
    }
  };
  var bindScrollToLastPosition = function(state) {
    window.laytheme.off("newpageshown", scrollToTop);
    window.laytheme.on("newpageshown", scrollToLastPosition);
  };
  var scrollToLastPosition = function() {
    var do_scrollToLastPos = true;
    if (window.location.href.indexOf("#") != -1) {
      do_scrollToLastPos = false;
      if (window.location.href.indexOf("#category-") != -1) {
        do_scrollToLastPos = true;
      }
    }
    if (frontendPassedData.never_change_scrolling_position == "on" && Utility.screenSize != "phone") {
      do_scrollToLastPos = false;
    }
    if (do_scrollToLastPos) {
      if (typeof jQuery.fn.fullpage != "undefined" && typeof magneticSlidesPassedData != "undefined" && typeof jQuery.fn.fullpage.silentMoveTo == "function") {
        if (magneticSlidesPassedData.ms_direction == "horizontal") {
          jQuery.fn.fullpage.silentMoveTo(1, lastFpSlide);
        } else {
          jQuery.fn.fullpage.silentMoveTo(lastFpSlide, 0);
        }
      } else {
        var $parents = jQuery(parent_selectors.join(","));
        var masonryCols = getVisibleMasonryColumns($parents);
        if (masonryCols.length > 0) {
          jQuery.when(waitForMasonryInitialized(masonryCols)).then(function() {
            console.log("last scroll pos after masonry init");
            window.scrollTo(0, lastScrollPos);
          });
        } else {
          console.log("last scroll pos like that");
          window.scrollTo(0, lastScrollPos);
        }
      }
    }
    window.laytheme.off("newpageshown", bindScrollToLastPosition);
  };
  var bindScrollToTop = function() {
    window.laytheme.off("newpageshown", scrollToLastPosition);
    window.laytheme.on("newpageshown", scrollToTop);
  };
  var scrollToTop = function() {
    if (frontendPassedData.never_change_scrolling_position == "on" && Utility.screenSize != "phone") {
      if (document.querySelector("#footer-region") != null) {
        document.querySelector("#footer-region").scrollTo(0, lastFooterScrollPos);
      }
    } else {
      if (window.location.href.indexOf("#") == -1) {
        window.scrollTo(0, 0);
      }
    }
    window.laytheme.off("newpageshown", bindScrollToTop);
  };
  var currentSlidePos = 0;
  var bindFullscreenSlider = function() {
    if (typeof magneticSlidesPassedData != "undefined") {
      if (magneticSlidesPassedData.ms_direction == "horizontal") {
        jQuery(window).on("fpAfterSlideLoad", function(e, obj2) {
          currentSlidePos = obj2.slideIndex;
        });
      } else {
        jQuery(window).on("fpAfterLoad", function(e, obj2) {
          currentSlidePos = obj2.index;
        });
      }
    }
  };
  var parent_selectors;
  var bindOnContentReady2 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      parent_selectors = void 0;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          parent_selectors = ["#grid", ".cover-region-desktop", "#footer"];
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            parent_selectors = ["#custom-phone-grid", ".cover-region-phone", "#footer-custom-phone-grid"];
          } else if (!footerHasPhoneCPL && hasCPL) {
            parent_selectors = ["#custom-phone-grid", ".cover-region-phone", "#footer"];
          } else if (footerHasPhoneCPL && !hasCPL) {
            parent_selectors = ["#grid", ".cover-region-desktop", "#footer-custom-phone-grid"];
          } else if (!footerHasPhoneCPL && !hasCPL) {
            parent_selectors = ["#grid", ".cover-region-desktop", "#footer"];
          }
          break;
      }
    });
  };
  var initModule11 = function() {
    bindOnContentReady2();
    jqueryMap8.$body = jQuery("body");
    initHistory();
    bindAnchors();
    bindPopState();
    setTimeout(function() {
      bindFullscreenSlider();
    }, 0);
  };
  var history_controller = {
    initModule: initModule11,
    getState,
    pushState
  };
  var history_controller_new_default = history_controller;

  // lay/frontend/assets/src/js/app/frontend/mobile/mobile_projectthumbnails_controller.js
  var mobile_projectthumbnails_controller = {
    initModule: function() {
      if (Utility.isTouchDevice) {
        bind_pt_mouseover_behaviour();
      }
    }
  };
  var mobile_projectthumbnails_controller_default = mobile_projectthumbnails_controller;
  var bind_pt_mouseover_behaviour = function() {
    if (frontendPassedData.fi_mo_touchdevice_behaviour == "mo_on_tap") {
      jQuery(document).on("click", "a.thumb[data-type]", function(event2) {
        event2.stopPropagation();
        event2.preventDefault();
      });
      var touching = false;
      var touchTimeout;
      jQuery(document).on("touchstart", "a.thumb[data-type]", function(event2) {
        clearTimeout(touchTimeout);
        if (!jQuery(this).hasClass("hover")) {
          touching = true;
          touchTimeout = setTimeout(function() {
            touching = false;
          }, 100);
          event2.stopPropagation();
          event2.preventDefault();
          jQuery("a.thumb").removeClass("hover");
          jQuery(this).addClass("hover");
        }
      });
      jQuery(document).on("tap", "a.thumb[data-type]", function(event2) {
        event2.stopPropagation();
        event2.preventDefault();
        if (touching == false) {
          if (jQuery(this).hasClass("hover")) {
            navigateOnTap(jQuery(this));
          }
        }
      });
    }
  };
  var navigateOnTap = function($this) {
    if (frontendPassedData.is_customize) {
      return false;
    }
    var href = $this.attr("href");
    href = utility_controller.filterURL(href);
    if (jQuery("body").attr("data-type") == jQuery(this).attr("data-type") && jQuery("body").attr("data-id") == jQuery(this).attr("data-id")) {
      event.preventDefault();
      mobile_menu_controller_default.hideMobileMenu();
    } else if (jQuery(this).attr("data-type") != "custom" && !event.metaKey && !event.ctrlKey) {
      event.preventDefault();
      var title = passedDataHistory.title;
      if (typeof $this.attr("data-title") != "undefined") {
        title = passedDataHistory.titleprefix + _.unescape($this.attr("data-title"));
      }
      var catids = utility_controller.parseIdsString($this.attr("data-catid"));
      history_controller_new_default.pushState({ type: $this.attr("data-type"), id: $this.attr("data-id"), catid: catids }, title, href);
    }
  };

  // lay/frontend/assets/src/js/app/frontend/polyfills/polyfills_controller.js
  var polyfills_controller = {
    polyfill_flexbox: function() {
      polyfill_flexbox();
    },
    initModule: function() {
      initModule12();
      bindResize6();
    }
  };
  var polyfills_controller_default = polyfills_controller;
  var polyfill_flexbox = function() {
    if (!Modernizr.flexbox) {
      jQuery(".col.align-middle").each(function() {
        var doMarginTop = false;
        var $self = jQuery(this);
        if (Utility.isPhoneSize) {
          $self.css("margin-top", "0");
          if (jQuery($self[0].parentNode.parentNode).hasClass("_100vh")) {
            if (jQuery($self[0].parentNode).find(".col").length == 1) {
              doMarginTop = true;
            }
          }
        } else {
          doMarginTop = true;
        }
        if (doMarginTop) {
          var rh = jQuery(this.parentNode).height();
          var h = $self.height();
          var mt = (rh - h) / 2;
          $self.css("margin-top", mt + "px");
        }
      });
      jQuery(".col.align-bottom").each(function() {
        var doMarginTop = false;
        var $self = jQuery(this);
        if (Utility.isPhoneSize) {
          $self.css("margin-top", "0");
          if (jQuery($self[0].parentNode.parentNode).hasClass("_100vh")) {
            if (jQuery($self[0].parentNode).find(".col").length == 1) {
              doMarginTop = true;
            }
          }
        } else {
          if (jQuery($self[0].parentNode.parentNode).hasClass("_100vh")) {
            doMarginTop = true;
          }
        }
        if (doMarginTop) {
          var rh = jQuery(this.parentNode).height();
          var h = $self.height();
          var mt = rh - h;
          $self.css("margin-top", mt + "px");
        }
      });
    }
  };
  var initModule12 = function() {
    bindResize6();
    window.laytheme.on("newpageshown", function() {
      polyfill_flexbox();
    });
  };
  var bindResize6 = function() {
    jQuery(window).on("resize", function() {
      polyfill_flexbox();
    });
    jQuery(window).on("orientationchange", function() {
      setTimeout(function() {
        polyfill_flexbox();
      }, 400);
    });
  };

  // lay/frontend/assets/src/js/app/frontend/intro/intro_media_view.js
  var IntroMediaView = Marionette.View.extend({
    tagName: "div",
    template: _.template(
      `<div class="mediawrap <%= getSizingClassName() %> <%= getFollowMovementClassName() %>">
            <%= getMedia() %>
        </div>`
    ),
    events: {
      "click": "onHideClick"
    },
    onHideClick: function() {
      intro_controller_new_default.hide();
    },
    onRender: function() {
      setTimeout(function() {
        intro_controller_new_default.setReferences();
        intro_controller_new_default.prepareBoundary();
      }, 0);
    },
    onAttach: function() {
      intro_controller_new_default.initHideAfter();
    },
    onResize: function() {
      var winAr = window.innerWidth / window.innerHeight;
      var ar = this.model.get("width") / this.model.get("height");
      var sizeClass = winAr > ar ? "w100" : "h100";
      this.$el.find(".mediawrap").removeClass("w100 h100").addClass(sizeClass);
    },
    templateContext: function() {
      return {
        getFollowMovementClassName: function() {
          return frontendPassedData.intro_movement == 1 ? "followmovement" : "";
        },
        getMedia: function() {
          switch (this.type) {
            case "video":
              return '<video class="media loaded" data-ar="' + this.getAr() + '" playsinline muted autoplay loop src="' + this.url + '"></video>';
            case "image":
              return '<img class="lazyload js-intro-image media" data-ar="' + this.getAr() + '" sizes="' + this.getSizes() + '" data-srcset="' + this.getSrcset() + '" src="" alt="">';
          }
        },
        getSizes: function() {
          var ar = 1.15 * this.width * window.innerHeight / this.height / window.innerWidth;
          ar = Math.round(Math.max(ar, 1.15) * 100);
          return ar + "vw";
        },
        getSizingClassName: function() {
          var winAr = window.innerWidth / window.innerHeight;
          var ar = this.width / this.height;
          var sizeClass = winAr > ar ? "w100" : "h100";
          return sizeClass;
        },
        getSrcset: function() {
          var imageScrsetArray = [];
          for (var size_index in Utility.imageSizes) {
            var imageScrset = this["sizes"]["_" + Utility.imageSizes[size_index]];
            imageScrset = imageScrset + " " + Utility.imageSizes[size_index] + "w";
            imageScrsetArray.push(imageScrset);
          }
          return imageScrsetArray.join(", ");
        },
        getAr: function() {
          return this.width / this.height;
        },
        getText: function() {
          return this.text;
        }
      };
    }
  });
  var intro_media_view_default = IntroMediaView;

  // lay/frontend/assets/src/js/app/frontend/intro/intro_root_view.js
  var IntroRootView = Marionette.View.extend({
    className: "intro",
    template: _.template(`
        <div class="intro-media-region"></div>
        <div class="intro-svg-wrap"><%= getSVGOverlay() %></div>
        <div class="intro_text ` + frontendPassedData.intro_text_textformat + `"><%= getText() %></div>
    `),
    regions: {
      mediaRegion: ".intro-media-region"
    },
    templateContext: function() {
      return {
        getSVGOverlay: function() {
          if (frontendPassedData.intro_use_svg_overlay == true) {
            return '<img class="intro-svg-overlay" src="' + frontendPassedData.intro_svg_url + '" alt="">';
          }
        },
        getText: function() {
          if (frontendPassedData.intro_use_text_overlay == true) {
            return frontendPassedData.intro_text;
          }
        }
      };
    }
  });
  var intro_root_view_default = IntroRootView;

  // lay/frontend/assets/src/js/app/frontend/intro/intro_controller_new.js
  var intro_controller_new = {
    init: function(callback2) {
      init3(callback2);
    },
    hide: function() {
      hide();
    },
    destroy: function() {
      destroy();
    },
    unbind: function() {
      unbind();
    },
    initHideAfter: function() {
      initHideAfter();
    },
    getBoundaries: function() {
      return {
        boundaryX: stateMap10.boundaryX,
        boundaryY: stateMap10.boundaryY
      };
    },
    setReferences: function() {
      setReferences();
    },
    prepareBoundary: function() {
      prepareBoundary();
    },
    cancelLoading: function() {
      cancelLoading();
    }
  };
  var intro_controller_new_default = intro_controller_new;
  var $mediaWrap;
  var introMediaView;
  var particle = null;
  var $body;
  var requestAnimationFrameId;
  var stateMap10 = {
    boundaryX: 0,
    boundaryY: 0,
    intro: null
  };
  var configMap2 = {
    mediaScale: 115
  };
  window.laytheme.on("customizer_showintro", function() {
    destroy();
    init3();
  });
  window.laytheme.on("customizer_hideintro", function() {
    hide();
    jQuery("body").removeClass("intro-loading");
  });
  var cancelLoading = function() {
    jQuery("body").removeClass("intro-loading");
  };
  var initView = function() {
    var model = null;
    if (Utility.orientation === "landscape") {
      model = new Backbone.Model(frontendPassedData.intro_landscape);
    } else {
      model = new Backbone.Model(frontendPassedData.intro_portrait);
    }
    introMediaView = new intro_media_view_default({
      model
    });
    var introRootView = new intro_root_view_default();
    var IntroApplication = Marionette.Application.extend({
      region: "#intro-region",
      onStart: function() {
        this.showView(introRootView);
        introRootView.showChildView("mediaRegion", introMediaView);
        jQuery("body").removeClass("intro-loading");
      }
    });
    var app = new IntroApplication();
    app.start();
  };
  var init3 = function() {
    jQuery("#intro-region").removeClass("hide");
    jQuery("body").removeClass("intro-loading");
    if (!frontendPassedData.is_frontpage) {
      return;
    }
    if (!frontendPassedData.intro_active) {
      return;
    }
    var showIntro = false;
    if (Utility.orientation === "landscape") {
      if (!jQuery.isEmptyObject(frontendPassedData.intro_landscape)) {
        showIntro = true;
      }
    } else {
      if (!jQuery.isEmptyObject(frontendPassedData.intro_portrait)) {
        showIntro = true;
      }
    }
    if (frontendPassedData.intro_use_svg_overlay == true && frontendPassedData.intro_svg_url != "") {
      showIntro = true;
    }
    if (frontendPassedData.intro_use_text_overlay == true && frontendPassedData.intro_text != "") {
      showIntro = true;
    }
    if (frontendPassedData.intro_hide_on_phone && window.innerWidth < parseInt(frontendPassedData.breakpoint, 10)) {
      showIntro = false;
    }
    if (showIntro == false) {
      destroy();
      return;
    }
    $body = jQuery("body");
    particle = new Particle(0, 0);
    initView();
    window.laytheme.on("orientationchanged", initView);
    setTimeout(function() {
      if (frontendPassedData.intro_movement == true) {
        bindMove();
        animate();
      }
    }, 0);
    jQuery(window).on("resize", sizeIntroMedia);
    jQuery(document).on("scroll", doScroll2);
  };
  var setReferences = function() {
    $mediaWrap = jQuery(".intro .mediawrap");
    stateMap10.intro = frontendPassedData.intro_landscape;
    if (Utility.orientation === "portrait") {
      stateMap10.intro = frontendPassedData.intro_portrait;
    }
  };
  var doScroll2 = function() {
    if (window.scrollY > 10) {
      hide();
    }
  };
  var initHideAfter = function() {
    var hide_after_time = parseInt(frontendPassedData.intro_hide_after, 10);
    if (hide_after_time == 0) {
      return;
    }
    var type2 = introMediaView.model.get("type");
    if (typeof type2 == "undefined") {
      setTimeout(function() {
        hide();
      }, hide_after_time);
    } else {
      switch (type2) {
        case "video":
          jQuery(".intro video").on("playing", function() {
            setTimeout(function() {
              hide();
            }, hide_after_time);
          });
          break;
        default:
        case "image":
          jQuery(document).on("lazyloaded", function(e) {
            if (e.target.className.indexOf("js-intro-image") != -1) {
              setTimeout(function() {
                hide();
              }, hide_after_time);
            }
          });
          break;
      }
    }
  };
  var map2 = function(value, istart, istop, ostart, ostop) {
    return ostart + (ostop - ostart) * ((Math.min(istop, Math.max(istart, value)) - istart) / (istop - istart));
  };
  var prepareBoundary = function() {
    var mediaDivHeight = jQuery(".intro .mediawrap").height();
    var mediaWidth = 0, mediaHeight = 0;
    if ($mediaWrap.hasClass("h100")) {
      mediaHeight = mediaDivHeight * configMap2.mediaScale / 100;
      mediaWidth = mediaHeight * stateMap10.intro.width / stateMap10.intro.height;
    } else {
      mediaWidth = $body.innerWidth() * configMap2.mediaScale / 100;
      mediaHeight = mediaWidth * stateMap10.intro.height / stateMap10.intro.width;
    }
    stateMap10.boundaryX = (mediaWidth - $body.innerWidth()) / 2;
    stateMap10.boundaryY = (mediaHeight - mediaDivHeight) / 2;
    stateMap10.boundaryX -= 2;
    stateMap10.boundaryY -= 2;
  };
  var max = 1;
  var bindMove = function() {
    prepareBoundary();
    if (!Utility.isTouchDevice) {
      jQuery(window).on("mousemove", doMouseMove);
    } else {
      window.addEventListener("deviceorientation", doDeviceOrientation);
    }
  };
  var doMouseMove = function(e) {
    var x = map2(e.clientX, 0, $body.innerWidth(), max, -max);
    var y = map2(e.clientY, 0, window.innerHeight, max, -max);
    particle.updateDestination(x, y);
  };
  var doDeviceOrientation = function(e) {
    var x = e.gamma;
    var y = e.beta;
    if (window.orientation == 90) {
      x = map2(e.beta, -45, 45, max, -max);
      y = map2(-e.gamma, -20, 70, max, -max);
    } else if (window.orientation == -90) {
      x = map2(-e.beta, -45, 45, max, -max);
      y = map2(e.gamma, -20, 70, max, -max);
    } else if (window.orientation == 180) {
      x = map2(-e.gamma, -45, 45, max, -max);
      y = map2(-e.beta, -20, 70, max, -max);
    } else {
      x = map2(e.gamma, -45, 45, max, -max);
      y = map2(e.beta, -20, 70, max, -max);
    }
    particle.updateDestination(x, y);
  };
  var animate = function() {
    particle.update();
    $mediaWrap.css({
      transform: "translate3d(" + particle.x + "px, " + particle.y + "px, 0)",
      "-webkit-transform": "translate3d(" + particle.x + "px, " + particle.y + "px, 0)"
    });
    requestAnimationFrameId = requestAnimationFrame(animate);
  };
  var destroy = function() {
    jQuery("body").removeClass("intro-enabled").addClass("intro-disabled");
    jQuery("#intro-region").html("").addClass("hide");
    window.laytheme.off("orientationchanged", initView);
    cancelAnimationFrame(requestAnimationFrameId);
    window.removeEventListener("deviceorientation", doDeviceOrientation);
    jQuery(window).off("mousemove", doMouseMove);
    jQuery(window).off("resize", sizeIntroMedia);
    clearTimeout(hideTimeout);
  };
  var sizeIntroMedia = function() {
    introMediaView.triggerMethod("resize");
    prepareBoundary();
  };
  var hideTimeout;
  var hide = function(callback2) {
    if (frontendPassedData.intro_transition_duration == 0) {
      destroy();
    } else {
      jQuery(".intro").on("transitionend", function() {
        destroy();
      });
      jQuery(".intro").addClass("animatehide");
    }
    if (typeof callback2 == "function") {
      callback2();
    }
    jQuery(document).off("scroll", doScroll2);
  };
  (function() {
    function Particle2(x, y) {
      this.x = x;
      this.y = y;
      this.virtualX = x;
      this.virtualY = y;
      this.destX = x;
      this.destY = y;
      this.xvelocity = 0;
      this.yvelocity = 0;
    }
    Particle2.prototype.update = function() {
      var boundaries = intro_controller_new.getBoundaries();
      this.xvelocity = this.destX - this.virtualX;
      this.yvelocity = this.destY - this.virtualY;
      if (Math.abs(this.xvelocity) > 2e-3) {
        this.xvelocity *= 0.03;
      }
      if (Math.abs(this.yvelocity) > 2e-3) {
        this.yvelocity *= 0.03;
      }
      this.virtualX += this.xvelocity;
      this.virtualY += this.yvelocity;
      this.x = Math.min(1, Math.max(-1, this.virtualX)) * boundaries.boundaryX;
      this.y = Math.min(1, Math.max(-1, this.virtualY)) * boundaries.boundaryY;
    };
    Particle2.prototype.updateDestination = function(x, y) {
      this.destX = x;
      this.destY = y;
    };
    window.Particle = Particle2;
  })();

  // lay/frontend/assets/src/js/app/frontend/search/search_view.js
  var placeholder = frontendPassedData.search_placeholder_text;
  var SearchView = Marionette.View.extend({
    className: function() {
      return "search-view " + this.getOption("hasNoResultsClass");
    },
    hasNoResultsClass: "search-has-no-results",
    hasResultsClass: "search-has-or-had-results",
    template: _.template(`
        <div class="close-search"></div>
        <div class="search-inputs">
            <input id="search-query" type="search" class="search-query" placeholder="` + placeholder + `" autocomplete="off" spellcheck="false">
            <div id="search-autosuggest-list"></div>
        </div>
        <div id="search-results-region"></div>
    `),
    regions: {
      "results": "#search-results-region",
      "search_autosuggest_list": "#search-autosuggest-list"
    },
    events: {
      "input #search-query": "onInput",
      "focus #search-query": "onFocus",
      "blur #search-query": "onBlur",
      "click .close-search": "onHide"
    },
    val: "",
    onAddClassForHasResults: function() {
      this.$el.removeClass(this.hasNoResultsClass);
      this.$el.addClass(this.hasResultsClass);
    },
    onAddClassForNoResults: function() {
      this.$el.addClass(this.hasNoResultsClass);
      this.$el.removeClass(this.hasResultsClass);
    },
    onFocus: function() {
      this.$el.find("#search-autosuggest-list").show();
    },
    onBlur: function() {
      setTimeout(() => {
        this.$el.find("#search-autosuggest-list").hide();
      }, 100);
    },
    onInput: function() {
      this.val = this.$el.find("#search-query").val();
      search_controller_default.search();
    },
    onShow: function() {
      this.$el.addClass("show");
      utility_controller.fixBody();
      jQuery("#search-query").focus();
    },
    onHide: function() {
      this.$el.addClass("hide").removeClass("show");
      utility_controller.unfixBody();
      this.$el.find("#search-query").val("");
      this.val = "";
      this.triggerMethod("blur");
      search_controller_default.search();
      this.triggerMethod("add:class:for:no:results");
    },
    onRender: function() {
      var view = this;
      window.laytheme.on("content_fadeout_transition_ended", function() {
        view.triggerMethod("hide");
      });
    }
  });
  var SuggestView = Marionette.View.extend({
    className: "suggest-item",
    template: _.template(`
        <span class="suggest"><span class="suggest-prefix"><%= suggestPrefix() %></span><span class="suggest-suffix"><%= suggestSuffix() %></span></span>
    `),
    events: {
      "click": "clickSuggestItem"
    },
    clickSuggestItem: function(event2) {
      event2.preventDefault();
      event2.stopPropagation();
      search_controller_default.clickSuggestItem(this.$el);
    },
    templateContext: function() {
      return {
        suggestSuffix: function() {
          var auto_complete = this.suggest;
          var searchQuery = this.query;
          if (utility_controller.stringStartsWith(auto_complete, searchQuery)) {
            return auto_complete.slice(searchQuery.length);
          } else {
            return auto_complete;
          }
        },
        query: jQuery("#search-query").val(),
        suggestPrefix: function() {
          var auto_complete = this.suggest;
          var searchQuery = this.query;
          if (utility_controller.stringStartsWith(auto_complete, searchQuery)) {
            return this.query;
          } else {
            return "";
          }
        }
      };
    }
  });
  var SuggestCollectionView = Marionette.CollectionView.extend({
    className: "suggest-collection",
    childView: SuggestView,
    id: "suggest-results"
  });

  // lay/frontend/assets/src/js/app/frontend/search/search_controller.js
  var $deferred = jQuery.Deferred();
  var fuseInitialized = false;
  var fuse;
  var posts;
  var valueToLowerCase;
  var searchView;
  var autoCompleteAmount = 3;
  var fuseOptions = {
    shouldSort: true,
    includeScore: false,
    threshold: 0.1,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 3,
    ignoreLocation: true,
    keys: [
      "title",
      "descr",
      "cats",
      "tags"
    ]
  };
  var loadSearchableData = function() {
    if (!fuseInitialized) {
      jQuery.ajax({
        url: frontendPassedData.wpapiroot + "laytheme/search/",
        success: function(results) {
          fuse = new Fuse(results, fuseOptions);
          fuseInitialized = true;
          $deferred.resolve();
        }
      });
    }
  };
  var searchIfEndpointLoaded = function() {
    if ($deferred.state() == "resolved") {
      search();
    } else {
      jQuery.when(
        $deferred
      ).then(function() {
        search();
      });
    }
  };
  var search = _.debounce(function() {
    var value = jQuery("#search-query").val();
    valueToLowerCase = value.toLowerCase();
    if (value.length == 0) {
      jQuery("#search-autosuggest-list").html("");
      jQuery("#search-results-region").html("");
      return;
    }
    posts = fuse.search(value);
    if (posts.length > 0) {
      searchView.triggerMethod("add:class:for:has:results");
    }
    var only_post_ids = get_only_postids(posts);
    only_post_ids = JSON.stringify(only_post_ids);
    var ajax_data = {
      "action": "get_search_result",
      "found_posts": only_post_ids
    };
    jQuery.ajax({
      url: frontendPassedData.ajax_url,
      data: ajax_data,
      type: "post",
      success: (resultMarkup) => {
        jQuery("#search-results-region").html(resultMarkup);
        setTimeout(function() {
          window.laytheme.trigger("searchresultshown");
        }, 0);
      },
      error: (event2) => {
        console.log("search error");
        console.log(event2);
      }
    });
    if (frontendPassedData.search_autosuggest_hide == false) {
      suggest();
    }
  }, 200);
  var suggest = function() {
    var autoCompleteArray = [];
    for (var post of posts) {
      if (post.title.toLowerCase().startsWith(valueToLowerCase) && autoCompleteArray.indexOf(post.title) == -1) {
        autoCompleteArray.push(post.title);
      }
      if (post.descr.toLowerCase().startsWith(valueToLowerCase) && autoCompleteArray.indexOf(post.descr) == -1) {
        autoCompleteArray.push(post.descr);
      }
      for (var i = 0; i < post.cats.length; i++) {
        var cat = post.cats[i];
        if (cat.toLowerCase().startsWith(valueToLowerCase) && autoCompleteArray.indexOf(cat) == -1) {
          autoCompleteArray.push(cat);
        }
      }
      for (var i = 0; i < post.tags.length; i++) {
        var tag = post.tags[i];
        if (tag.toLowerCase().startsWith(valueToLowerCase) && autoCompleteArray.indexOf(tag) == -1) {
          autoCompleteArray.push(tag);
        }
      }
      if (autoCompleteArray.length > autoCompleteAmount) {
        break;
      }
    }
    if (autoCompleteArray.length != 0 && valueToLowerCase == autoCompleteArray[0].toLowerCase()) {
      autoCompleteArray.splice(0, 1);
    }
    if (autoCompleteArray.length == 0) {
      for (var post of posts) {
        if (post.title.toLowerCase().indexOf(valueToLowerCase) !== -1 && autoCompleteArray.indexOf(post.title) == -1) {
          autoCompleteArray.push(post.title);
        }
        if (post.descr.toLowerCase().indexOf(valueToLowerCase) !== -1 && autoCompleteArray.indexOf(post.descr) == -1) {
          autoCompleteArray.push(post.descr);
        }
        for (var i = 0; i < post.cats.length; i++) {
          var cat = post.cats[i];
          if (cat.toLowerCase().startsWith(valueToLowerCase) && autoCompleteArray.indexOf(cat) == -1) {
            autoCompleteArray.push(cat);
          }
        }
        for (var i = 0; i < post.tags.length; i++) {
          var tag = post.tags[i];
          if (tag.toLowerCase().startsWith(valueToLowerCase) && autoCompleteArray.indexOf(tag) == -1) {
            autoCompleteArray.push(tag);
          }
        }
        if (autoCompleteArray.length > autoCompleteAmount) {
          break;
        }
      }
    }
    if (autoCompleteArray.length != 0 && valueToLowerCase == autoCompleteArray[0].toLowerCase()) {
      autoCompleteArray.splice(0, 1);
    }
    if (posts.length != 0) {
      var suggestView = new SuggestCollectionView({
        collection: new Backbone.Collection(autoCompleteArray.slice(0, autoCompleteAmount).map((suggest2) => {
          return { "suggest": suggest2 };
        }))
      });
      searchView.getRegion("search_autosuggest_list").show(suggestView);
    } else {
      searchView.getRegion("search_autosuggest_list").empty();
    }
  };
  var clickSuggestItem = function($el) {
    var autoComplete = $el.find(".suggest").text();
    jQuery("#search-query").val(autoComplete);
    setTimeout(function() {
      searchView.getRegion("search_autosuggest_list").empty();
      searchView.triggerMethod("input");
    }, 0);
  };
  var bindSearchOpen = function() {
    jQuery('[href="#search"]').on("click", function(e) {
      loadSearchableData();
      e.preventDefault();
      e.stopPropagation();
      searchView.triggerMethod("show");
      window.laytheme.trigger("searchshown");
    });
  };
  var initView2 = function() {
    searchView = new SearchView();
    var SearchApplication = Marionette.Application.extend({
      region: "#search-region",
      onStart: function() {
        this.showView(searchView);
      }
    });
    var app = new SearchApplication();
    app.start();
  };
  var bindEscapeKey = function() {
    jQuery(document).keyup(function(e) {
      if (e.which == 27) {
        searchView.triggerMethod("hide");
      }
    });
  };
  var get_only_postids = function(posts2) {
    var result2 = [];
    for (var i = 0; i < posts2.length; i++) {
      var id2 = posts2[i]["postid"];
      result2.push(id2);
    }
    return result2;
  };
  var bindCustomizerShowHideEvents = function() {
    window.laytheme.on("customizer_showsearch", function() {
      loadSearchableData();
      searchView.triggerMethod("show");
    });
    window.laytheme.on("customizer_hidesearch", function() {
      searchView.triggerMethod("hide");
    });
    window.laytheme.on("newpageshown", function() {
      searchView.triggerMethod("hide");
    });
  };
  var initLoadVideo = function() {
    window.laytheme.on("searchresultshown", function() {
      load_html5_videos_controller_default.loadVideosInstantly(jQuery("#search-results-region"));
    });
  };
  var search_controller = {
    initModule: function() {
      bindSearchOpen();
      initView2();
      bindEscapeKey();
      bindCustomizerShowHideEvents();
      initLoadVideo();
    },
    search: function() {
      searchIfEndpointLoaded();
    },
    clickSuggestItem: function($el) {
      clickSuggestItem($el);
    }
  };
  var search_controller_default = search_controller;

  // lay/frontend/assets/src/js/app/frontend/html5video/play_pause_autoplay_videos_on_scroll.js
  var eventsChannel6 = Backbone.Radio.channel("events");
  var coverActive = false;
  var $coverVideos;
  var $videos;
  var $target;
  var $cover_target;
  var infos = [];
  var infos_cover = [];
  var getVideoReferences = function() {
    $videos = $target.find("video.autoplay[playsinline][muted]");
    if (coverActive) {
      $coverVideos = $cover_target.find("video.autoplay[playsinline][muted]");
    }
    initInfos();
    eventsChannel6.off("scroll", playPauseVideoOnScroll);
    eventsChannel6.on("scroll", playPauseVideoOnScroll);
  };
  var initInfos = function() {
    infos = [];
    infos_cover = [];
    for (var i = 0; i < $videos.length; i++) {
      infos[i] = {
        playing: false,
        playPromise: null
      };
    }
    if (coverActive) {
      for (var i = 0; i < $coverVideos.length; i++) {
        infos_cover[i] = {
          playing: false,
          playPromise: null
        };
      }
    }
  };
  window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
    switch (typeOfContentThatIsReady) {
      case "desktop":
        $target = jQuery("#grid");
        $cover_target = jQuery(".cover-region-desktop");
        break;
      case "phone":
        $target = jQuery("#custom-phone-grid");
        $cover_target = jQuery(".cover-region-phone");
        if ($target.length == 0) {
          $target = jQuery("#grid");
          $cover_target = jQuery(".cover-region-desktop");
        }
        break;
    }
    if ($cover_target.length > 0) {
      coverActive = true;
    } else {
      coverActive = false;
    }
    getVideoReferences();
    playPauseVideoOnScroll();
  });
  var offset = 200;
  var playPauseVideoOnScroll = _.throttle(function() {
    $videos.each(function(ix) {
      var rect = this.getBoundingClientRect();
      if (rect.top - offset <= window.innerHeight && rect.bottom >= 0) {
        if (infos[ix] && infos[ix]["playing"] == false && !this.ended && !jQuery(this).hasClass("userinteractedwith-paused")) {
          infos[ix]["playPromise"] = this.play();
          infos[ix]["playPromise"].then(function() {
            infos[ix]["playing"] = true;
          });
        }
      } else {
        if (infos[ix] && infos[ix]["playing"] == true) {
          this.pause();
          infos[ix]["playing"] = false;
        }
      }
    });
    if (coverActive) {
      $coverVideos.each(function(ix) {
        if (window.scrollY > window.innerHeight) {
          if (infos[ix] && infos[ix]["playing"] == true) {
            this.pause();
            infos_cover[ix]["playing"] = false;
          }
        } else {
          if (infos[ix] && infos_cover[ix]["playing"] == false && !this.ended && !jQuery(this).hasClass("userinteractedwith-paused")) {
            infos_cover[ix]["playPromise"] = this.play();
            infos_cover[ix]["playPromise"].then(function() {
              infos_cover[ix]["playing"] = true;
            });
          }
        }
      });
    }
  }, 60);

  // lay/frontend/assets/src/js/app/frontend/element_animate_in_on_scroll/element_animate_in_on_scroll.js
  var eventsChannel7 = Backbone.Radio.channel("events");
  var initModule13 = function() {
    let items;
    if (window.frontendPassedData.element_transition_on_scroll == "on") {
      window.laytheme.on("newpageshown", function() {
        let options = {
          // rootMargin: '0px 0px 0px 0px',
          threshold: 0
        };
        let observer = new IntersectionObserver(callback, options);
        items = document.querySelectorAll(".col.no-parallax.no-offset.no-sticky,.col.no-parallax.no-offset.type-thumbnailgrid a.thumb,.col.no-parallax.no-offset.type-elementgrid .element-wrap,.col.no-parallax.no-offset.type-productsgrid li,.lay-thumbnailgrid-filter-wrap");
        setTimeout(function() {
          items.forEach((el) => {
            if (el.getBoundingClientRect().top > window.innerHeight && !el.classList.contains("no-animation")) {
              el.classList.add("below");
            }
          });
        }, 50);
        items.forEach((el) => {
          observer.observe(el);
        });
      });
      eventsChannel7.on("scroll", function() {
        if (window.innerHeight + window.scrollY >= document.body.scrollHeight - 90) {
          for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (item.classList.contains("below")) {
              const transitionDelay = getTransitionDelay();
              item.style.transitionDelay = transitionDelay + "ms";
              item.classList.remove("below");
              item.classList.add("in-view");
            }
          }
        }
      });
      jQuery(window).on("fpAfterLoad", function(event2, obj2) {
        const items2 = document.querySelectorAll(".row-" + (obj2.index - 1) + " .col.below");
        for (let i = 0; i < items2.length; i++) {
          const item = items2[i];
          if (item.classList.contains("below")) {
            const transitionDelay = getTransitionDelay();
            item.style.transitionDelay = transitionDelay + "ms";
            item.classList.remove("below");
            item.classList.add("in-view");
          }
        }
      });
    }
  };
  window.laytheme.on("pushstate", function() {
    pauseOnScrollAnimation();
  });
  window.laytheme.on("popstate", function() {
    pauseOnScrollAnimation();
  });
  window.laytheme.on("newpageshown", function() {
    setTimeout(function() {
      resumeOnScrollAnimation();
    }, 50);
  });
  var doAnimation = true;
  var resumeOnScrollAnimation = function() {
    doAnimation = true;
  };
  var pauseOnScrollAnimation = function() {
    doAnimation = false;
  };
  var callback = (entries, observer) => {
    entries.forEach((entry) => {
      if (doAnimation) {
        if (entry.isIntersecting == true && entry.target.classList.contains("below") && (entry.boundingClientRect.top > 0 || entry.boundingClientRect.bottom > 0)) {
          const transitionDelay = getTransitionDelay();
          entry.target.style.transitionDelay = transitionDelay + "ms";
          entry.target.classList.remove("below");
          entry.target.classList.add("in-view");
        }
        if (entry.isIntersecting == false && entry.boundingClientRect.top > window.innerHeight && !entry.target.classList.contains("no-animation")) {
          entry.target.style.transitionDelay = 0;
          entry.target.classList.add("below");
          entry.target.classList.remove("in-view");
        }
      }
    });
  };
  var t;
  var needsDelay = false;
  var delay = 0;
  var getTransitionDelay = function() {
    clearTimeout(t);
    t = setTimeout(function() {
      needsDelay = false;
      delay = 0;
    }, 50);
    if (needsDelay) {
      delay += 50;
    }
    needsDelay = true;
    return delay;
  };
  var element_animate_in_on_scroll_controller = {
    initModule: initModule13
  };
  var element_animate_in_on_scroll_default = element_animate_in_on_scroll_controller;

  // lay/frontend/assets/src/js/app/frontend/anchorbehaviour/anchorbehaviour.js
  var $target2 = void 0;
  var getFullScreenSliderType = function() {
    if (jQuery(".vertical-fullpage").length > 0) {
      return "vertical";
    } else if (jQuery(".horizontal-fullpage").length > 0) {
      return "horizontal";
    } else {
      return "none";
    }
  };
  var getRowIndexByHash = function(hash) {
    if (typeof $target2 != "undefined") {
      var $el = $target2.find(hash);
      var $row = $el.closest(".row");
      if ($row.length == 0) {
        console.error("no row found");
        return 0;
      }
      var $rows2 = $target2.find(".row");
      var index = $rows2.index($row);
      return index;
    }
    return 0;
  };
  var isAnchorLinkToSamePage = function($anchor) {
    var currentLocation = window.location.href;
    var hash_pos_current_location = currentLocation.indexOf("#");
    if (hash_pos_current_location !== -1) {
      currentLocation = currentLocation.substr(0, hash_pos_current_location);
    }
    if ($anchor.attr("href").substr(0, 1) == "#") {
      return true;
    }
    if ($anchor[0].hasAttribute("data-id") && $anchor[0].hasAttribute("data-type")) {
      if ($anchor.attr("data-id") == jQuery("body").attr("data-id") && $anchor.attr("data-type") == jQuery("body").attr("data-type")) {
        return true;
      }
    }
    var url = $anchor.attr("href");
    var hash_pos = url.indexOf("#");
    var url_without_hash = url.substr(0, hash_pos);
    if (url_without_hash == currentLocation) {
      return true;
    }
    if (url_without_hash.substr(0, url_without_hash.length - 1) == currentLocation) {
      return true;
    }
    if (url_without_hash == currentLocation.substr(0, currentLocation.length - 1)) {
      return true;
    }
    if (url_without_hash.substr(0, url_without_hash.length - 1) == currentLocation.substr(0, currentLocation.length - 1)) {
      return true;
    }
    return false;
  };
  var initAnchorScroll = function() {
    jQuery(document).on(
      "click",
      '.lay-content a[href*="#"]:not([href="#search"]):not([href="#"]):not([href="#laynextproject"]):not([href="#layprevproject"]):not(.scrolltotop), .laynav a[href*="#"]:not([href="#search"]):not([href="#laynextproject"]):not([href="#layprevproject"]):not(.scrolltotop)',
      function(e) {
        if (jQuery(this).closest("#fp-nav").length > 0 || jQuery(this).closest(".fp-slidesNav").length > 0) {
          e.preventDefault();
          return;
        }
        if (!isAnchorLinkToSamePage(jQuery(this))) {
          return;
        }
        e.preventDefault();
        mobile_menu_controller_default.hideMobileMenu();
        var href = jQuery(this).attr("href");
        var hash_character_position = href.indexOf("#");
        var hash = href.substr(hash_character_position);
        var fullscreenSliderType = getFullScreenSliderType();
        switch (fullscreenSliderType) {
          case "none":
            var el = $target2.find(hash);
            if (el.length != 0) {
              var top = el.offset().top;
              top = addSpaceTop(top);
              jQuery("html").animate(
                {
                  scrollTop: top
                },
                300,
                "easeInOutQuad",
                function() {
                  window.location.hash = hash;
                  window.scroll(0, top);
                }
              );
            }
            break;
          case "vertical":
            var rowIndex = getRowIndexByHash(hash);
            var sectionIndex = rowIndex + 1;
            jQuery(window).one("fpAfterLoad", function() {
              window.location.hash = hash;
            });
            jQuery.fn.fullpage.moveTo(sectionIndex, 0);
            break;
          case "horizontal":
            var rowIndex = getRowIndexByHash(hash);
            var slideIndex = rowIndex;
            jQuery(window).one("fpAfterSlideLoad", function() {
              window.location.hash = hash;
            });
            jQuery.fn.fullpage.moveTo(1, slideIndex);
            break;
        }
      }
    );
  };
  var addSpaceTop = function(top) {
    switch (Utility.screenSize) {
      case "desktop":
      case "tablet":
        if (jQuery(".navbar").is(":visible")) {
          top -= parseInt(jQuery(".navbar").height(), 10);
        }
        if (frontendPassedData.anchorscroll_offset_desktop != "" && jQuery.isNumeric(parseInt(frontendPassedData.anchorscroll_offset_desktop, 10))) {
          top -= parseInt(frontendPassedData.anchorscroll_offset_desktop, 10);
        }
        break;
      case "phone":
        if (jQuery(".navbar").is(":visible") && frontendPassedData.mobile_navbar_fixed == "1") {
          top -= parseInt(jQuery(".navbar").height(), 10);
        }
        if (frontendPassedData.anchorscroll_offset_phone != "" && jQuery.isNumeric(parseInt(frontendPassedData.anchorscroll_offset_phone, 10))) {
          top -= parseInt(frontendPassedData.anchorscroll_offset_phone, 10);
        }
        break;
    }
    return top;
  };
  var handleHashAfterContentReady = function() {
    var hash = window.location.hash;
    var el = $target2.find(hash);
    if (el.length > 0) {
      var fullscreenSliderType = getFullScreenSliderType();
      switch (fullscreenSliderType) {
        case "none":
          var top = el.offset().top;
          top = addSpaceTop(top);
          window.scroll(0, top);
          break;
        case "vertical":
          var rowIndex = getRowIndexByHash(hash);
          var sectionIndex = rowIndex + 1;
          jQuery.fn.fullpage.silentMoveTo(sectionIndex, 0);
          break;
        case "horizontal":
          var rowIndex = getRowIndexByHash(hash);
          var slideIndex = rowIndex;
          jQuery.fn.fullpage.silentMoveTo(1, slideIndex);
          break;
      }
    }
  };
  var bindOnHashChange = function() {
    jQuery(window).on("hashchange", function() {
      var hash = window.location.hash;
      if ($target2 != void 0) {
        handleHashAfterContentReady();
      }
    });
  };
  var initModule14 = function() {
    initAnchorScroll();
    bindOnHashChange();
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      $target2 = void 0;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target2 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target2 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target2 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target2 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target2 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      setTimeout(function() {
        handleHashAfterContentReady();
      }, 50);
    });
  };
  var anchor_behaviour_controller = {
    initModule: initModule14,
    addSpaceTop
  };
  var anchorbehaviour_default = anchor_behaviour_controller;

  // lay/frontend/assets/src/js/app/frontend/utility/_100vh_controller.js
  var regexResult = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/);
  var isTouchDevice;
  if (regexResult === null) {
    isTouchDevice = false;
  } else {
    isTouchDevice = true;
  }
  var touchDeviceClass = isTouchDevice ? "is-touchdevice" : "no-touchdevice";
  jQuery("body").addClass(touchDeviceClass);
  var iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
  var ratio = window.devicePixelRatio || 1;
  var screen = {
    width: window.screen.width * ratio,
    height: window.screen.height * ratio
  };
  var isiOS13iPad_Macintosh_regexResult = navigator.userAgent.match(/(Macintosh)/);
  var isSafari = !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/);
  var isiOS13iPad = false;
  if (isiOS13iPad_Macintosh_regexResult === null) {
    isiOS13iPad_Macintosh_regexResult = false;
  } else {
    isiOS13iPad_Macintosh_regexResult = true;
  }
  var isiPadRecognizedBySize = false;
  var isiPadWithoutHomeButton = false;
  if (screen.width == 2048 && screen.height == 2732) {
    isiPadRecognizedBySize = true;
    isiPadWithoutHomeButton = true;
  }
  if (screen.width == 1668 && screen.height == 2388) {
    isiPadRecognizedBySize = true;
    isiPadWithoutHomeButton = true;
  }
  if (screen.width == 2732 && screen.height == 2048) {
    isiPadRecognizedBySize = true;
  }
  if (screen.width == 1536 && screen.height == 2048) {
    isiPadRecognizedBySize = true;
  }
  if (screen.width == 1620 && screen.height == 2160) {
    isiPadRecognizedBySize = true;
  }
  if (screen.width == 1536 && screen.height == 2048) {
    isiPadRecognizedBySize = true;
  }
  if (isiOS13iPad_Macintosh_regexResult == true && isSafari == true && isiPadRecognizedBySize) {
    isiOS13iPad = true;
  }
  if (iOS === true || isiOS13iPad) {
    document.documentElement.classList.add("is-ios");
  } else {
    document.documentElement.classList.add("no-ios");
  }
  var iPad = /(iPad)/g.test(navigator.userAgent);
  if (iPad === true || isiOS13iPad) {
    if (isiPadWithoutHomeButton) {
      document.documentElement.classList.add("is-ipad-without-homebutton");
    } else {
      document.documentElement.classList.add("is-ipad");
    }
  } else {
    document.documentElement.classList.add("no-ipad");
  }
  var iPhone = /(iPhone)/g.test(navigator.userAgent);
  var iphone_resolutions = [
    {
      name: "iPhone 14 Plus",
      w: 1284,
      h: 2778
    },
    {
      name: "iPhone 14 Pro Max",
      w: 1290,
      h: 2796
    },
    {
      name: "iPhone 14 Pro",
      w: 1179,
      h: 2556
    },
    {
      name: "iPhone 14",
      w: 1170,
      h: 2532
    },
    // iphone se has a homebutton!!!
    // {
    //     name: 'iPhone SE 3rd gen',
    //     w: 750,
    //     h: 1334
    // },
    {
      name: "iPhone 13",
      w: 1170,
      h: 2532
    },
    {
      name: "iPhone 13 mini",
      w: 1080,
      h: 2340
    },
    {
      name: "iPhone 13 Pro Max",
      w: 1284,
      h: 2778
    },
    {
      name: "iPhone 13 Pro",
      w: 1170,
      h: 2532
    },
    {
      name: "iPhone 12",
      w: 1170,
      h: 2532
    },
    {
      name: "iPhone 12 mini",
      w: 1080,
      h: 2340
    },
    {
      name: "iPhone 12 Pro Max",
      w: 1284,
      h: 2778
    },
    {
      name: "iPhone 12 Pro",
      w: 1170,
      h: 2532
    },
    // iphone se has a homebutton!!!
    // {
    //     name: 'iPhone SE 2nd gen',
    //     w: 750,
    //     h: 1334
    // },
    {
      name: "iPhone 11 Pro Max",
      w: 1242,
      h: 2688
    },
    {
      name: "iPhone 11 Pro",
      w: 1125,
      h: 2436
    },
    {
      name: "iPhone 11",
      w: 828,
      h: 1792
    },
    {
      name: "iPhone XR",
      w: 828,
      h: 1792
    },
    {
      name: "iPhone XS Max",
      w: 1242,
      h: 2688
    },
    {
      name: "iPhone XS",
      w: 1125,
      h: 2436
    },
    {
      name: "iPhone X",
      w: 1125,
      h: 2436
    }
  ];
  var isNewIphone = false;
  if (iOS === true) {
    for (i = 0; i < iphone_resolutions.length; i++) {
      obj2 = iphone_resolutions[i];
      if (screen.width === obj2.w && screen.height === obj2.h) {
        isNewIphone = true;
        break;
      }
    }
  }
  var obj2;
  var i;
  if (isNewIphone) {
    document.documentElement.classList.add("is-iphone-no-homebutton");
  } else if (iPhone === true) {
    document.documentElement.classList.add("is-iphone");
  } else {
    document.documentElement.classList.add("no-iphone");
  }
  var isChromium = window.chrome;
  var winNav = window.navigator;
  var vendorName = winNav.vendor;
  var isOpera = typeof window.opr !== "undefined";
  var isIEedge = winNav.userAgent.indexOf("Edge") > -1;
  var isIOSChrome = winNav.userAgent.match("CriOS");
  var browser = "no-chrome-no-safari";
  if (isIOSChrome) {
    browser = "is-chrome";
  } else if (isChromium !== null && typeof isChromium !== "undefined" && vendorName === "Google Inc." && isOpera === false && isIEedge === false) {
    browser = "is-chrome";
  } else {
  }
  var ua = navigator.userAgent.toLowerCase();
  var isAndroid = ua.indexOf("android") > -1;
  if (isAndroid === true) {
    document.documentElement.classList.add("is-android");
  }
  if (isSafari === true) {
    browser = "is-safari";
  }
  document.documentElement.classList.add(browser);
  if (browser != "is-chrome") {
    document.documentElement.classList.add("no-chrome");
  }

  // lay/frontend/assets/src/js/app/frontend/utility/load_visible_images_then_rest.js
  var loadImage = function($img) {
    if ($img.hasClass("setsizes")) {
      var srcset = $img.attr("data-srcset");
      var src = $img.attr("data-src");
      $img.attr({
        "src": src,
        "srcset": srcset
      });
    } else if ($img.hasClass("lay-gif") || $img.hasClass("lay-image-original")) {
      var src = $img.attr("data-src");
      $img.attr("src", src);
    }
  };
  var isInsideViewportHeight = function(el, offset2 = 0) {
    var fpEnabled = jQuery("html").hasClass("fp-enabled");
    if (!fpEnabled || fpEnabled && window.getComputedStyle(jQuery(el).closest(".row")[0]).visibility != "hidden") {
      var rect = el.getBoundingClientRect();
      if (rect.bottom > 0 && rect.top < window.innerHeight + offset2 && rect.right > 0 && rect.left < window.innerWidth) {
        return true;
      }
    }
    return false;
  };
  var arrayElIsTrue3 = function(element, index, array) {
    return element == true;
  };
  function LoadImages($target7) {
    var $parent = $target7;
    var imagesInViewport = [];
    var imagesInViewportHaveLoaded = [];
    var imagesOutsideOfViewport = [];
    var loadImages = function() {
      var $images_to_load = $parent.find("img.setsizes, img.lay-gif, img.lay-image-original");
      $images_to_load.each(function() {
        if (isInsideViewportHeight(this)) {
          imagesInViewport.push(this);
          imagesInViewportHaveLoaded.push(false);
        } else {
          imagesOutsideOfViewport.push(this);
        }
      });
      for (var i = 0; i < imagesInViewport.length; i++) {
        (function(index) {
          var $img = jQuery(imagesInViewport[index]);
          loadImage($img);
          if ($img[0].complete) {
            imagesInViewportHaveLoaded[index] = true;
          } else {
            $img[0].addEventListener("load", function() {
              imagesInViewportHaveLoaded[index] = true;
            });
            $img[0].addEventListener("error", function() {
              imagesInViewportHaveLoaded[index] = true;
            });
          }
        })(i);
      }
      if (imagesInViewport.length > 0) {
        var interval = setInterval(function() {
          if (imagesInViewportHaveLoaded.every(arrayElIsTrue3)) {
            loadImagesOutsideOfViewport();
            clearInterval(interval);
          }
        }, 30);
      } else {
        loadImagesOutsideOfViewport();
      }
    };
    var loadImagesOutsideOfViewport = function() {
      for (var i = 0; i < imagesOutsideOfViewport.length; i++) {
        var $img = jQuery(imagesOutsideOfViewport[i]);
        loadImage($img);
      }
    };
    return {
      loadImages
    };
  }
  var initLoadImages = function($target7) {
    if (Utility.isTouchDevice) {
      var $images_to_load = $target7.find("img.setsizes, img.lay-gif, img.lay-image-original");
      $images_to_load.each(function() {
        loadImage(jQuery(this));
      });
    } else {
      var loadImagesObject = new LoadImages($target7);
      loadImagesObject.loadImages();
    }
  };
  var load_visible_images_then_rest_controller = {
    initLoadImages,
    loadImage,
    isInsideViewportHeight
  };

  // node_modules/underscore/modules/index.js
  var modules_exports = {};
  __export(modules_exports, {
    VERSION: () => VERSION,
    after: () => after,
    all: () => every,
    allKeys: () => allKeys,
    any: () => some,
    assign: () => extendOwn_default,
    before: () => before,
    bind: () => bind_default,
    bindAll: () => bindAll_default,
    chain: () => chain,
    chunk: () => chunk,
    clone: () => clone,
    collect: () => map3,
    compact: () => compact,
    compose: () => compose,
    constant: () => constant,
    contains: () => contains,
    countBy: () => countBy_default,
    create: () => create,
    debounce: () => debounce,
    default: () => underscore_array_methods_default,
    defaults: () => defaults_default,
    defer: () => defer_default,
    delay: () => delay_default,
    detect: () => find,
    difference: () => difference_default,
    drop: () => rest,
    each: () => each,
    escape: () => escape_default,
    every: () => every,
    extend: () => extend_default,
    extendOwn: () => extendOwn_default,
    filter: () => filter,
    find: () => find,
    findIndex: () => findIndex_default,
    findKey: () => findKey,
    findLastIndex: () => findLastIndex_default,
    findWhere: () => findWhere,
    first: () => first,
    flatten: () => flatten2,
    foldl: () => reduce_default,
    foldr: () => reduceRight_default,
    forEach: () => each,
    functions: () => functions,
    get: () => get,
    groupBy: () => groupBy_default,
    has: () => has2,
    head: () => first,
    identity: () => identity,
    include: () => contains,
    includes: () => contains,
    indexBy: () => indexBy_default,
    indexOf: () => indexOf_default,
    initial: () => initial,
    inject: () => reduce_default,
    intersection: () => intersection,
    invert: () => invert,
    invoke: () => invoke_default,
    isArguments: () => isArguments_default,
    isArray: () => isArray_default,
    isArrayBuffer: () => isArrayBuffer_default,
    isBoolean: () => isBoolean,
    isDataView: () => isDataView_default,
    isDate: () => isDate_default,
    isElement: () => isElement,
    isEmpty: () => isEmpty,
    isEqual: () => isEqual,
    isError: () => isError_default,
    isFinite: () => isFinite2,
    isFunction: () => isFunction_default,
    isMap: () => isMap_default,
    isMatch: () => isMatch,
    isNaN: () => isNaN2,
    isNull: () => isNull,
    isNumber: () => isNumber_default,
    isObject: () => isObject,
    isRegExp: () => isRegExp_default,
    isSet: () => isSet_default,
    isString: () => isString_default,
    isSymbol: () => isSymbol_default,
    isTypedArray: () => isTypedArray_default,
    isUndefined: () => isUndefined,
    isWeakMap: () => isWeakMap_default,
    isWeakSet: () => isWeakSet_default,
    iteratee: () => iteratee,
    keys: () => keys,
    last: () => last,
    lastIndexOf: () => lastIndexOf_default,
    map: () => map3,
    mapObject: () => mapObject,
    matcher: () => matcher,
    matches: () => matcher,
    max: () => max2,
    memoize: () => memoize,
    methods: () => functions,
    min: () => min,
    mixin: () => mixin,
    negate: () => negate,
    noop: () => noop,
    now: () => now_default,
    object: () => object,
    omit: () => omit_default,
    once: () => once_default,
    pairs: () => pairs,
    partial: () => partial_default,
    partition: () => partition_default,
    pick: () => pick_default,
    pluck: () => pluck,
    property: () => property,
    propertyOf: () => propertyOf,
    random: () => random,
    range: () => range,
    reduce: () => reduce_default,
    reduceRight: () => reduceRight_default,
    reject: () => reject,
    rest: () => rest,
    restArguments: () => restArguments,
    result: () => result,
    sample: () => sample,
    select: () => filter,
    shuffle: () => shuffle,
    size: () => size,
    some: () => some,
    sortBy: () => sortBy,
    sortedIndex: () => sortedIndex,
    tail: () => rest,
    take: () => first,
    tap: () => tap,
    template: () => template,
    templateSettings: () => templateSettings_default,
    throttle: () => throttle,
    times: () => times,
    toArray: () => toArray,
    toPath: () => toPath,
    transpose: () => unzip,
    unescape: () => unescape_default,
    union: () => union_default,
    uniq: () => uniq,
    unique: () => uniq,
    uniqueId: () => uniqueId,
    unzip: () => unzip,
    values: () => values,
    where: () => where,
    without: () => without_default,
    wrap: () => wrap,
    zip: () => zip_default
  });

  // node_modules/underscore/modules/_setup.js
  var VERSION = "1.13.6";
  var root = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || Function("return this")() || {};
  var ArrayProto = Array.prototype;
  var ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
  var push = ArrayProto.push;
  var slice = ArrayProto.slice;
  var toString = ObjProto.toString;
  var hasOwnProperty = ObjProto.hasOwnProperty;
  var supportsArrayBuffer = typeof ArrayBuffer !== "undefined";
  var supportsDataView = typeof DataView !== "undefined";
  var nativeIsArray = Array.isArray;
  var nativeKeys = Object.keys;
  var nativeCreate = Object.create;
  var nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
  var _isNaN = isNaN;
  var _isFinite = isFinite;
  var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
  var nonEnumerableProps = [
    "valueOf",
    "isPrototypeOf",
    "toString",
    "propertyIsEnumerable",
    "hasOwnProperty",
    "toLocaleString"
  ];
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

  // node_modules/underscore/modules/restArguments.js
  function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0), rest2 = Array(length), index = 0;
      for (; index < length; index++) {
        rest2[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0:
          return func.call(this, rest2);
        case 1:
          return func.call(this, arguments[0], rest2);
        case 2:
          return func.call(this, arguments[0], arguments[1], rest2);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest2;
      return func.apply(this, args);
    };
  }

  // node_modules/underscore/modules/isObject.js
  function isObject(obj2) {
    var type2 = typeof obj2;
    return type2 === "function" || type2 === "object" && !!obj2;
  }

  // node_modules/underscore/modules/isNull.js
  function isNull(obj2) {
    return obj2 === null;
  }

  // node_modules/underscore/modules/isUndefined.js
  function isUndefined(obj2) {
    return obj2 === void 0;
  }

  // node_modules/underscore/modules/isBoolean.js
  function isBoolean(obj2) {
    return obj2 === true || obj2 === false || toString.call(obj2) === "[object Boolean]";
  }

  // node_modules/underscore/modules/isElement.js
  function isElement(obj2) {
    return !!(obj2 && obj2.nodeType === 1);
  }

  // node_modules/underscore/modules/_tagTester.js
  function tagTester(name) {
    var tag = "[object " + name + "]";
    return function(obj2) {
      return toString.call(obj2) === tag;
    };
  }

  // node_modules/underscore/modules/isString.js
  var isString_default = tagTester("String");

  // node_modules/underscore/modules/isNumber.js
  var isNumber_default = tagTester("Number");

  // node_modules/underscore/modules/isDate.js
  var isDate_default = tagTester("Date");

  // node_modules/underscore/modules/isRegExp.js
  var isRegExp_default = tagTester("RegExp");

  // node_modules/underscore/modules/isError.js
  var isError_default = tagTester("Error");

  // node_modules/underscore/modules/isSymbol.js
  var isSymbol_default = tagTester("Symbol");

  // node_modules/underscore/modules/isArrayBuffer.js
  var isArrayBuffer_default = tagTester("ArrayBuffer");

  // node_modules/underscore/modules/isFunction.js
  var isFunction = tagTester("Function");
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
    isFunction = function(obj2) {
      return typeof obj2 == "function" || false;
    };
  }
  var isFunction_default = isFunction;

  // node_modules/underscore/modules/_hasObjectTag.js
  var hasObjectTag_default = tagTester("Object");

  // node_modules/underscore/modules/_stringTagBug.js
  var hasStringTagBug = supportsDataView && hasObjectTag_default(new DataView(new ArrayBuffer(8)));
  var isIE11 = typeof Map !== "undefined" && hasObjectTag_default(/* @__PURE__ */ new Map());

  // node_modules/underscore/modules/isDataView.js
  var isDataView = tagTester("DataView");
  function ie10IsDataView(obj2) {
    return obj2 != null && isFunction_default(obj2.getInt8) && isArrayBuffer_default(obj2.buffer);
  }
  var isDataView_default = hasStringTagBug ? ie10IsDataView : isDataView;

  // node_modules/underscore/modules/isArray.js
  var isArray_default = nativeIsArray || tagTester("Array");

  // node_modules/underscore/modules/_has.js
  function has(obj2, key) {
    return obj2 != null && hasOwnProperty.call(obj2, key);
  }

  // node_modules/underscore/modules/isArguments.js
  var isArguments = tagTester("Arguments");
  (function() {
    if (!isArguments(arguments)) {
      isArguments = function(obj2) {
        return has(obj2, "callee");
      };
    }
  })();
  var isArguments_default = isArguments;

  // node_modules/underscore/modules/isFinite.js
  function isFinite2(obj2) {
    return !isSymbol_default(obj2) && _isFinite(obj2) && !isNaN(parseFloat(obj2));
  }

  // node_modules/underscore/modules/isNaN.js
  function isNaN2(obj2) {
    return isNumber_default(obj2) && _isNaN(obj2);
  }

  // node_modules/underscore/modules/constant.js
  function constant(value) {
    return function() {
      return value;
    };
  }

  // node_modules/underscore/modules/_createSizePropertyCheck.js
  function createSizePropertyCheck(getSizeProperty) {
    return function(collection) {
      var sizeProperty = getSizeProperty(collection);
      return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
    };
  }

  // node_modules/underscore/modules/_shallowProperty.js
  function shallowProperty(key) {
    return function(obj2) {
      return obj2 == null ? void 0 : obj2[key];
    };
  }

  // node_modules/underscore/modules/_getByteLength.js
  var getByteLength_default = shallowProperty("byteLength");

  // node_modules/underscore/modules/_isBufferLike.js
  var isBufferLike_default = createSizePropertyCheck(getByteLength_default);

  // node_modules/underscore/modules/isTypedArray.js
  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
  function isTypedArray(obj2) {
    return nativeIsView ? nativeIsView(obj2) && !isDataView_default(obj2) : isBufferLike_default(obj2) && typedArrayPattern.test(toString.call(obj2));
  }
  var isTypedArray_default = supportsArrayBuffer ? isTypedArray : constant(false);

  // node_modules/underscore/modules/_getLength.js
  var getLength_default = shallowProperty("length");

  // node_modules/underscore/modules/_collectNonEnumProps.js
  function emulatedSet(keys2) {
    var hash = {};
    for (var l = keys2.length, i = 0; i < l; ++i)
      hash[keys2[i]] = true;
    return {
      contains: function(key) {
        return hash[key] === true;
      },
      push: function(key) {
        hash[key] = true;
        return keys2.push(key);
      }
    };
  }
  function collectNonEnumProps(obj2, keys2) {
    keys2 = emulatedSet(keys2);
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj2.constructor;
    var proto = isFunction_default(constructor) && constructor.prototype || ObjProto;
    var prop = "constructor";
    if (has(obj2, prop) && !keys2.contains(prop))
      keys2.push(prop);
    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj2 && obj2[prop] !== proto[prop] && !keys2.contains(prop)) {
        keys2.push(prop);
      }
    }
  }

  // node_modules/underscore/modules/keys.js
  function keys(obj2) {
    if (!isObject(obj2))
      return [];
    if (nativeKeys)
      return nativeKeys(obj2);
    var keys2 = [];
    for (var key in obj2)
      if (has(obj2, key))
        keys2.push(key);
    if (hasEnumBug)
      collectNonEnumProps(obj2, keys2);
    return keys2;
  }

  // node_modules/underscore/modules/isEmpty.js
  function isEmpty(obj2) {
    if (obj2 == null)
      return true;
    var length = getLength_default(obj2);
    if (typeof length == "number" && (isArray_default(obj2) || isString_default(obj2) || isArguments_default(obj2)))
      return length === 0;
    return getLength_default(keys(obj2)) === 0;
  }

  // node_modules/underscore/modules/isMatch.js
  function isMatch(object2, attrs) {
    var _keys = keys(attrs), length = _keys.length;
    if (object2 == null)
      return !length;
    var obj2 = Object(object2);
    for (var i = 0; i < length; i++) {
      var key = _keys[i];
      if (attrs[key] !== obj2[key] || !(key in obj2))
        return false;
    }
    return true;
  }

  // node_modules/underscore/modules/underscore.js
  function _2(obj2) {
    if (obj2 instanceof _2)
      return obj2;
    if (!(this instanceof _2))
      return new _2(obj2);
    this._wrapped = obj2;
  }
  _2.VERSION = VERSION;
  _2.prototype.value = function() {
    return this._wrapped;
  };
  _2.prototype.valueOf = _2.prototype.toJSON = _2.prototype.value;
  _2.prototype.toString = function() {
    return String(this._wrapped);
  };

  // node_modules/underscore/modules/_toBufferView.js
  function toBufferView(bufferSource) {
    return new Uint8Array(
      bufferSource.buffer || bufferSource,
      bufferSource.byteOffset || 0,
      getByteLength_default(bufferSource)
    );
  }

  // node_modules/underscore/modules/isEqual.js
  var tagDataView = "[object DataView]";
  function eq(a, b, aStack, bStack) {
    if (a === b)
      return a !== 0 || 1 / a === 1 / b;
    if (a == null || b == null)
      return false;
    if (a !== a)
      return b !== b;
    var type2 = typeof a;
    if (type2 !== "function" && type2 !== "object" && typeof b != "object")
      return false;
    return deepEq(a, b, aStack, bStack);
  }
  function deepEq(a, b, aStack, bStack) {
    if (a instanceof _2)
      a = a._wrapped;
    if (b instanceof _2)
      b = b._wrapped;
    var className = toString.call(a);
    if (className !== toString.call(b))
      return false;
    if (hasStringTagBug && className == "[object Object]" && isDataView_default(a)) {
      if (!isDataView_default(b))
        return false;
      className = tagDataView;
    }
    switch (className) {
      case "[object RegExp]":
      case "[object String]":
        return "" + a === "" + b;
      case "[object Number]":
        if (+a !== +a)
          return +b !== +b;
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case "[object Date]":
      case "[object Boolean]":
        return +a === +b;
      case "[object Symbol]":
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
      case "[object ArrayBuffer]":
      case tagDataView:
        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
    }
    var areArrays = className === "[object Array]";
    if (!areArrays && isTypedArray_default(a)) {
      var byteLength = getByteLength_default(a);
      if (byteLength !== getByteLength_default(b))
        return false;
      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset)
        return true;
      areArrays = true;
    }
    if (!areArrays) {
      if (typeof a != "object" || typeof b != "object")
        return false;
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(isFunction_default(aCtor) && aCtor instanceof aCtor && isFunction_default(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
        return false;
      }
    }
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      if (aStack[length] === a)
        return bStack[length] === b;
    }
    aStack.push(a);
    bStack.push(b);
    if (areArrays) {
      length = a.length;
      if (length !== b.length)
        return false;
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack))
          return false;
      }
    } else {
      var _keys = keys(a), key;
      length = _keys.length;
      if (keys(b).length !== length)
        return false;
      while (length--) {
        key = _keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack)))
          return false;
      }
    }
    aStack.pop();
    bStack.pop();
    return true;
  }
  function isEqual(a, b) {
    return eq(a, b);
  }

  // node_modules/underscore/modules/allKeys.js
  function allKeys(obj2) {
    if (!isObject(obj2))
      return [];
    var keys2 = [];
    for (var key in obj2)
      keys2.push(key);
    if (hasEnumBug)
      collectNonEnumProps(obj2, keys2);
    return keys2;
  }

  // node_modules/underscore/modules/_methodFingerprint.js
  function ie11fingerprint(methods) {
    var length = getLength_default(methods);
    return function(obj2) {
      if (obj2 == null)
        return false;
      var keys2 = allKeys(obj2);
      if (getLength_default(keys2))
        return false;
      for (var i = 0; i < length; i++) {
        if (!isFunction_default(obj2[methods[i]]))
          return false;
      }
      return methods !== weakMapMethods || !isFunction_default(obj2[forEachName]);
    };
  }
  var forEachName = "forEach";
  var hasName = "has";
  var commonInit = ["clear", "delete"];
  var mapTail = ["get", hasName, "set"];
  var mapMethods = commonInit.concat(forEachName, mapTail);
  var weakMapMethods = commonInit.concat(mapTail);
  var setMethods = ["add"].concat(commonInit, forEachName, hasName);

  // node_modules/underscore/modules/isMap.js
  var isMap_default = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");

  // node_modules/underscore/modules/isWeakMap.js
  var isWeakMap_default = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");

  // node_modules/underscore/modules/isSet.js
  var isSet_default = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");

  // node_modules/underscore/modules/isWeakSet.js
  var isWeakSet_default = tagTester("WeakSet");

  // node_modules/underscore/modules/values.js
  function values(obj2) {
    var _keys = keys(obj2);
    var length = _keys.length;
    var values2 = Array(length);
    for (var i = 0; i < length; i++) {
      values2[i] = obj2[_keys[i]];
    }
    return values2;
  }

  // node_modules/underscore/modules/pairs.js
  function pairs(obj2) {
    var _keys = keys(obj2);
    var length = _keys.length;
    var pairs2 = Array(length);
    for (var i = 0; i < length; i++) {
      pairs2[i] = [_keys[i], obj2[_keys[i]]];
    }
    return pairs2;
  }

  // node_modules/underscore/modules/invert.js
  function invert(obj2) {
    var result2 = {};
    var _keys = keys(obj2);
    for (var i = 0, length = _keys.length; i < length; i++) {
      result2[obj2[_keys[i]]] = _keys[i];
    }
    return result2;
  }

  // node_modules/underscore/modules/functions.js
  function functions(obj2) {
    var names = [];
    for (var key in obj2) {
      if (isFunction_default(obj2[key]))
        names.push(key);
    }
    return names.sort();
  }

  // node_modules/underscore/modules/_createAssigner.js
  function createAssigner(keysFunc, defaults) {
    return function(obj2) {
      var length = arguments.length;
      if (defaults)
        obj2 = Object(obj2);
      if (length < 2 || obj2 == null)
        return obj2;
      for (var index = 1; index < length; index++) {
        var source = arguments[index], keys2 = keysFunc(source), l = keys2.length;
        for (var i = 0; i < l; i++) {
          var key = keys2[i];
          if (!defaults || obj2[key] === void 0)
            obj2[key] = source[key];
        }
      }
      return obj2;
    };
  }

  // node_modules/underscore/modules/extend.js
  var extend_default = createAssigner(allKeys);

  // node_modules/underscore/modules/extendOwn.js
  var extendOwn_default = createAssigner(keys);

  // node_modules/underscore/modules/defaults.js
  var defaults_default = createAssigner(allKeys, true);

  // node_modules/underscore/modules/_baseCreate.js
  function ctor() {
    return function() {
    };
  }
  function baseCreate(prototype) {
    if (!isObject(prototype))
      return {};
    if (nativeCreate)
      return nativeCreate(prototype);
    var Ctor = ctor();
    Ctor.prototype = prototype;
    var result2 = new Ctor();
    Ctor.prototype = null;
    return result2;
  }

  // node_modules/underscore/modules/create.js
  function create(prototype, props) {
    var result2 = baseCreate(prototype);
    if (props)
      extendOwn_default(result2, props);
    return result2;
  }

  // node_modules/underscore/modules/clone.js
  function clone(obj2) {
    if (!isObject(obj2))
      return obj2;
    return isArray_default(obj2) ? obj2.slice() : extend_default({}, obj2);
  }

  // node_modules/underscore/modules/tap.js
  function tap(obj2, interceptor) {
    interceptor(obj2);
    return obj2;
  }

  // node_modules/underscore/modules/toPath.js
  function toPath(path) {
    return isArray_default(path) ? path : [path];
  }
  _2.toPath = toPath;

  // node_modules/underscore/modules/_toPath.js
  function toPath2(path) {
    return _2.toPath(path);
  }

  // node_modules/underscore/modules/_deepGet.js
  function deepGet(obj2, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj2 == null)
        return void 0;
      obj2 = obj2[path[i]];
    }
    return length ? obj2 : void 0;
  }

  // node_modules/underscore/modules/get.js
  function get(object2, path, defaultValue) {
    var value = deepGet(object2, toPath2(path));
    return isUndefined(value) ? defaultValue : value;
  }

  // node_modules/underscore/modules/has.js
  function has2(obj2, path) {
    path = toPath2(path);
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (!has(obj2, key))
        return false;
      obj2 = obj2[key];
    }
    return !!length;
  }

  // node_modules/underscore/modules/identity.js
  function identity(value) {
    return value;
  }

  // node_modules/underscore/modules/matcher.js
  function matcher(attrs) {
    attrs = extendOwn_default({}, attrs);
    return function(obj2) {
      return isMatch(obj2, attrs);
    };
  }

  // node_modules/underscore/modules/property.js
  function property(path) {
    path = toPath2(path);
    return function(obj2) {
      return deepGet(obj2, path);
    };
  }

  // node_modules/underscore/modules/_optimizeCb.js
  function optimizeCb(func, context, argCount) {
    if (context === void 0)
      return func;
    switch (argCount == null ? 3 : argCount) {
      case 1:
        return function(value) {
          return func.call(context, value);
        };
      case 3:
        return function(value, index, collection) {
          return func.call(context, value, index, collection);
        };
      case 4:
        return function(accumulator, value, index, collection) {
          return func.call(context, accumulator, value, index, collection);
        };
    }
    return function() {
      return func.apply(context, arguments);
    };
  }

  // node_modules/underscore/modules/_baseIteratee.js
  function baseIteratee(value, context, argCount) {
    if (value == null)
      return identity;
    if (isFunction_default(value))
      return optimizeCb(value, context, argCount);
    if (isObject(value) && !isArray_default(value))
      return matcher(value);
    return property(value);
  }

  // node_modules/underscore/modules/iteratee.js
  function iteratee(value, context) {
    return baseIteratee(value, context, Infinity);
  }
  _2.iteratee = iteratee;

  // node_modules/underscore/modules/_cb.js
  function cb(value, context, argCount) {
    if (_2.iteratee !== iteratee)
      return _2.iteratee(value, context);
    return baseIteratee(value, context, argCount);
  }

  // node_modules/underscore/modules/mapObject.js
  function mapObject(obj2, iteratee2, context) {
    iteratee2 = cb(iteratee2, context);
    var _keys = keys(obj2), length = _keys.length, results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = _keys[index];
      results[currentKey] = iteratee2(obj2[currentKey], currentKey, obj2);
    }
    return results;
  }

  // node_modules/underscore/modules/noop.js
  function noop() {
  }

  // node_modules/underscore/modules/propertyOf.js
  function propertyOf(obj2) {
    if (obj2 == null)
      return noop;
    return function(path) {
      return get(obj2, path);
    };
  }

  // node_modules/underscore/modules/times.js
  function times(n, iteratee2, context) {
    var accum = Array(Math.max(0, n));
    iteratee2 = optimizeCb(iteratee2, context, 1);
    for (var i = 0; i < n; i++)
      accum[i] = iteratee2(i);
    return accum;
  }

  // node_modules/underscore/modules/random.js
  function random(min2, max3) {
    if (max3 == null) {
      max3 = min2;
      min2 = 0;
    }
    return min2 + Math.floor(Math.random() * (max3 - min2 + 1));
  }

  // node_modules/underscore/modules/now.js
  var now_default = Date.now || function() {
    return (/* @__PURE__ */ new Date()).getTime();
  };

  // node_modules/underscore/modules/_createEscaper.js
  function createEscaper(map4) {
    var escaper = function(match) {
      return map4[match];
    };
    var source = "(?:" + keys(map4).join("|") + ")";
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, "g");
    return function(string) {
      string = string == null ? "" : "" + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  }

  // node_modules/underscore/modules/_escapeMap.js
  var escapeMap_default = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  // node_modules/underscore/modules/escape.js
  var escape_default = createEscaper(escapeMap_default);

  // node_modules/underscore/modules/_unescapeMap.js
  var unescapeMap_default = invert(escapeMap_default);

  // node_modules/underscore/modules/unescape.js
  var unescape_default = createEscaper(unescapeMap_default);

  // node_modules/underscore/modules/templateSettings.js
  var templateSettings_default = _2.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // node_modules/underscore/modules/template.js
  var noMatch = /(.)^/;
  var escapes = {
    "'": "'",
    "\\": "\\",
    "\r": "r",
    "\n": "n",
    "\u2028": "u2028",
    "\u2029": "u2029"
  };
  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
  function escapeChar(match) {
    return "\\" + escapes[match];
  }
  var bareIdentifier = /^\s*(\w|\$)+\s*$/;
  function template(text, settings, oldSettings) {
    if (!settings && oldSettings)
      settings = oldSettings;
    settings = defaults_default({}, settings, _2.templateSettings);
    var matcher2 = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join("|") + "|$", "g");
    var index = 0;
    var source = "__p+='";
    text.replace(matcher2, function(match, escape, interpolate, evaluate, offset2) {
      source += text.slice(index, offset2).replace(escapeRegExp, escapeChar);
      index = offset2 + match.length;
      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      return match;
    });
    source += "';\n";
    var argument = settings.variable;
    if (argument) {
      if (!bareIdentifier.test(argument))
        throw new Error(
          "variable is not a bare identifier: " + argument
        );
    } else {
      source = "with(obj||{}){\n" + source + "}\n";
      argument = "obj";
    }
    source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
    var render;
    try {
      render = new Function(argument, "_", source);
    } catch (e) {
      e.source = source;
      throw e;
    }
    var template2 = function(data) {
      return render.call(this, data, _2);
    };
    template2.source = "function(" + argument + "){\n" + source + "}";
    return template2;
  }

  // node_modules/underscore/modules/result.js
  function result(obj2, path, fallback) {
    path = toPath2(path);
    var length = path.length;
    if (!length) {
      return isFunction_default(fallback) ? fallback.call(obj2) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj2 == null ? void 0 : obj2[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length;
      }
      obj2 = isFunction_default(prop) ? prop.call(obj2) : prop;
    }
    return obj2;
  }

  // node_modules/underscore/modules/uniqueId.js
  var idCounter = 0;
  function uniqueId(prefix) {
    var id2 = ++idCounter + "";
    return prefix ? prefix + id2 : id2;
  }

  // node_modules/underscore/modules/chain.js
  function chain(obj2) {
    var instance = _2(obj2);
    instance._chain = true;
    return instance;
  }

  // node_modules/underscore/modules/_executeBound.js
  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc))
      return sourceFunc.apply(context, args);
    var self2 = baseCreate(sourceFunc.prototype);
    var result2 = sourceFunc.apply(self2, args);
    if (isObject(result2))
      return result2;
    return self2;
  }

  // node_modules/underscore/modules/partial.js
  var partial = restArguments(function(func, boundArgs) {
    var placeholder2 = partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder2 ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length)
        args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });
  partial.placeholder = _2;
  var partial_default = partial;

  // node_modules/underscore/modules/bind.js
  var bind_default = restArguments(function(func, context, args) {
    if (!isFunction_default(func))
      throw new TypeError("Bind must be called on a function");
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // node_modules/underscore/modules/_isArrayLike.js
  var isArrayLike_default = createSizePropertyCheck(getLength_default);

  // node_modules/underscore/modules/_flatten.js
  function flatten(input, depth, strict, output) {
    output = output || [];
    if (!depth && depth !== 0) {
      depth = Infinity;
    } else if (depth <= 0) {
      return output.concat(input);
    }
    var idx = output.length;
    for (var i = 0, length = getLength_default(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike_default(value) && (isArray_default(value) || isArguments_default(value))) {
        if (depth > 1) {
          flatten(value, depth - 1, strict, output);
          idx = output.length;
        } else {
          var j = 0, len = value.length;
          while (j < len)
            output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  }

  // node_modules/underscore/modules/bindAll.js
  var bindAll_default = restArguments(function(obj2, keys2) {
    keys2 = flatten(keys2, false, false);
    var index = keys2.length;
    if (index < 1)
      throw new Error("bindAll must be passed function names");
    while (index--) {
      var key = keys2[index];
      obj2[key] = bind_default(obj2[key], obj2);
    }
    return obj2;
  });

  // node_modules/underscore/modules/memoize.js
  function memoize(func, hasher) {
    var memoize2 = function(key) {
      var cache = memoize2.cache;
      var address = "" + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address))
        cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize2.cache = {};
    return memoize2;
  }

  // node_modules/underscore/modules/delay.js
  var delay_default = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // node_modules/underscore/modules/defer.js
  var defer_default = partial_default(delay_default, _2, 1);

  // node_modules/underscore/modules/throttle.js
  function throttle(func, wait, options) {
    var timeout, context, args, result2;
    var previous = 0;
    if (!options)
      options = {};
    var later = function() {
      previous = options.leading === false ? 0 : now_default();
      timeout = null;
      result2 = func.apply(context, args);
      if (!timeout)
        context = args = null;
    };
    var throttled = function() {
      var _now = now_default();
      if (!previous && options.leading === false)
        previous = _now;
      var remaining = wait - (_now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = _now;
        result2 = func.apply(context, args);
        if (!timeout)
          context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result2;
    };
    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };
    return throttled;
  }

  // node_modules/underscore/modules/debounce.js
  function debounce(func, wait, immediate) {
    var timeout, previous, args, result2, context;
    var later = function() {
      var passed = now_default() - previous;
      if (wait > passed) {
        timeout = setTimeout(later, wait - passed);
      } else {
        timeout = null;
        if (!immediate)
          result2 = func.apply(context, args);
        if (!timeout)
          args = context = null;
      }
    };
    var debounced = restArguments(function(_args) {
      context = this;
      args = _args;
      previous = now_default();
      if (!timeout) {
        timeout = setTimeout(later, wait);
        if (immediate)
          result2 = func.apply(context, args);
      }
      return result2;
    });
    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = args = context = null;
    };
    return debounced;
  }

  // node_modules/underscore/modules/wrap.js
  function wrap(func, wrapper) {
    return partial_default(wrapper, func);
  }

  // node_modules/underscore/modules/negate.js
  function negate(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }

  // node_modules/underscore/modules/compose.js
  function compose() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result2 = args[start].apply(this, arguments);
      while (i--)
        result2 = args[i].call(this, result2);
      return result2;
    };
  }

  // node_modules/underscore/modules/after.js
  function after(times2, func) {
    return function() {
      if (--times2 < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  // node_modules/underscore/modules/before.js
  function before(times2, func) {
    var memo;
    return function() {
      if (--times2 > 0) {
        memo = func.apply(this, arguments);
      }
      if (times2 <= 1)
        func = null;
      return memo;
    };
  }

  // node_modules/underscore/modules/once.js
  var once_default = partial_default(before, 2);

  // node_modules/underscore/modules/findKey.js
  function findKey(obj2, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = keys(obj2), key;
    for (var i = 0, length = _keys.length; i < length; i++) {
      key = _keys[i];
      if (predicate(obj2[key], key, obj2))
        return key;
    }
  }

  // node_modules/underscore/modules/_createPredicateIndexFinder.js
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength_default(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array))
          return index;
      }
      return -1;
    };
  }

  // node_modules/underscore/modules/findIndex.js
  var findIndex_default = createPredicateIndexFinder(1);

  // node_modules/underscore/modules/findLastIndex.js
  var findLastIndex_default = createPredicateIndexFinder(-1);

  // node_modules/underscore/modules/sortedIndex.js
  function sortedIndex(array, obj2, iteratee2, context) {
    iteratee2 = cb(iteratee2, context, 1);
    var value = iteratee2(obj2);
    var low = 0, high = getLength_default(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee2(array[mid]) < value)
        low = mid + 1;
      else
        high = mid;
    }
    return low;
  }

  // node_modules/underscore/modules/_createIndexFinder.js
  function createIndexFinder(dir, predicateFind, sortedIndex2) {
    return function(array, item, idx) {
      var i = 0, length = getLength_default(array);
      if (typeof idx == "number") {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex2 && idx && length) {
        idx = sortedIndex2(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), isNaN2);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item)
          return idx;
      }
      return -1;
    };
  }

  // node_modules/underscore/modules/indexOf.js
  var indexOf_default = createIndexFinder(1, findIndex_default, sortedIndex);

  // node_modules/underscore/modules/lastIndexOf.js
  var lastIndexOf_default = createIndexFinder(-1, findLastIndex_default);

  // node_modules/underscore/modules/find.js
  function find(obj2, predicate, context) {
    var keyFinder = isArrayLike_default(obj2) ? findIndex_default : findKey;
    var key = keyFinder(obj2, predicate, context);
    if (key !== void 0 && key !== -1)
      return obj2[key];
  }

  // node_modules/underscore/modules/findWhere.js
  function findWhere(obj2, attrs) {
    return find(obj2, matcher(attrs));
  }

  // node_modules/underscore/modules/each.js
  function each(obj2, iteratee2, context) {
    iteratee2 = optimizeCb(iteratee2, context);
    var i, length;
    if (isArrayLike_default(obj2)) {
      for (i = 0, length = obj2.length; i < length; i++) {
        iteratee2(obj2[i], i, obj2);
      }
    } else {
      var _keys = keys(obj2);
      for (i = 0, length = _keys.length; i < length; i++) {
        iteratee2(obj2[_keys[i]], _keys[i], obj2);
      }
    }
    return obj2;
  }

  // node_modules/underscore/modules/map.js
  function map3(obj2, iteratee2, context) {
    iteratee2 = cb(iteratee2, context);
    var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length, results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      results[index] = iteratee2(obj2[currentKey], currentKey, obj2);
    }
    return results;
  }

  // node_modules/underscore/modules/_createReduce.js
  function createReduce(dir) {
    var reducer = function(obj2, iteratee2, memo, initial2) {
      var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length, index = dir > 0 ? 0 : length - 1;
      if (!initial2) {
        memo = obj2[_keys ? _keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = _keys ? _keys[index] : index;
        memo = iteratee2(memo, obj2[currentKey], currentKey, obj2);
      }
      return memo;
    };
    return function(obj2, iteratee2, memo, context) {
      var initial2 = arguments.length >= 3;
      return reducer(obj2, optimizeCb(iteratee2, context, 4), memo, initial2);
    };
  }

  // node_modules/underscore/modules/reduce.js
  var reduce_default = createReduce(1);

  // node_modules/underscore/modules/reduceRight.js
  var reduceRight_default = createReduce(-1);

  // node_modules/underscore/modules/filter.js
  function filter(obj2, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    each(obj2, function(value, index, list) {
      if (predicate(value, index, list))
        results.push(value);
    });
    return results;
  }

  // node_modules/underscore/modules/reject.js
  function reject(obj2, predicate, context) {
    return filter(obj2, negate(cb(predicate)), context);
  }

  // node_modules/underscore/modules/every.js
  function every(obj2, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (!predicate(obj2[currentKey], currentKey, obj2))
        return false;
    }
    return true;
  }

  // node_modules/underscore/modules/some.js
  function some(obj2, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (predicate(obj2[currentKey], currentKey, obj2))
        return true;
    }
    return false;
  }

  // node_modules/underscore/modules/contains.js
  function contains(obj2, item, fromIndex, guard) {
    if (!isArrayLike_default(obj2))
      obj2 = values(obj2);
    if (typeof fromIndex != "number" || guard)
      fromIndex = 0;
    return indexOf_default(obj2, item, fromIndex) >= 0;
  }

  // node_modules/underscore/modules/invoke.js
  var invoke_default = restArguments(function(obj2, path, args) {
    var contextPath, func;
    if (isFunction_default(path)) {
      func = path;
    } else {
      path = toPath2(path);
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return map3(obj2, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null)
          return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // node_modules/underscore/modules/pluck.js
  function pluck(obj2, key) {
    return map3(obj2, property(key));
  }

  // node_modules/underscore/modules/where.js
  function where(obj2, attrs) {
    return filter(obj2, matcher(attrs));
  }

  // node_modules/underscore/modules/max.js
  function max2(obj2, iteratee2, context) {
    var result2 = -Infinity, lastComputed = -Infinity, value, computed;
    if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj2[0] != "object" && obj2 != null) {
      obj2 = isArrayLike_default(obj2) ? obj2 : values(obj2);
      for (var i = 0, length = obj2.length; i < length; i++) {
        value = obj2[i];
        if (value != null && value > result2) {
          result2 = value;
        }
      }
    } else {
      iteratee2 = cb(iteratee2, context);
      each(obj2, function(v, index, list) {
        computed = iteratee2(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result2 === -Infinity) {
          result2 = v;
          lastComputed = computed;
        }
      });
    }
    return result2;
  }

  // node_modules/underscore/modules/min.js
  function min(obj2, iteratee2, context) {
    var result2 = Infinity, lastComputed = Infinity, value, computed;
    if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj2[0] != "object" && obj2 != null) {
      obj2 = isArrayLike_default(obj2) ? obj2 : values(obj2);
      for (var i = 0, length = obj2.length; i < length; i++) {
        value = obj2[i];
        if (value != null && value < result2) {
          result2 = value;
        }
      }
    } else {
      iteratee2 = cb(iteratee2, context);
      each(obj2, function(v, index, list) {
        computed = iteratee2(v, index, list);
        if (computed < lastComputed || computed === Infinity && result2 === Infinity) {
          result2 = v;
          lastComputed = computed;
        }
      });
    }
    return result2;
  }

  // node_modules/underscore/modules/toArray.js
  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  function toArray(obj2) {
    if (!obj2)
      return [];
    if (isArray_default(obj2))
      return slice.call(obj2);
    if (isString_default(obj2)) {
      return obj2.match(reStrSymbol);
    }
    if (isArrayLike_default(obj2))
      return map3(obj2, identity);
    return values(obj2);
  }

  // node_modules/underscore/modules/sample.js
  function sample(obj2, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike_default(obj2))
        obj2 = values(obj2);
      return obj2[random(obj2.length - 1)];
    }
    var sample2 = toArray(obj2);
    var length = getLength_default(sample2);
    n = Math.max(Math.min(n, length), 0);
    var last2 = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = random(index, last2);
      var temp = sample2[index];
      sample2[index] = sample2[rand];
      sample2[rand] = temp;
    }
    return sample2.slice(0, n);
  }

  // node_modules/underscore/modules/shuffle.js
  function shuffle(obj2) {
    return sample(obj2, Infinity);
  }

  // node_modules/underscore/modules/sortBy.js
  function sortBy(obj2, iteratee2, context) {
    var index = 0;
    iteratee2 = cb(iteratee2, context);
    return pluck(map3(obj2, function(value, key, list) {
      return {
        value,
        index: index++,
        criteria: iteratee2(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0)
          return 1;
        if (a < b || b === void 0)
          return -1;
      }
      return left.index - right.index;
    }), "value");
  }

  // node_modules/underscore/modules/_group.js
  function group(behavior, partition) {
    return function(obj2, iteratee2, context) {
      var result2 = partition ? [[], []] : {};
      iteratee2 = cb(iteratee2, context);
      each(obj2, function(value, index) {
        var key = iteratee2(value, index, obj2);
        behavior(result2, value, key);
      });
      return result2;
    };
  }

  // node_modules/underscore/modules/groupBy.js
  var groupBy_default = group(function(result2, value, key) {
    if (has(result2, key))
      result2[key].push(value);
    else
      result2[key] = [value];
  });

  // node_modules/underscore/modules/indexBy.js
  var indexBy_default = group(function(result2, value, key) {
    result2[key] = value;
  });

  // node_modules/underscore/modules/countBy.js
  var countBy_default = group(function(result2, value, key) {
    if (has(result2, key))
      result2[key]++;
    else
      result2[key] = 1;
  });

  // node_modules/underscore/modules/partition.js
  var partition_default = group(function(result2, value, pass) {
    result2[pass ? 0 : 1].push(value);
  }, true);

  // node_modules/underscore/modules/size.js
  function size(obj2) {
    if (obj2 == null)
      return 0;
    return isArrayLike_default(obj2) ? obj2.length : keys(obj2).length;
  }

  // node_modules/underscore/modules/_keyInObj.js
  function keyInObj(value, key, obj2) {
    return key in obj2;
  }

  // node_modules/underscore/modules/pick.js
  var pick_default = restArguments(function(obj2, keys2) {
    var result2 = {}, iteratee2 = keys2[0];
    if (obj2 == null)
      return result2;
    if (isFunction_default(iteratee2)) {
      if (keys2.length > 1)
        iteratee2 = optimizeCb(iteratee2, keys2[1]);
      keys2 = allKeys(obj2);
    } else {
      iteratee2 = keyInObj;
      keys2 = flatten(keys2, false, false);
      obj2 = Object(obj2);
    }
    for (var i = 0, length = keys2.length; i < length; i++) {
      var key = keys2[i];
      var value = obj2[key];
      if (iteratee2(value, key, obj2))
        result2[key] = value;
    }
    return result2;
  });

  // node_modules/underscore/modules/omit.js
  var omit_default = restArguments(function(obj2, keys2) {
    var iteratee2 = keys2[0], context;
    if (isFunction_default(iteratee2)) {
      iteratee2 = negate(iteratee2);
      if (keys2.length > 1)
        context = keys2[1];
    } else {
      keys2 = map3(flatten(keys2, false, false), String);
      iteratee2 = function(value, key) {
        return !contains(keys2, key);
      };
    }
    return pick_default(obj2, iteratee2, context);
  });

  // node_modules/underscore/modules/initial.js
  function initial(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  }

  // node_modules/underscore/modules/first.js
  function first(array, n, guard) {
    if (array == null || array.length < 1)
      return n == null || guard ? void 0 : [];
    if (n == null || guard)
      return array[0];
    return initial(array, array.length - n);
  }

  // node_modules/underscore/modules/rest.js
  function rest(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  }

  // node_modules/underscore/modules/last.js
  function last(array, n, guard) {
    if (array == null || array.length < 1)
      return n == null || guard ? void 0 : [];
    if (n == null || guard)
      return array[array.length - 1];
    return rest(array, Math.max(0, array.length - n));
  }

  // node_modules/underscore/modules/compact.js
  function compact(array) {
    return filter(array, Boolean);
  }

  // node_modules/underscore/modules/flatten.js
  function flatten2(array, depth) {
    return flatten(array, depth, false);
  }

  // node_modules/underscore/modules/difference.js
  var difference_default = restArguments(function(array, rest2) {
    rest2 = flatten(rest2, true, true);
    return filter(array, function(value) {
      return !contains(rest2, value);
    });
  });

  // node_modules/underscore/modules/without.js
  var without_default = restArguments(function(array, otherArrays) {
    return difference_default(array, otherArrays);
  });

  // node_modules/underscore/modules/uniq.js
  function uniq(array, isSorted, iteratee2, context) {
    if (!isBoolean(isSorted)) {
      context = iteratee2;
      iteratee2 = isSorted;
      isSorted = false;
    }
    if (iteratee2 != null)
      iteratee2 = cb(iteratee2, context);
    var result2 = [];
    var seen = [];
    for (var i = 0, length = getLength_default(array); i < length; i++) {
      var value = array[i], computed = iteratee2 ? iteratee2(value, i, array) : value;
      if (isSorted && !iteratee2) {
        if (!i || seen !== computed)
          result2.push(value);
        seen = computed;
      } else if (iteratee2) {
        if (!contains(seen, computed)) {
          seen.push(computed);
          result2.push(value);
        }
      } else if (!contains(result2, value)) {
        result2.push(value);
      }
    }
    return result2;
  }

  // node_modules/underscore/modules/union.js
  var union_default = restArguments(function(arrays) {
    return uniq(flatten(arrays, true, true));
  });

  // node_modules/underscore/modules/intersection.js
  function intersection(array) {
    var result2 = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength_default(array); i < length; i++) {
      var item = array[i];
      if (contains(result2, item))
        continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!contains(arguments[j], item))
          break;
      }
      if (j === argsLength)
        result2.push(item);
    }
    return result2;
  }

  // node_modules/underscore/modules/unzip.js
  function unzip(array) {
    var length = array && max2(array, getLength_default).length || 0;
    var result2 = Array(length);
    for (var index = 0; index < length; index++) {
      result2[index] = pluck(array, index);
    }
    return result2;
  }

  // node_modules/underscore/modules/zip.js
  var zip_default = restArguments(unzip);

  // node_modules/underscore/modules/object.js
  function object(list, values2) {
    var result2 = {};
    for (var i = 0, length = getLength_default(list); i < length; i++) {
      if (values2) {
        result2[list[i]] = values2[i];
      } else {
        result2[list[i][0]] = list[i][1];
      }
    }
    return result2;
  }

  // node_modules/underscore/modules/range.js
  function range(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }
    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range2 = Array(length);
    for (var idx = 0; idx < length; idx++, start += step) {
      range2[idx] = start;
    }
    return range2;
  }

  // node_modules/underscore/modules/chunk.js
  function chunk(array, count) {
    if (count == null || count < 1)
      return [];
    var result2 = [];
    var i = 0, length = array.length;
    while (i < length) {
      result2.push(slice.call(array, i, i += count));
    }
    return result2;
  }

  // node_modules/underscore/modules/_chainResult.js
  function chainResult(instance, obj2) {
    return instance._chain ? _2(obj2).chain() : obj2;
  }

  // node_modules/underscore/modules/mixin.js
  function mixin(obj2) {
    each(functions(obj2), function(name) {
      var func = _2[name] = obj2[name];
      _2.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_2, args));
      };
    });
    return _2;
  }

  // node_modules/underscore/modules/underscore-array-methods.js
  each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
    var method = ArrayProto[name];
    _2.prototype[name] = function() {
      var obj2 = this._wrapped;
      if (obj2 != null) {
        method.apply(obj2, arguments);
        if ((name === "shift" || name === "splice") && obj2.length === 0) {
          delete obj2[0];
        }
      }
      return chainResult(this, obj2);
    };
  });
  each(["concat", "join", "slice"], function(name) {
    var method = ArrayProto[name];
    _2.prototype[name] = function() {
      var obj2 = this._wrapped;
      if (obj2 != null)
        obj2 = method.apply(obj2, arguments);
      return chainResult(this, obj2);
    };
  });
  var underscore_array_methods_default = _2;

  // node_modules/underscore/modules/index-default.js
  var _3 = mixin(modules_exports);
  _3._ = _3;
  var index_default_default = _3;

  // lay/frontend/assets/src/js/app/frontend/element/thumbnailgrid_controller.js
  var $grids;
  var eventsChannel8 = Backbone.Radio.channel("events");
  var onResize = function() {
    if (typeof $grids != "undefined") {
      $grids.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        sizeLayout($el, config);
      });
    }
  };
  var sizeLayout = function($el, config) {
    var currentDevice = Utility.screenSize;
    var colGutter = config[currentDevice].colGutter;
    var colCount = config[currentDevice].colCount;
    var rowGutterMu = typeof config[currentDevice].rowGutterMu === "undefined" ? "%" : config[currentDevice].rowGutterMu;
    var colGutterMu = typeof config[currentDevice].colGutterMu === "undefined" ? "%" : config[currentDevice].colGutterMu;
    var gutter_diff = (1 - 1 / colCount) * config[currentDevice].colGutter;
    var width = "calc( 100% / " + colCount + " - " + gutter_diff + colGutterMu + ")";
    $el.find(".thumbnail-wrap").css({
      width,
      "margin-bottom": config[currentDevice].rowGutter + rowGutterMu
    });
    var layoutType = config.layoutType;
    switch (layoutType) {
      case "masonry":
        $el.find(".lay-thumbnailgrid-gutter-sizer").css("width", colGutter + colGutterMu);
        $el.find(".lay-thumbnailgrid-col-sizer").css("width", width);
        var masonry = $el.data("masonry");
        if (typeof masonry != "undefined") {
          masonry.layout();
        }
        break;
      default:
        $el.find(".thumbnail-wrap").css("margin-right", colGutter + colGutterMu);
        $el.find(".thumbnail-wrap:nth-child(" + colCount + "n)").css("margin-right", 0);
        break;
    }
  };
  var initLayoutType = function($el, config) {
    var currentDevice = Utility.screenSize;
    switch (config.layoutType) {
      case "masonry":
        $el.find(".thumb-collection").append('<div class="lay-thumbnailgrid-gutter-sizer"></div><div class="lay-thumbnailgrid-col-sizer"></div>');
        var elem = $el.find(".thumb-collection")[0];
        var gutter = ".lay-thumbnailgrid-gutter-sizer";
        var colGutterMu = typeof config[currentDevice].colGutterMu === "undefined" ? "%" : config[currentDevice].colGutterMu;
        if (colGutterMu === "px") {
          gutter = config[currentDevice].colGutter;
        }
        var masonry = new Masonry(elem, {
          // options
          itemSelector: ".thumbnail-wrap",
          columnWidth: ".lay-thumbnailgrid-col-sizer",
          gutter,
          percentPosition: true,
          transitionDuration: 0
        });
        masonry.once("layoutComplete", function() {
          $el.closest(".col").addClass("masonry-initialized");
        });
        $el.data("masonry", masonry);
        break;
      default:
        var $thumbnails = $el.find(".thumbnail-wrap:visible");
        var $thumbs = $el.find(".thumbnailgrid-row .thumbnail-wrap");
        if ($thumbs.length > 0) {
          $thumbs.unwrap();
        }
        var colCount = config[currentDevice].colCount;
        for (var i = 0; i < $thumbnails.length; i += colCount) {
          $thumbnails.slice(i, i + colCount).wrapAll('<div class="thumbnailgrid-row ' + config.layoutType + '"></div>');
        }
        break;
    }
  };
  var initModule15 = function() {
    bindEventsToInitGrids();
    jQuery(window).on("window_width_changed", onResize);
    bindOnContentReady3();
    bindOnHashChange2();
  };
  var handleHashChange = function() {
    var hash = window.location.hash;
    if ($target3 != void 0) {
      var $grids5 = $target3.find(".thumbs-collection-region.use-filter");
      if ($grids5.length > 0) {
        $grids5.each(function() {
          var $grid = jQuery(this);
          deselectTags($grid);
          var cat_id;
          var thumbnails_show_hide_data = [];
          if (hash.startsWith("#category-")) {
            var slug2 = hash.substr(10);
            var $filter = jQuery('[data-slug="' + slug2 + '"]');
            if ($filter.length > 0) {
              cat_id = $filter.attr("data-id");
              thumbnails_show_hide_data = get_thumbnails_show_hide_data($grid);
              filterContent($grid, cat_id, true, thumbnails_show_hide_data);
            }
          } else if (hash == "") {
            var $filter = jQuery(".lay-filter-default");
            if ($filter.length > 0) {
              cat_id = $filter.attr("data-id");
              thumbnails_show_hide_data = get_thumbnails_show_hide_data($grid);
              filterContent($grid, cat_id, true, thumbnails_show_hide_data);
            }
          }
          showHideTagBubbles($grid, cat_id, thumbnails_show_hide_data);
        });
      }
    }
  };
  var bindOnHashChange2 = function() {
    jQuery(window).on("hashchange", handleHashChange);
  };
  var showHideTagBubbles = function($grid, cat_id, thumbnails_show_hide_data) {
    var config = $grid.data("config");
    var showCatFilter = false;
    if (config != false && index_default_default.has(config, "showfilter")) {
      showCatFilter = config.showfilter;
    }
    var tagFilterBehaviour = "OR";
    if (config != false && index_default_default.has(config, "tagFilterBehaviour")) {
      tagFilterBehaviour = config.tagFilterBehaviour;
    }
    var showtagfilter = false;
    if (config != false && index_default_default.has(config, "showtagfilter")) {
      showtagfilter = config.showtagfilter;
    }
    var all_available_tag_ids_for_current_cat = [];
    if (showCatFilter == true) {
      $grid.find('.thumbnail-wrap[data-filterid="' + cat_id + '"]').each(function() {
        var thumbnail_tag_ids_string = jQuery(this).attr("data-tags");
        var thumbnail_tag_ids = utility_controller.parseIdsString(thumbnail_tag_ids_string);
        for (var index2 = 0; index2 < thumbnail_tag_ids.length; index2++) {
          var id2 = thumbnail_tag_ids[index2];
          if (all_available_tag_ids_for_current_cat.indexOf(id2) == -1) {
            all_available_tag_ids_for_current_cat.push(id2);
          }
        }
      });
    } else if (showtagfilter == true && showCatFilter == false) {
      $grid.find(".thumbnail-wrap").each(function() {
        var thumbnail_tag_ids_string = jQuery(this).attr("data-tags");
        var thumbnail_tag_ids = utility_controller.parseIdsString(thumbnail_tag_ids_string);
        for (var index2 = 0; index2 < thumbnail_tag_ids.length; index2++) {
          var id2 = thumbnail_tag_ids[index2];
          if (all_available_tag_ids_for_current_cat.indexOf(id2) == -1) {
            all_available_tag_ids_for_current_cat.push(id2);
          }
        }
      });
      $grid.find(".tag-bubble:not(.deselect-tags)").each(function() {
        var tag_id2 = parseInt(jQuery(this).attr("data-tag_id"), 10);
        if (all_available_tag_ids_for_current_cat.indexOf(tag_id2) == -1) {
          jQuery(this).remove();
        }
      });
    }
    var $activeBubbles = $grid.find(".tag-bubble.lay-tag-active");
    if ($activeBubbles.length > 0) {
      $grid.find(".deselect-tags").css("display", "").removeClass("lay-filter-hidden");
    } else {
      $grid.find(".deselect-tags").addClass("lay-filter-hidden");
    }
    switch (tagFilterBehaviour) {
      case "AND":
        var $activeBubbles = $grid.find(".tag-bubble.lay-tag-active");
        if ($activeBubbles.length > 0) {
          var activeTagIds = [];
          $activeBubbles.each(function() {
            activeTagIds.push(parseInt(jQuery(this).attr("data-tag_id"), 10));
          });
          var tagIdsOfCurrentlyFilteredThumbnails = [];
          for (var index = 0; index < thumbnails_show_hide_data.length; index++) {
            var obj2 = thumbnails_show_hide_data[index];
            if (obj2.show == true) {
              tagIdsOfCurrentlyFilteredThumbnails = index_default_default.union(obj2.ids, tagIdsOfCurrentlyFilteredThumbnails);
            }
          }
          for (var index = 0; index < all_available_tag_ids_for_current_cat.length; index++) {
            var tag_id = all_available_tag_ids_for_current_cat[index];
            if (activeTagIds.length > 0 && index_default_default.intersection(activeTagIds, tagIdsOfCurrentlyFilteredThumbnails).length > 0 && tagIdsOfCurrentlyFilteredThumbnails.indexOf(tag_id) != -1) {
              $grid.find('.tag-bubble[data-tag_id="' + tag_id + '"]').css("display", "");
            } else {
              $grid.find('.tag-bubble[data-tag_id="' + tag_id + '"]').css("display", "none");
            }
          }
        } else {
          $grid.find(".tag-bubble:not(.deselect-tags)").css("display", "none");
          for (var index = 0; index < all_available_tag_ids_for_current_cat.length; index++) {
            var tag_id = all_available_tag_ids_for_current_cat[index];
            $grid.find('.tag-bubble[data-tag_id="' + tag_id + '"]').css("display", "");
          }
        }
        break;
      case "OR":
      default:
        if (showCatFilter) {
          $grid.find(".tag-bubble:not(.deselect-tags)").css("display", "none");
          for (var index = 0; index < all_available_tag_ids_for_current_cat.length; index++) {
            var tag_id = all_available_tag_ids_for_current_cat[index];
            $grid.find('.tag-bubble[data-tag_id="' + tag_id + '"]').css("display", "");
          }
        }
        break;
    }
  };
  var deselectTags = function($grid, $tag_bubble) {
    var $tags_wrap = $grid.find(".lay-thumbnailgrid-tagfilter");
    if ($tag_bubble != void 0 && $tag_bubble != false && $tag_bubble.length > 0) {
      $tag_bubble.removeClass("lay-tag-active");
    } else {
      $grid.find(".tag-bubble").removeClass("lay-tag-active");
    }
    var $bubbles = $tags_wrap.find(".tag-bubble");
    var itemsArr = [];
    $bubbles.each(function() {
      if (!jQuery(this).hasClass("lay-tag-active")) {
        var ix = jQuery(this).attr("data-ix");
        itemsArr.push([this, ix]);
      }
    });
    itemsArr.sort(function(a, b) {
      return a[1] == b[1] ? 0 : a[1] > b[1] ? 1 : -1;
    });
    var markup = "";
    if ($tags_wrap.find(".deselect-tags").length > 0) {
      markup += $tags_wrap.find(".deselect-tags")[0].outerHTML;
    }
    $tags_wrap.find(".lay-tag-active").each(function() {
      markup += this.outerHTML;
    });
    for (var index = 0; index < itemsArr.length; index++) {
      if (!itemsArr[index][0].classList.contains("deselect-tags")) {
        markup += itemsArr[index][0].outerHTML;
      }
    }
    $tags_wrap.html(markup);
  };
  var $target3 = void 0;
  var bindOnContentReady3 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target3 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target3 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target3 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target3 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target3 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      var $grids5 = $target3.find(".thumbs-collection-region");
      if ($grids5.length > 0) {
        $grids5.each(function() {
          var $grid = jQuery(this);
          var config = $grid.data("config");
          var cat_id = false;
          initLayoutType($grid, config);
          sizeLayout($grid, config);
          var hash = window.location.hash;
          if (hash.startsWith("#category-") && jQuery(this).hasClass("use-filter")) {
            var slug2 = hash.substring(10);
            var $filter = jQuery(this).find('[data-slug="' + slug2 + '"]');
            if ($filter.length > 0) {
              cat_id = $filter.attr("data-id");
              var thumbnails_show_hide_data = get_thumbnails_show_hide_data($grid);
              filterContent($grid, cat_id, false, thumbnails_show_hide_data);
            }
          } else {
            cat_id = config.cat_id;
            limitThumbnails($grid, config);
          }
          showHideTagBubbles($grid, cat_id, thumbnails_show_hide_data);
          bindFilterClick($grid);
          bindTagFilterClick($grid);
          bindClearAllTagsClick($grid);
          $grid.addClass("initialized");
        });
      }
      $grids5.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        initLayoutType($el, config);
        sizeLayout($el, config);
        jQuery(this).addClass("sized");
      });
      lazySizes.autoSizer.checkElems();
      utility_controller.setImageSizesAttribute($grids5);
    });
  };
  var limitThumbnails = function($grid, config) {
    if ($grid.hasClass("use-filter") || $grid.hasClass("use-tags-filter")) {
      if (index_default_default.has(config, "limitThumbnails") && config.limitThumbnails > 0) {
        let index2 = 0;
        let hasBeenFiltered = $grid.find(".show-filtered").length > 0;
        $grid.find(".thumbnail-wrap").each(function() {
          if (jQuery(this).hasClass("show-filtered") || !hasBeenFiltered) {
            index2++;
            if (index2 > config.limitThumbnails) {
              jQuery(this).addClass("hide-because-limit");
            } else {
              jQuery(this).removeClass("hide-because-limit");
            }
          }
        });
      }
    }
  };
  var bindClearAllTagsClick = function($grid) {
    $grid.off("click", ".deselect-tags");
    $grid.on("click", ".deselect-tags", function(e) {
      jQuery(this).addClass("lay-filter-hidden");
      var $grid2 = jQuery(e.delegateTarget);
      deselectTags($grid2);
      var $active = $grid2.find(".lay-thumbnailgrid-filter-anchor.lay-filter-active");
      var cat_id = false;
      if ($active.length > 0) {
        cat_id = parseInt($grid2.find(".lay-thumbnailgrid-filter-anchor.lay-filter-active").attr("data-id"), 10);
      }
      var thumbnails_show_hide_data = get_thumbnails_show_hide_data($grid2);
      filterContent($grid2, cat_id, true, thumbnails_show_hide_data);
      var config = $grid2.data("config");
      var tagFilterBehaviour = "OR";
      if (config != false && index_default_default.has(config, "tagFilterBehaviour")) {
        tagFilterBehaviour = config.tagFilterBehaviour;
        tagFilterBehaviour = tagFilterBehaviour.toUpperCase();
      }
      if (tagFilterBehaviour == "AND") {
        showHideTagBubbles($grid2, cat_id, thumbnails_show_hide_data);
      }
    });
  };
  var bindTagFilterClick = function($grid) {
    $grid.off("click", ".tag-bubble:not(.deselect-tags)");
    $grid.on("click", ".tag-bubble:not(.deselect-tags)", function(e) {
      var $grid2 = jQuery(e.delegateTarget);
      var $tag_bubble = jQuery(this);
      var $tags_wrap = $grid2.find(".lay-thumbnailgrid-tagfilter");
      if (!$tag_bubble.hasClass("lay-tag-active")) {
        var $last_active_tag = $tags_wrap.find(".lay-tag-active").last();
        if ($last_active_tag.length > 0) {
          $tag_bubble.insertAfter($last_active_tag);
        } else {
          if ($grid2.find(".deselect-tags").length > 0) {
            $tag_bubble.insertAfter($grid2.find(".deselect-tags"));
          } else {
            $tags_wrap.prepend($tag_bubble);
          }
        }
        $tag_bubble.addClass("lay-tag-active");
      } else {
        deselectTags($grid2, $tag_bubble);
      }
      var $active = $grid2.find(".lay-thumbnailgrid-filter-anchor.lay-filter-active");
      var cat_id = false;
      if ($active.length > 0) {
        cat_id = parseInt($grid2.find(".lay-thumbnailgrid-filter-anchor.lay-filter-active").attr("data-id"), 10);
      }
      var thumbnails_show_hide_data = get_thumbnails_show_hide_data($grid2);
      filterContent($grid2, cat_id, true, thumbnails_show_hide_data);
      showHideTagBubbles($grid2, cat_id, thumbnails_show_hide_data);
    });
  };
  var bindFilterClick = function($grid) {
    $grid.off("click", ".lay-thumbnailgrid-filter-anchor");
    $grid.on("click", ".lay-thumbnailgrid-filter-anchor", function(e) {
      if (!jQuery(this).hasClass("lay-filter-active")) {
        var slug2 = jQuery(this).attr("data-slug");
        window.location.hash = "category-" + slug2;
      } else if (jQuery(e.delegateTarget).find(".lay-tag-active").length > 0) {
        handleHashChange();
      }
    });
  };
  var filterContent = function($grid, cat_id, animate2 = true, thumbnails_show_hide_data = []) {
    $grid.find(".lay-filter-active").removeClass("lay-filter-active");
    if (cat_id !== false) {
      jQuery('.lay-thumbnailgrid-filter-anchor[data-id="' + cat_id + '"]').addClass("lay-filter-active");
    }
    var $thumbs = $grid.find(".thumbnail-wrap");
    var config = $grid.data("config");
    if (frontendPassedData.tgf_transition == "fade_out_fade_in" && animate2) {
      $grid.addClass("lay-disable-click lay-transition");
      $grid.find(".thumb-collection").css("opacity", 0);
      setTimeout(function() {
        showHideThumbnails(thumbnails_show_hide_data);
        limitThumbnails($grid, config);
        switch (config.layoutType) {
          case "masonry":
            sizeLayout($grid, config);
            break;
          default:
            initLayoutType($grid, config);
            sizeLayout($grid, config);
            break;
        }
        utility_controller.setImageSizesAttribute($grid);
        waitUntilInviewImagesHaveLoaded($thumbs, function() {
          $grid.find(".thumb-collection").css("opacity", 1);
          setTimeout(function() {
            $grid.removeClass("lay-disable-click lay-transition");
          }, 500);
        });
        eventsChannel8.trigger("thumbnailGridWasFiltered");
      }, 500);
    } else if (frontendPassedData.tgf_transition == "fade_out_fade_in_2" && animate2) {
      $grid.addClass("lay-disable-click");
      $thumbs.css("transitionDelay", "0ms");
      $thumbs.removeClass("in-view").addClass("below");
      setTimeout(function() {
        showHideThumbnails(thumbnails_show_hide_data);
        limitThumbnails($grid, config);
        switch (config.layoutType) {
          case "masonry":
            sizeLayout($grid, config);
            break;
          default:
            initLayoutType($grid, config);
            sizeLayout($grid, config);
            break;
        }
        utility_controller.setImageSizesAttribute($grid);
        waitUntilInviewImagesHaveLoaded($thumbs, function() {
          var ix = 0;
          $thumbs.each(function() {
            var $thumb = jQuery(this);
            if ($thumb.css("display") == "block") {
              $thumb[0].style.transitionDelay = ix * 100 + "ms";
              ix++;
              $thumb.removeClass("below").addClass("in-view");
            } else {
              $thumb.removeClass("below in-view");
            }
          });
          $grid.removeClass("lay-disable-click");
        });
        eventsChannel8.trigger("thumbnailGridWasFiltered");
      }, 550);
    } else {
      showHideThumbnails(thumbnails_show_hide_data);
      limitThumbnails($grid, config);
      switch (config.layoutType) {
        case "masonry":
          sizeLayout($grid, config);
          break;
        default:
          initLayoutType($grid, config);
          sizeLayout($grid, config);
          break;
      }
      utility_controller.setImageSizesAttribute($grid);
      eventsChannel8.trigger("thumbnailGridWasFiltered");
    }
  };
  var get_thumbnails_show_hide_data = function($grid) {
    var hash = window.location.hash;
    var cat_id = false;
    if (hash.startsWith("#category-")) {
      var slug2 = hash.substr(10);
      var $filter = jQuery('[data-slug="' + slug2 + '"]');
      if ($filter.length > 0) {
        cat_id = $filter.attr("data-id");
      }
    } else if (hash == "") {
      var $filter = jQuery(".lay-filter-default");
      if ($filter.length > 0) {
        cat_id = $filter.attr("data-id");
      }
    }
    var tag_ids_to_filter_for = [];
    $grid.find(".tag-bubble.lay-tag-active").each(function() {
      var tag_id = parseInt(jQuery(this).attr("data-tag_id"), 10);
      tag_ids_to_filter_for.push(tag_id);
    });
    var $thumbs = $grid.find(".thumbnail-wrap");
    var config = $grid.data("config");
    var data = [];
    var tagFilterBehaviour = "OR";
    if (config != false && index_default_default.has(config, "tagFilterBehaviour")) {
      tagFilterBehaviour = config.tagFilterBehaviour;
      tagFilterBehaviour = tagFilterBehaviour.toUpperCase();
    }
    $thumbs.each(function() {
      var $thumb = jQuery(this);
      var thumbnail_tag_ids_string = $thumb.attr("data-tags");
      var thumbnail_tag_ids = utility_controller.parseIdsString(thumbnail_tag_ids_string);
      var resultObj = {
        show: false,
        $el: $thumb,
        ids: thumbnail_tag_ids
      };
      var tagIntersection = false;
      switch (tagFilterBehaviour) {
        case "AND":
          tagIntersection = index_default_default.intersection(thumbnail_tag_ids, tag_ids_to_filter_for).length == tag_ids_to_filter_for.length;
          break;
        case "OR":
        default:
          tagIntersection = index_default_default.intersection(thumbnail_tag_ids, tag_ids_to_filter_for).length > 0;
          break;
      }
      if (tag_ids_to_filter_for.length == 0 && cat_id !== false && parseInt($thumb.attr("data-filterid"), 10) == cat_id) {
        resultObj.show = true;
      } else if (tag_ids_to_filter_for.length > 0 && tagIntersection && cat_id !== false && parseInt($thumb.attr("data-filterid"), 10) == cat_id) {
        resultObj.show = true;
      } else if (tag_ids_to_filter_for.length > 0 && tagIntersection && cat_id === false) {
        resultObj.show = true;
      } else if (cat_id === false && tag_ids_to_filter_for.length == 0) {
        resultObj.show = true;
      } else {
        resultObj.show = false;
      }
      data.push(resultObj);
    });
    return data;
  };
  var showHideThumbnails = function(thumbnails_show_hide_data) {
    for (var index = 0; index < thumbnails_show_hide_data.length; index++) {
      var obj2 = thumbnails_show_hide_data[index];
      if (obj2.show == true) {
        obj2.$el.css("display", "block").addClass("show-filtered").removeClass("hide-filtered");
      } else {
        obj2.$el.css("display", "none").addClass("hide-filtered").removeClass("show-filtered");
      }
    }
  };
  var arrayElIsTrue4 = function(element, index, array) {
    return element == true;
  };
  var waitUntilInviewImagesHaveLoaded = function($thumbs, callback2) {
    var imagesInViewport = [];
    var imagesInViewportHaveLoaded = [];
    $thumbs.find("img").each(function() {
      if (load_visible_images_then_rest_controller.isInsideViewportHeight(this, 90)) {
        imagesInViewport.push(this);
        imagesInViewportHaveLoaded.push(false);
      }
    });
    for (var i = 0; i < imagesInViewport.length; i++) {
      ;
      (function(index) {
        var $img = jQuery(imagesInViewport[index]);
        if ($img.hasClass("loaded") || $img.hasClass("lazyloaded")) {
          imagesInViewportHaveLoaded[index] = true;
        } else {
          var observer = new MutationObserver(() => {
            if ($img.hasClass("loaded") || $img.hasClass("lazyloaded")) {
              imagesInViewportHaveLoaded[index] = true;
            }
          });
          observer.observe($img[0], { attributes: true, attributeFilter: ["class"] });
        }
      })(i);
    }
    if (imagesInViewport.length > 0) {
      var interval = setInterval(function() {
        if (imagesInViewportHaveLoaded.every(arrayElIsTrue4)) {
          callback2();
          clearInterval(interval);
        }
      }, 30);
    } else {
      callback2();
    }
  };
  var bindEventsToInitGrids = function() {
    window.laytheme.on("searchresultshown", function() {
      $grids = jQuery(".thumbs-collection-region");
      $grids.each(function() {
        if (!jQuery(this).hasClass("initialized")) {
          var $el = jQuery(this);
          var config = $el.data("config");
          initLayoutType($el, config);
          sizeLayout($el, config);
          jQuery(this).addClass("initialized sized");
          if (config.layoutType == "masonry") {
            $el.closest(".col").addClass("masonry-initialized");
          }
        }
      });
    });
  };
  var thumbnailgrid_controller = {
    initModule: initModule15
  };
  var thumbnailgrid_controller_default = thumbnailgrid_controller;

  // lay/frontend/assets/src/js/app/frontend/element/elementgrid_controller.js
  var $grids2;
  var onResize2 = function() {
    if (typeof $grids2 != "undefined") {
      $grids2.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        sizeLayout2($el, config);
      });
    }
  };
  var sizeLayout2 = function($el, config) {
    var currentDevice = Utility.screenSize;
    var colGutter = config[currentDevice].colGutter;
    var colCount = config[currentDevice].colCount;
    var rowGutterMu = typeof config[currentDevice].rowGutterMu === "undefined" ? "%" : config[currentDevice].rowGutterMu;
    var colGutterMu = typeof config[currentDevice].colGutterMu === "undefined" ? "%" : config[currentDevice].colGutterMu;
    var gutter_diff = (1 - 1 / colCount) * config[currentDevice].colGutter;
    var width = "calc( 100% / " + colCount + " - " + gutter_diff + colGutterMu + ")";
    $el.find(".element-wrap").css({
      "width": width,
      "margin-bottom": config[currentDevice].rowGutter + rowGutterMu
    });
    var layoutType = config.layoutType;
    switch (layoutType) {
      case "masonry":
        $el.find(".lay-elementgrid-gutter-sizer").css("width", colGutter + colGutterMu);
        $el.find(".lay-elementgrid-col-sizer").css("width", width);
        initLayoutType2($el, config);
        break;
      default:
        $el.find(".element-wrap").css("margin-right", colGutter + colGutterMu);
        $el.find(".element-wrap:nth-child(" + colCount + "n)").css("margin-right", 0);
        break;
    }
  };
  var initLayoutType2 = function($el, config) {
    var currentDevice = Utility.screenSize;
    switch (config.layoutType) {
      case "masonry":
        if ($el.find(".lay-elementgrid-gutter-sizer").length == 0) {
          $el.find(".element-collection").append('<div class="lay-elementgrid-gutter-sizer"></div><div class="lay-elementgrid-col-sizer"></div>');
        }
        var elem = $el.find(".element-collection")[0];
        var gutter = ".lay-elementgrid-gutter-sizer";
        var colGutterMu = typeof config[currentDevice].colGutterMu === "undefined" ? "%" : config[currentDevice].colGutterMu;
        if (colGutterMu === "px") {
          gutter = config[currentDevice].colGutter;
        }
        var masonry = new Masonry(elem, {
          // options
          itemSelector: ".element-wrap",
          columnWidth: ".lay-elementgrid-col-sizer",
          gutter,
          percentPosition: true,
          transitionDuration: 0
        });
        masonry.once("layoutComplete", function() {
          $el.closest(".col").addClass("masonry-initialized");
        });
        $el.data("masonry", masonry);
        break;
      default:
        var $thumbnails = $el.find(".element-wrap");
        var $thumbs = $el.find(".elementgrid-row .element-wrap");
        if ($thumbs.length > 0) {
          $thumbs.unwrap();
        }
        var colCount = config[currentDevice].colCount;
        for (var i = 0; i < $thumbnails.length; i += colCount) {
          $thumbnails.slice(i, i + colCount).wrapAll('<div class="elementgrid-row ' + config.layoutType + '"></div>');
        }
        break;
    }
  };
  var layoutMasonryOnResize = function() {
    if (typeof $grids2 != "undefined") {
      $grids2.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        var layoutType = config.layoutType;
        if (layoutType === "masonry") {
          var masonry = $el.data("masonry");
          if (typeof masonry != "undefined") {
            masonry.layout();
          }
        }
      });
    }
  };
  var initModule16 = function() {
    jQuery(window).on("window_width_changed", layoutMasonryOnResize);
    window.laytheme.on("sizechanged", onResize2);
    bindOnContentReady4();
    setTimeout(function() {
      layoutMasonryOnResize();
    }, 1e3);
  };
  var bindOnContentReady4 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      $grids2 = void 0;
      var $target7;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      $grids2 = $target7.find(".elements-collection-region");
      $grids2.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        initLayoutType2($el, config);
        sizeLayout2($el, config);
        jQuery(this).addClass("initialized");
        if (config.layoutType == "masonry") {
          $el.closest(".col").addClass("masonry-initialized");
        }
      });
      lazySizes.autoSizer.checkElems();
      utility_controller.setImageSizesAttribute($grids2);
    });
  };
  var elementgrid_controller = {
    initModule: initModule16
  };
  var elementgrid_controller_default = elementgrid_controller;

  // lay/frontend/assets/src/js/app/frontend/element/marquee_controller.js
  var import_dynamic_marquee = __toESM(require_dynamic_marquee());
  document.fonts.onloadingdone = function() {
    setTimeout(function() {
      jQuery(window).trigger("resize");
    }, 0);
  };
  var $marquees;
  var marqueeObjects = [];
  var onResize3 = function() {
  };
  var LayMarquee = function($marquee, config) {
    this.control;
    this.marquee;
    this.wasInitialized;
    this.$marquee = $marquee;
    this.config = config;
    this.resizeObserver = null;
    this.height = 0;
    this.previousHeight = 0;
    function destroy2() {
      if (this.marquee !== null) {
        this.control = (0, import_dynamic_marquee.loop)(
          this.marquee,
          []
        );
        this.marquee.clear();
        $marquee.empty();
      }
    }
    function init4() {
      var currentLayout = Utility.screenSize;
      var marquee = $marquee[0];
      var speed = this.config.speed;
      var reversedirection = this.config.reversedirection;
      var startonscreen = this.config.startonscreen;
      var textformat = this.config.textformat;
      var separator = this.config.separator;
      var imageheight = this.config[currentLayout].imageheight;
      var startonhover = this.config.hasOwnProperty("startonhover") ? this.config.startonhover : false;
      var elements = this.config.elements;
      if (reversedirection === false) {
        speed *= -1;
      }
      if (startonhover === true) {
        speed = 0;
      }
      if ($marquee.length > 0 && $marquee.is(":visible")) {
        this.marquee = new import_dynamic_marquee.Marquee(marquee, {
          rate: speed,
          // 20 pixels
          upDown: false,
          // downwards instead of to the right
          startOnScreen: startonscreen
          // start on screen
        });
        var content_functions = [];
        for (var i = 0; i < elements.length; i++) {
          (function(i2, textformat2, elements2) {
            var myfunc = function() {
              var el = elements2[i2];
              var $el;
              switch (el.type) {
                case "text":
                  $el = jQuery(el.cont);
                  $el.addClass("_" + textformat2 + "_no_spaces");
                  break;
                case "img":
                  var full = "";
                  if (el.sizes.hasOwnProperty("full")) {
                    full = utility_controller.filterURL(el.sizes.full);
                  }
                  var obj2 = utility_controller.getImageSrcAndSrcSet(el);
                  var width = el.w / el.h * imageheight;
                  var markup = "";
                  if (el.hasOwnProperty("imagelink") && el.imagelink != null) {
                    var target = el.imagelink.newtab ? 'target="_blank"' : "";
                    markup += '<a href="' + utility_controller.filterURL(el.imagelink.url) + '" ' + target + ' data-type="' + el.imagelink.type + '" data-id="' + el.imagelink.id + '" data-catid="[' + el.imagelink.catid + ']" data-title="' + el.imagelink.title + '">';
                  }
                  if (full.indexOf(".gif") !== -1 || full.indexOf(".png") !== -1) {
                    markup += '<img style="width:' + width + "px; height:" + imageheight + 'px;" src="' + full + '">';
                  } else {
                    markup += '<img sizes="' + width + 'px" style="width:' + width + "px; height:" + imageheight + 'px;" src="' + obj2.src + '" srcset="' + obj2.srcset + '">';
                  }
                  if (el.hasOwnProperty("imagelink") && el.imagelink != null) {
                    markup += "</a>";
                  }
                  $el = jQuery(markup);
                  break;
              }
              return $el[0];
            };
            content_functions.push(myfunc);
          })(i, textformat, elements);
        }
        this.control = (0, import_dynamic_marquee.loop)(
          this.marquee,
          content_functions,
          function() {
            var $separator = document.createElement("span");
            $separator.classList.add("_" + textformat);
            $separator.innerHTML = separator;
            return $separator;
          }
        );
        this.$marquee.data("lay-marquee", this.marquee);
      }
      this.wasInitialized = true;
    }
    this.init = init4;
    this.destroy = destroy2;
  };
  var initModule17 = function() {
    jQuery(window).on("window_width_changed", onResize3);
    bindOnContentReady5();
    bindPauseOnHover();
    bindStartOnHover();
  };
  var destroyAllMarqueeObjects = function() {
    if (marqueeObjects.length > 0) {
      for (var i = 0; i < marqueeObjects.length; i++) {
        var m = marqueeObjects[i];
        m.destroy();
      }
      marqueeObjects = [];
    }
  };
  var bindStartOnHover = function() {
    jQuery("body").on("mouseenter", ".marquee-start-on-hover", function(event2) {
      var config = jQuery(this).data("config");
      var speed = config.speed;
      var reversedirection = config.reversedirection;
      if (reversedirection == false) {
        speed *= -1;
      }
      var m = jQuery(this).data("lay-marquee");
      m.setRate(speed);
    }).on("mouseleave", ".marquee-start-on-hover", function(event2) {
      var m = jQuery(this).data("lay-marquee");
      m.setRate(0);
    });
  };
  var bindPauseOnHover = function() {
    jQuery("body").on("mouseenter", ".marquee-pause-on-hover", function(event2) {
      var m = jQuery(this).data("lay-marquee");
      m.setRate(0);
    }).on("mouseleave", ".marquee-pause-on-hover", function(event2) {
      var config = jQuery(this).data("config");
      var speed = config.speed;
      var reversedirection = config.reversedirection;
      if (reversedirection == false) {
        speed *= -1;
      }
      var m = jQuery(this).data("lay-marquee");
      m.setRate(speed);
    });
  };
  var bindOnContentReady5 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      $marquees = void 0;
      var $target7;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      destroyAllMarqueeObjects();
      $marquees = $target7.find(".lay-marquee");
      $marquees.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        var marquee = new LayMarquee($el, config);
        marquee.init();
        marqueeObjects.push(marquee);
      });
    });
  };
  var marquee_controller = {
    initModule: initModule17
  };
  var marquee_controller_default = marquee_controller;

  // lay/frontend/assets/src/js/app/frontend/element/projectindex_controller.js
  var $grids3;
  var onResize4 = function() {
    if (typeof $grids3 != "undefined") {
      $grids3.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        setColOrderAndLastClass($el, config);
        setCSS($el, config);
      });
    }
  };
  var isAuto = function(myString) {
    return isNaN(Number(myString)) || myString.trim() === "";
  };
  var setColOrderAndLastClass = function($el, config) {
    var sortedColumnsInConfig = config[Utility.screenSize].sortedColumns;
    var target_order = [];
    var target_visibles = [];
    for (var index = 0; index < sortedColumnsInConfig.length; index++) {
      var element = sortedColumnsInConfig[index];
      target_order.push(element["name"]);
      target_visibles.push(element["visible"]);
    }
    var orders = [];
    var biggestVisibleOrderForRow = -1;
    var biggestVisibleOrderForRowDomElementIx = -1;
    $el.find(".lay-projectindex-filter").each(function(ix) {
      var order = 0;
      if (this.classList.contains("lay-projectindex-filter-title")) {
        order = target_order.indexOf("title");
      } else if (this.classList.contains("lay-projectindex-filter-categories")) {
        order = target_order.indexOf("categories");
      } else if (this.classList.contains("lay-projectindex-filter-tags")) {
        order = target_order.indexOf("tags");
      } else if (this.classList.contains("lay-projectindex-filter-year")) {
        order = target_order.indexOf("year");
      }
      jQuery(this).css("order", order);
      if (order > biggestVisibleOrderForRow && target_visibles[order] == true) {
        biggestVisibleOrderForRow = order;
        biggestVisibleOrderForRowDomElementIx = ix;
      }
    });
    $el.find(".lay-projectindex-filter-wrap").find(".last-visible-projectindex-col").removeClass("last-visible-projectindex-col");
    if (biggestVisibleOrderForRowDomElementIx != -1) {
      $el.find(".lay-projectindex-filter:nth-child(" + (biggestVisibleOrderForRowDomElementIx + 1) + ")").addClass("last-visible-projectindex-col");
    }
    $el.find(".lay-projectindex-row").each(function() {
      var $row = jQuery(this);
      var biggestVisibleOrderForRow2 = -1;
      var biggestVisibleOrderForRowDomElementIx2 = -1;
      $row.find(">div").each(function(ix) {
        var order = 0;
        switch (this.classList[0]) {
          case "lay-projectindex-col-title":
            order = target_order.indexOf("title");
            break;
          case "lay-projectindex-col-categories":
            order = target_order.indexOf("categories");
            break;
          case "lay-projectindex-col-tags":
            order = target_order.indexOf("tags");
            break;
          case "lay-projectindex-col-year":
            order = target_order.indexOf("year");
            break;
        }
        jQuery(this).css("order", order);
        if (order > biggestVisibleOrderForRow2 && target_visibles[order] == true && !jQuery(this).hasClass("lay-projectindex-col-empty")) {
          biggestVisibleOrderForRow2 = order;
          biggestVisibleOrderForRowDomElementIx2 = ix;
        }
      });
      $row.find(".last-visible-projectindex-col").removeClass("last-visible-projectindex-col");
      if (biggestVisibleOrderForRowDomElementIx2 != -1) {
        $row.find(">div:nth-child(" + (biggestVisibleOrderForRowDomElementIx2 + 1) + ")").addClass("last-visible-projectindex-col");
      }
    });
  };
  var setCSS = function($el, config) {
    var $title = $el.find(".lay-projectindex-col-title, .lay-projectindex-filter-title");
    var $categories = $el.find(".lay-projectindex-col-categories, .lay-projectindex-filter-categories");
    var $tags = $el.find(".lay-projectindex-col-tags, .lay-projectindex-filter-tags");
    var $year = $el.find(".lay-projectindex-col-year, .lay-projectindex-filter-year");
    var style = typeof config.style == "undefined" ? "table" : config.style;
    var tagsWidthIsAuto = isAuto(config[Utility.screenSize].tagsWidth);
    var categoriesWidthIsAuto = isAuto(config[Utility.screenSize].categoriesWidth);
    var titleWidthIsAuto = isAuto(config[Utility.screenSize].titleWidth);
    var yearWidthIsAuto = isAuto(config[Utility.screenSize].yearWidth);
    var titleVisible, categoriesVisible, tagsVisible, yearVisible;
    for (var index = 0; index < config[Utility.screenSize].sortedColumns.length; index++) {
      var col = config[Utility.screenSize].sortedColumns[index];
      switch (col.name) {
        case "title":
          titleVisible = col.visible;
          break;
        case "categories":
          categoriesVisible = col.visible;
          break;
        case "year":
          yearVisible = col.visible;
          break;
        case "tags":
          tagsVisible = col.visible;
          break;
      }
    }
    var visibleCols = [];
    for (var index = 0; index < config[Utility.screenSize].sortedColumns.length; index++) {
      var col = config[Utility.screenSize].sortedColumns[index];
      if (col.visible === true) {
        visibleCols.push(col);
      }
    }
    var widthToSplitEvenly = 100;
    var titleWidth, categoriesWidth, tagsWidth, yearWidth;
    var visibleColumnsAmount = visibleCols.length;
    var autoWidthColumnsAmount = visibleColumnsAmount;
    for (var index = 0; index < visibleCols.length; index++) {
      var col = visibleCols[index];
      switch (col.name) {
        case "title":
          if (!titleWidthIsAuto) {
            widthToSplitEvenly -= Number(config[Utility.screenSize].titleWidth);
            autoWidthColumnsAmount--;
          }
          break;
        case "categories":
          if (!categoriesWidthIsAuto) {
            widthToSplitEvenly -= Number(config[Utility.screenSize].categoriesWidth);
            autoWidthColumnsAmount--;
          }
          break;
        case "tags":
          if (!tagsWidthIsAuto) {
            widthToSplitEvenly -= Number(config[Utility.screenSize].tagsWidth);
            autoWidthColumnsAmount--;
          }
          break;
        case "year":
          if (yearWidthIsAuto) {
            yearWidth = 15;
            widthToSplitEvenly -= yearWidth;
            autoWidthColumnsAmount--;
          } else {
            widthToSplitEvenly -= Number(config[Utility.screenSize].yearWidth);
            autoWidthColumnsAmount--;
          }
          break;
      }
    }
    for (var index = 0; index < visibleCols.length; index++) {
      var col = visibleCols[index];
      switch (col.name) {
        case "title":
          if (titleWidthIsAuto) {
            titleWidth = widthToSplitEvenly / autoWidthColumnsAmount;
          } else {
            titleWidth = config[Utility.screenSize].titleWidth;
          }
          break;
        case "categories":
          if (categoriesWidthIsAuto) {
            categoriesWidth = widthToSplitEvenly / autoWidthColumnsAmount;
          } else {
            categoriesWidth = config[Utility.screenSize].categoriesWidth;
          }
          break;
        case "tags":
          if (tagsWidthIsAuto) {
            tagsWidth = widthToSplitEvenly / autoWidthColumnsAmount;
          } else {
            tagsWidth = config[Utility.screenSize].tagsWidth;
          }
          break;
        case "year":
          if (yearWidthIsAuto) {
            yearWidth = 15;
          } else {
            yearWidth = config[Utility.screenSize].yearWidth;
          }
          break;
      }
    }
    if (tagsVisible) {
      $tags.show();
      if (style == "table") {
        $tags.css("width", tagsWidth + "%");
      }
    } else {
      $tags.hide();
    }
    if (categoriesVisible) {
      $categories.show();
      if (style == "table") {
        $categories.css("width", categoriesWidth + "%");
      }
    } else {
      $categories.hide();
    }
    if (yearVisible) {
      $year.show();
      if (style == "table") {
        $year.css("width", yearWidth + "%");
      }
    } else {
      $year.hide();
    }
    if (titleVisible) {
      $title.show();
      if (style == "table") {
        $title.css("width", titleWidth + "%");
      }
    } else {
      $title.hide();
    }
  };
  var bindFilterClick2 = function($grid, config) {
    $grid.find(".lay-projectindex-filter-inner").off("click");
    $grid.find(".lay-projectindex-filter-inner").on("click", function() {
      var $filterButton = jQuery(this.parentNode);
      var $projectIndex = jQuery(this).closest(".lay-projectindex");
      var $rows2 = $projectIndex.find(".lay-projectindex-row");
      var order = "DESC";
      if ($filterButton.hasClass("projectindex-filter-active")) {
        if ($filterButton.hasClass("order-ASC")) {
          $filterButton.removeClass("order-ASC").addClass("order-DESC");
          order = "DESC";
        } else {
          $filterButton.removeClass("order-DESC").addClass("order-ASC");
          order = "ASC";
        }
      } else {
        $projectIndex.find(".projectindex-filter-active").removeClass("projectindex-filter-active");
        if ($filterButton.hasClass("lay-projectindex-filter-year")) {
          $filterButton.removeClass("order-ASC").addClass("projectindex-filter-active order-DESC");
          order = "DESC";
        } else {
          $filterButton.removeClass("order-DESC").addClass("projectindex-filter-active order-ASC");
          order = "ASC";
        }
      }
      var orderby = "";
      if ($filterButton.hasClass("lay-projectindex-filter-title")) {
        orderby = "title";
      } else if ($filterButton.hasClass("lay-projectindex-filter-categories")) {
        orderby = "categories";
      } else if ($filterButton.hasClass("lay-projectindex-filter-tags")) {
        orderby = "tags";
      } else if ($filterButton.hasClass("lay-projectindex-filter-year")) {
        orderby = "date";
      }
      var array = [];
      $rows2.each(function(ix) {
        switch (orderby) {
          case "title":
            array.push({
              domIx: ix,
              text: jQuery(this).find(".lay-projectindex-col-title").text()
            });
            break;
          case "categories":
            array.push({
              domIx: ix,
              text: jQuery(this).find(".lay-projectindex-col-categories").text()
            });
            break;
          case "tags":
            array.push({
              domIx: ix,
              text: jQuery(this).find(".lay-projectindex-col-tags").text()
            });
            break;
          case "date":
            array.push({
              domIx: ix,
              text: jQuery(this).find(".lay-projectindex-col-year").attr("data-date")
            });
            break;
        }
      });
      switch (orderby) {
        case "title":
        case "categories":
          array.sort((a, b) => a.text.localeCompare(b.text));
          break;
        case "tags":
          array.sort((a, b) => a.text.localeCompare(b.text, void 0, { numeric: true, sensitivity: "base" }));
          break;
        case "date":
          array.sort(function(a, b) {
            var numberA = parseInt(a.text, 10);
            var numberB = parseInt(b.text, 10);
            return numberA - numberB;
          });
          break;
      }
      if (order == "DESC") {
        array = array.reverse();
      }
      jQuery(".lay-projectindex-first-row").css("border-top", "");
      jQuery(".lay-projectindex-first-row").removeClass("lay-projectindex-first-row");
      for (var index = 0; index < array.length; index++) {
        var element = array[index];
        $rows2.eq(element.domIx).css("order", index);
        if (index == 0) {
          $rows2.eq(element.domIx).addClass("lay-projectindex-first-row");
        }
      }
      jQuery(".lay-projectindex-first-row").css("border-top", config.lineStrokeWidth + "px solid " + config.lineColor);
    });
  };
  var initModule18 = function() {
    window.laytheme.on("sizechanged", onResize4);
    bindOnNewpageShown();
  };
  var bindOnNewpageShown = function() {
    window.laytheme.on("newpageshown", function() {
      $grids3 = jQuery(".lay-projectindex");
      $grids3.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        setColOrderAndLastClass($el, config);
        setCSS($el, config);
        bindFilterClick2($el, config);
        jQuery(this).addClass("initialized");
      });
    });
  };
  var projectindex_controller = {
    initModule: initModule18
  };
  var projectindex_controller_default = projectindex_controller;

  // lay/frontend/assets/src/js/app/frontend/element/socialmediaicons_controller.js
  var $sm_element;
  var onResize5 = function() {
    if (typeof $sm_element != "undefined") {
      $sm_element.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        initLayoutType3($el, config);
      });
    }
  };
  var initLayoutType3 = function($el, config) {
    var screenSize = Utility.screenSize;
    var config_part = config[screenSize];
    var w = config_part.width;
    var h = config_part.height;
    var space_between = config_part.spacebetween;
    var w_or_h = config.setwidthorheight;
    $el.find(".lay-icon-inner").css({
      paddingLeft: space_between / 2 + "px",
      paddingRight: space_between / 2 + "px"
    });
    switch (w_or_h) {
      case "width":
        $el.find(".lay-icon-inner").css({
          width: w + "px",
          height: ""
        });
        break;
      case "height":
        $el.find(".lay-icon-inner").css({
          width: "",
          height: h + "px"
        });
        break;
    }
  };
  var initModule19 = function() {
    window.laytheme.on("sizechanged", onResize5);
    bindOnNewPageShown();
  };
  var bindOnNewPageShown = function() {
    window.laytheme.on("newpageshown", function() {
      $sm_element = jQuery(".lay-socialmedia-icons");
      $sm_element.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        initLayoutType3($el, config);
        jQuery(this).addClass("initialized");
      });
    });
  };
  var socialmediaicons_controller = {
    initModule: initModule19
  };
  var socialmediaicons_controller_default = socialmediaicons_controller;

  // lay/frontend/assets/src/js/app/frontend/element/productsgrid_controller.js
  var $grids4;
  var onResize6 = function() {
    if (typeof $grids4 != "undefined") {
      $grids4.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        sizeLayout3($el, config);
      });
    }
  };
  var sizeLayout3 = function($el, config) {
    var currentDevice = Utility.screenSize;
    var colGutter = config[currentDevice].colGutter;
    var colCount = config[currentDevice].colCount;
    var rowGutterMu = typeof config[currentDevice].rowGutterMu === "undefined" ? "%" : config[currentDevice].rowGutterMu;
    var colGutterMu = typeof config[currentDevice].colGutterMu === "undefined" ? "%" : config[currentDevice].colGutterMu;
    var gutter_diff = (1 - 1 / colCount) * config[currentDevice].colGutter;
    var width = "calc( 100% / " + colCount + " - " + gutter_diff + colGutterMu + ")";
    $el.find("li").css({
      width,
      "margin-bottom": config[currentDevice].rowGutter + rowGutterMu,
      "margin-left": 0
    });
    var layoutType = config.layoutType;
    switch (layoutType) {
      case "masonry":
        $el.find(".lay-productsgrid-gutter-sizer").css("width", colGutter + colGutterMu);
        $el.find(".lay-productsgrid-col-sizer").css("width", width);
        var masonry = $el.data("masonry");
        if (typeof masonry != "undefined") {
          masonry.layout();
        }
        break;
      default:
        $el.find("li").css("margin-right", colGutter + colGutterMu);
        $el.find("li:nth-child(" + colCount + "n)").css("margin-right", 0);
        break;
    }
  };
  var initLayoutType4 = function($el, config) {
    switch (config.layoutType) {
      case "masonry":
        var elem = $el.find("ul.lay-products")[0];
        var masonry = new Masonry(elem, {
          // options
          itemSelector: "li",
          columnWidth: ".lay-productsgrid-col-sizer",
          gutter: ".lay-productsgrid-gutter-sizer",
          percentPosition: true,
          transitionDuration: 0
        });
        masonry.once("layoutComplete", function() {
          $el.closest(".col").addClass("masonry-initialized");
        });
        $el.data("masonry", masonry);
        break;
      default:
        break;
    }
  };
  var initModule20 = function() {
    jQuery(window).on("window_width_changed", onResize6);
    bindOnContentReady6();
  };
  var bindOnContentReady6 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      $grids4 = void 0;
      var $target7;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      $grids4 = $target7.find(".lay-products-thumbnails-grid");
      $grids4.each(function() {
        var $el = jQuery(this);
        var config = $el.data("config");
        initLayoutType4($el, config);
        sizeLayout3($el, config);
        $el.addClass("sized");
      });
      lazySizes.autoSizer.checkElems();
      utility_controller.setImageSizesAttribute($grids4);
    });
  };
  var productsgrid_controller = {
    initModule: initModule20
  };
  var productsgrid_controller_default = productsgrid_controller;

  // lay/frontend/assets/src/js/app/frontend/qtranslate/qtranslate_controller.js
  var qtranslate_controller = {
    updateLanguageSwitcherUrls: function() {
      updateLanguageSwitcherUrls();
    },
    initModule: function() {
      initModule21();
    }
  };
  var initModule21 = function() {
    if (frontendPassedData.is_qtranslate_active == 1) {
      window.laytheme.on("newpage", updateLanguageSwitcherUrls);
    }
  };
  var updateLanguageSwitcherUrls = function() {
    if (frontendPassedData.is_qtranslate_active == 1) {
      jQuery.ajax({
        url: frontendPassedData.wpapiroot + "laytheme/v1/get_qtranslate_langswitcher_urls/",
        data: { url: window.location.href },
        method: "GET",
        success: function(data) {
          var result2 = JSON.parse(data);
          for (var i = 0; i < result2.length; i++) {
            jQuery(".qtranxs-lang-menu-item-" + result2[i][0] + " a").attr("href", result2[i][1]);
          }
        }
      });
    }
  };
  var qtranslate_controller_default = qtranslate_controller;

  // lay/frontend/assets/src/js/app/frontend/polylang/polylang_controller.js
  var polylang_controller = {
    updateLanguageSwitcherUrls: function() {
      updateLanguageSwitcherUrls2();
    },
    initModule: function() {
      initModule22();
    }
  };
  var initModule22 = function() {
    if (frontendPassedData.is_polylang_active == 1) {
      window.laytheme.on("newpage", updateLanguageSwitcherUrls2);
    }
  };
  var updateLanguageSwitcherUrls2 = function() {
    if (frontendPassedData.is_polylang_active == 1) {
      jQuery.ajax({
        url: frontendPassedData.wpapiroot + "laytheme/v1/get_polylang_langswitcher_urls/",
        data: { id: jQuery("body").attr("data-id"), type: jQuery("body").attr("data-type") },
        method: "GET",
        success: function(data) {
          var result2 = JSON.parse(data);
          if (Array.isArray(result2)) {
            for (var i = 0; i < result2.length; i++) {
              if (typeof result2[i][0] === "string") {
                jQuery(".lang-item-" + result2[i][1] + " a").attr("href", result2[i][0]);
              }
            }
          }
        }
      });
    }
  };
  var polylang_controller_default = polylang_controller;

  // lay/frontend/assets/src/js/app/frontend/load_cpl_or_desktop_content/load_cpl_or_desktop_content_controller.js
  var $target4;
  var load_cpl_or_desktop_content_controller = {
    initModule: function() {
      initModule23();
    }
  };
  var mainRegion = {
    desktopContentLoaded: false,
    CplContentLoaded: false
  };
  var footer = {
    desktopContentLoaded: false,
    CplContentLoaded: false
  };
  var initModule23 = function() {
    resetContentLoadedStatus();
    window.laytheme.on("newpageshown", resetContentLoadedStatus);
    window.laytheme.on("newpageshown", function() {
      setTimeout(function() {
        loadDesktopOrCPLContent();
      }, 0);
    });
    window.laytheme.on("sizechanged", function() {
      loadDesktopOrCPLContent();
    });
  };
  var loadDesktopOrCPLContent = function() {
    switch (Utility.screenSize) {
      case "desktop":
      case "tablet":
        loadDesktopContentHelper();
        break;
      case "phone":
        loadPhoneContentHelper();
        break;
    }
    loadWooCommerceImages();
    pauseInvisibleVideos();
    setTimeout(function() {
      var typeOfContentThatIsReady = Utility.screenSize == "desktop" || Utility.screenSize == "tablet" ? "desktop" : "phone";
      window.laytheme.trigger("content_ready", typeOfContentThatIsReady, $target4);
    }, 0);
  };
  var loadWooCommerceImages = function() {
    var $target7 = jQuery("#lay-woocommerce");
    switch (frontendPassedData.image_loading) {
      case "instant_load":
        load_visible_images_then_rest_controller.initLoadImages($target7);
        utility_controller.fadeInImageOnLoadViaParent($target7);
        break;
      case "lazy_load":
        break;
    }
  };
  var pauseInvisibleVideos = function() {
    jQuery("video").each(function() {
      if (!jQuery(this).is(":visible")) {
        this.pause();
      }
    });
  };
  var loadDesktopContentHelper = function() {
    if (!mainRegion.desktopContentLoaded) {
      $target4 = jQuery("#grid, .cover-region-desktop");
      loadContent($target4);
      mainRegion.desktopContentLoaded = true;
    }
    if (!footer.desktopContentLoaded) {
      $target4 = jQuery("#footer");
      if ($target4.length > 0) {
        loadContent($target4);
      }
      footer.desktopContentLoaded = true;
    }
  };
  var loadPhoneContentHelper = function() {
    if (jQuery("#custom-phone-grid").length > 0) {
      mainRegion.hasCPL = true;
    } else {
      mainRegion.hasCPL = false;
    }
    if (jQuery("#footer-custom-phone-grid").length > 0) {
      footer.hasCPL = true;
    } else {
      footer.hasCPL = false;
    }
    if (mainRegion.hasCPL) {
      if (!mainRegion.CplContentLoaded) {
        $target4 = jQuery("#custom-phone-grid, .cover-region-phone");
        loadContent($target4);
        mainRegion.CplContentLoaded = true;
      }
    } else {
      if (!mainRegion.desktopContentLoaded) {
        $target4 = jQuery("#grid, .cover-region-desktop");
        loadContent($target4);
        mainRegion.desktopContentLoaded = true;
      }
    }
    if (footer.hasCPL) {
      if (!footer.CplContentLoaded) {
        $target4 = jQuery("#footer-custom-phone-grid");
        loadContent($target4);
        footer.CplContentLoaded = true;
      }
    } else {
      if (!footer.desktopContentLoaded) {
        $target4 = jQuery("#footer");
        if ($target4.length > 0) {
          loadContent($target4);
        }
        footer.desktopContentLoaded = true;
      }
    }
  };
  var loadContent = function($target7) {
    switch (frontendPassedData.image_loading) {
      case "instant_load":
        load_visible_images_then_rest_controller.initLoadImages($target7);
        utility_controller.fadeInImageOnLoadViaParent($target7);
        break;
      case "lazy_load":
        break;
    }
    switch (frontendPassedData.image_loading) {
      case "instant_load":
        load_html5_videos_controller_default.loadVideosInstantly($target7);
        break;
      case "lazy_load":
        load_html5_videos_controller_default.initLazyLoadVideosOnScroll($target7);
        break;
    }
    $target7.find("iframe[data-src]").each(function() {
      var data_src = jQuery(this).attr("data-src");
      jQuery(this).attr("src", data_src);
    });
    $target7.find("[data-embed]").each(function() {
      var data_embed = jQuery(this).attr("data-embed");
      jQuery(this).html(data_embed);
    });
    if (typeof layCarousel != "undefined" && typeof layCarousel.loadNotLazyloadingImagesIn != "undefined") {
      layCarousel.loadNotLazyloadingImagesIn($target7);
    }
    if (typeof layCarousel != "undefined" && typeof layCarousel.fadeCarousel.loadFirstLazyImage != "undefined") {
      layCarousel.fadeCarousel.loadFirstLazyImage($target7);
    }
  };
  var resetContentLoadedStatus = function() {
    mainRegion.desktopContentLoaded = false;
    mainRegion.CplContentLoaded = false;
    footer.desktopContentLoaded = false;
    footer.CplContentLoaded = false;
  };
  var load_cpl_or_desktop_content_controller_default = load_cpl_or_desktop_content_controller;

  // lay/frontend/assets/src/js/app/frontend/html5video/video_background.js
  var loadBackgroundVideo = function() {
    switch (Utility.screenSize) {
      case "desktop":
      case "tablet":
        if (jQuery(".lay-sitewide-background-video").length > 0 && jQuery(".lay-sitewide-background-video").attr("src") == void 0) {
          var video_url = jQuery(".lay-sitewide-background-video").attr("data-src");
          jQuery(".lay-sitewide-background-video").attr("src", video_url);
        }
        if (jQuery(".lay-sitewide-background-video").length > 0) {
          jQuery(".lay-sitewide-background-video")[0].play();
        }
        break;
      case "phone":
        if (jQuery(".lay-sitewide-background-video-mobile").length > 0 && jQuery(".lay-sitewide-background-video-mobile").attr("src") == void 0) {
          var video_url = jQuery(".lay-sitewide-background-video-mobile").attr("data-src");
          jQuery(".lay-sitewide-background-video-mobile").attr("src", video_url);
        }
        if (jQuery(".lay-sitewide-background-video-mobile").length > 0) {
          jQuery(".lay-sitewide-background-video-mobile")[0].play();
        }
        break;
    }
  };
  var initModule24 = function() {
    loadBackgroundVideo();
    window.laytheme.on("sizechanged", function() {
      loadBackgroundVideo();
    });
  };
  var video_background = {
    initModule: initModule24
  };
  var video_background_default = video_background;

  // lay/frontend/assets/src/js/app/frontend/woocommerce/variable_products_selects.js
  function LayVariationsSelect($select) {
    var _this = this;
    this.$container = null;
    this.$select = $select;
    this.default = this.$select.attr("placeholder");
    var name = this.$select.attr("name");
    this.$lay_custom_select_el = "";
    this.init = function($container) {
      _this.$container = $container;
      var selected = this.$select.find("option:selected");
      if (selected.val() != "") {
        _this.default = selected.text();
      }
      this.initMarkup();
      this.showVariationImage(_this.default);
      setTimeout(function() {
        _this.bindNewSelect();
      }, 0);
    };
    this.initMarkup = function() {
      var markup = String() + '<div class="lay-woocommerce-variations-select" data-lvs-id="' + this.$select.attr("id") + '" data-lvs-name="' + this.$select.attr("name") + '"><div class="lay-woocommerce-variations-select-selected-field" placeholder="' + this.$select.attr("placeholder") + '">' + this.default + '</div><div class="lay-woocommerce-variations-select-selected-list">';
      this.$select.find("option").each(function() {
        if (jQuery(this).attr("value") != "") {
          var div = this.outerHTML.replace("<option ", "<div ").replace("</option>", "</div>");
          markup += div;
        }
      });
      markup += String() + "</div></div>";
      var $el = jQuery(markup);
      var $existing_select = _this.$container.find('.lay-woocommerce-variations-select[data-lvs-id="' + this.$select.attr("id") + '"]');
      if ($existing_select.length > 0) {
        $existing_select.after($el);
        $existing_select.remove();
      } else {
        _this.$container.append($el);
      }
      _this.$lay_custom_select_el = $el;
    };
    this.showVariationImage = function() {
      jQuery(".lay-woocommerce-product-variation-slide").hide();
      var $variationImage = null;
      var selector = "";
      jQuery(".variations select").each(function() {
        selector += "[data-" + jQuery(this).attr("name") + '="' + this.value + '"]';
      });
      $variationImage = jQuery(".lay-woocommerce-product-variation-slide" + selector);
      if ($variationImage.length > 0) {
        $variationImage.show();
        window.laytheme.trigger("variation_image_updated");
        var rect = $variationImage.first()[0].getBoundingClientRect();
        if (rect.bottom < 400) {
          jQuery("html").animate(
            {
              scrollTop: $variationImage.first().offset().top
            },
            300,
            "easeInOutQuad",
            function() {
            }
          );
        }
      }
    };
    this.bindNewSelect = function() {
      this.$lay_custom_select_el.find(".lay-woocommerce-variations-select-selected-field").on("click", function() {
        _this.$lay_custom_select_el.toggleClass("lay-dropdown-active");
        jQuery(".lay-woocommerce-variations-select").not(_this.$lay_custom_select_el).removeClass("lay-dropdown-active");
        if (_this.$lay_custom_select_el.hasClass("lay-dropdown-active")) {
        } else {
        }
      });
      this.$lay_custom_select_el.find(".lay-woocommerce-variations-select-selected-list>div").on("click", function() {
        var value = jQuery(this).attr("value");
        var text = jQuery(this).text();
        _this.$lay_custom_select_el.find(".lay-woocommerce-variations-select-selected-field").text(text);
        _this.$select.find("option").removeAttr("selected");
        _this.$select.find('option[value="' + value + '"]')[0].selected = "selected";
        _this.$select.trigger("change");
        _this.$lay_custom_select_el.removeClass("lay-dropdown-active");
        jQuery(".woocommerce-variation-add-to-cart .button").removeClass("added");
        _this.showVariationImage(value);
        window.laytheme.trigger("variation_selected", _this.$select);
      });
    };
    this.getCustomSelectEl = function() {
      return this.$lay_custom_select_el;
    };
  }
  var bind_click_outside = function() {
    jQuery(document).on("click", function(e) {
      if (jQuery(e.target).closest(".lay-woocommerce-variations-select").length == 0) {
        jQuery(".lay-woocommerce-variations-select").removeClass("lay-dropdown-active");
      }
    });
  };
  var woocommerce_variable_products_init = function() {
    bind_click_outside();
    var selects = [];
    window.laytheme.on("newpageshown", function() {
      setTimeout(function() {
        if (jQuery(".variations_form").length > 0) {
          jQuery(".variations select").each(function() {
            var select = new LayVariationsSelect(jQuery(this));
            var $container = jQuery(".lay-variable-products-select-container");
            select.init($container);
            selects.push(select);
          });
        }
      }, 100);
      window.laytheme.off("variation_selected");
      window.laytheme.on("variation_selected", function($select) {
        if (jQuery(".variations select").length > 1) {
          var $container = jQuery(".lay-variable-products-select-container");
          for (var i = 0; i < selects.length; i++) {
            if (!$select.is(selects[i].$select)) {
              selects[i].init($container);
            }
          }
        }
      });
    });
  };

  // lay/frontend/assets/src/js/app/frontend/woocommerce/store_notice.js
  var $storeNotice;
  var height = 0;
  var lastH = height;
  var isNoticeShown = false;
  var bodyPaddingTop = 0;
  var paddingValueIsOriginalBodyPadding = false;
  var setIsNoticeShown = function() {
    isNoticeShown = jQuery("body").hasClass("lay-woocommerce-show-store-notice");
  };
  var positionDesktopElementsBasedOnStoreNotice = function() {
    if (isNoticeShown) {
      jQuery(".sitetitle.position-top, .laynav.position-top, .navbar.position-top").css("margin-top", height + "px");
      if (!jQuery("body").hasClass("woocommerce-page") && frontendPassedData.lay_sticky_footer == "on") {
        jQuery(".lay-content").css("min-height", "calc( 100vh - " + height + "px )");
      }
      jQuery(".fp-slidesNav.bottom").css("transform", "translate(-50%, -" + height + "px)");
    }
    jQuery("body").css("padding-top", "");
  };
  var positionPhoneElementsBasedOnStoreNotice = function() {
    if (isNoticeShown) {
      jQuery("body").css("padding-top", bodyPaddingTop + height + "px");
      jQuery(".navbar, .mobile-title, .lay-mobile-icons-wrap, .mobile-nav.mobile-menu-style-style_desktop_menu").css("margin-top", height + "px");
      jQuery(".fp-slidesNav.bottom").css("transform", "translate(-50%, -" + height + "px)");
    }
  };
  var resetStyles = function() {
    jQuery(".sitetitle.position-top, .laynav.position-top, .navbar").css("margin-top", "");
    jQuery(".navbar, .mobile-title, .lay-mobile-icons-wrap, .mobile-nav.mobile-menu-style-style_desktop_menu").css("margin-top", "");
    jQuery(".fp-slidesNav.bottom").css("transform", "");
    jQuery("body").css("padding-top", "");
    jQuery(".lay-content").css("min-height", "");
    paddingValueIsOriginalBodyPadding = false;
  };
  var sizeHelper = function(size2) {
    switch (size2) {
      case "desktop":
      case "tablet":
        positionDesktopElementsBasedOnStoreNotice();
        break;
      case "phone":
        positionPhoneElementsBasedOnStoreNotice();
        break;
    }
  };
  var bindScroll5 = function() {
    var eventsChannel9 = Backbone.Radio.channel("events");
    var scrolledDown = false;
    window.laytheme.on("newpageshown", function() {
      scrolledDown = false;
    });
    eventsChannel9.on("scroll", function() {
      if (isNoticeShown) {
        var scrollY = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollY >= height && scrolledDown == false) {
          scrolledDown = true;
          jQuery("body").addClass("lay-woocommerce-store-notice-scrolled-down");
        } else if (scrollY < height && scrolledDown == true) {
          scrolledDown = false;
          jQuery("body").removeClass("lay-woocommerce-store-notice-scrolled-down");
        }
      }
    });
  };
  var bindHideStoreNotice = function() {
    jQuery(".woocommerce-store-notice__dismiss-link").on("click", function() {
      resetStyles();
      jQuery("body").removeClass("lay-woocommerce-show-store-notice").addClass("lay-woocommerce-hide-store-notice");
      setIsNoticeShown();
      jQuery("body").removeClass("lay-woocommerce-store-notice-scrolled-down");
    });
  };
  var setHeight = function() {
    height = $storeNotice.outerHeight();
  };
  var setPaddingTopValue = function() {
    switch (Utility.screenSize) {
      case "phone":
        if (paddingValueIsOriginalBodyPadding == false) {
          bodyPaddingTop = parseInt(jQuery("body").css("padding-top"), 10);
          paddingValueIsOriginalBodyPadding = true;
        }
        break;
      case "tablet":
      case "desktop":
        bodyPaddingTop = 0;
        paddingValueIsOriginalBodyPadding = false;
        break;
    }
  };
  var init_size_store_notice = function() {
    bindHideStoreNotice();
    $storeNotice = jQuery(".woocommerce-store-notice.demo_store");
    setIsNoticeShown();
    if (isNoticeShown) {
      setPaddingTopValue();
      setHeight();
      sizeHelper(Utility.screenSize);
      jQuery(window).on("fpAfterRender", function() {
        jQuery(".fp-slidesNav.bottom").css("transform", "translate(-50%, -" + height + "px)");
      });
    }
    bindScroll5();
    window.laytheme.on("sizechanged", function(size2) {
      if (isNoticeShown) {
        setPaddingTopValue();
        setHeight();
        sizeHelper(size2);
      }
    });
    jQuery(window).on("window_width_changed", function() {
      if (isNoticeShown) {
        lastH = height;
        setHeight();
        if (height != lastH) {
          sizeHelper(Utility.screenSize);
        }
      }
    });
  };

  // lay/frontend/assets/src/js/app/frontend/woocommerce/woocommerce.js
  var loadImagesInSideCart = function() {
    if (frontendPassedData.image_loading == "instant_load") {
      jQuery(".xoo-wsc-container .xoo-wsc-img-col img").each(function() {
        if (!jQuery(this).hasClass("loaded")) {
          load_visible_images_then_rest_controller.loadImage(jQuery(this));
          jQuery(this).addClass("loaded");
        }
      });
    }
  };
  var bindOnStandardCartUpdated = function() {
    jQuery(document.body).on("updated_cart_totals", function() {
      if (frontendPassedData.image_loading == "instant_load") {
        jQuery(".lay-woocommerce-cart-wrap img").each(function() {
          if (!jQuery(this).hasClass("loaded")) {
            load_visible_images_then_rest_controller.loadImage(jQuery(this));
            jQuery(this).addClass("loaded");
          }
        });
      }
    });
  };
  var bindOnSideCartUpdated = function() {
    jQuery(document.body).on("wc_fragments_refreshed", function() {
      loadImagesInSideCart();
    });
  };
  var bindCartButton = function() {
    if (frontendPassedData.sideCartPluginActive == true) {
      jQuery(document).on("click", ".laycart a, .lay-cart-icon-wrap", function(e) {
        e.preventDefault();
        e.stopPropagation();
        showSideCart();
      });
    }
  };
  var showSideCart = function() {
    jQuery("body").addClass("xoo-wsc-cart-active");
    jQuery(".xoo-wsc-modal").addClass("xoo-wsc-cart-active");
    jQuery(document.body).trigger("xoo_wsc_cart_toggled", ["show"]);
    if (Utility.isPhoneSize) {
      mobile_menu_controller_default.hideMobileMenu();
    }
  };
  var hideSideCart = function() {
    jQuery(".xoo-wsch-close").trigger("click");
  };
  var bindUpdateMenuPointCartNumber = function() {
    if (typeof MutationObserver != "undefined" && jQuery(".laycart").length > 0) {
      var $count_in_menu = jQuery(".laycart span");
      var $count_in_mobile_menu = jQuery(".lay-cart-icon-wrap");
      var cart_modal = document.getElementsByClassName("xoo-wsc-modal")[0];
      if (typeof $count_in_menu != "undefined" && typeof cart_modal != "undefined") {
        var observer = new MutationObserver(function(mutationsList) {
          var count = jQuery(".xoo-wscb-count").text();
          if (count == "" || count == false || typeof count == "undefined") {
            count = 0;
          }
          if (count == 0) {
            jQuery(".laycart").addClass("laycart-empty").removeClass("laycart-not-empty");
          } else {
            jQuery(".laycart").removeClass("laycart-empty").addClass("laycart-not-empty");
          }
          var count_text = $count_in_menu.text();
          var index1 = count_text.indexOf("(");
          var beginning = count_text.substr(0, index1);
          var new_count_text = beginning += "(" + count + ")";
          $count_in_menu.text(new_count_text);
          $count_in_mobile_menu.text(count);
        });
        observer.observe(cart_modal, { childList: true });
      }
    }
  };
  var productSwiper;
  var initOrDestroyGallery = function() {
    if (jQuery(".lay-woocommerce-single-product-wrap .lay-woocommerce-gallery").length > 0 && jQuery(".swiper-slide").length > 1) {
      if (Utility.isPhoneSize || jQuery(".lay-woocommerce-single-product-wrap").hasClass("carousel")) {
        var nav = jQuery(".lay-woocommerce-gallery").hasClass("lay-woocommerce-gallery-navigation-enabled");
        if (nav == true) {
          nav = {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev"
          };
        }
        productSwiper = new Swiper(".lay-woocommerce-gallery", {
          containerModifierClass: "lay-woocommerce-gallery-container-",
          pagination: {
            el: ".swiper-pagination",
            type: "bullets",
            clickable: true
          },
          navigation: nav,
          spaceBetween: 0,
          breakpoints: {
            [parseInt(frontendPassedData.breakpoint, 10)]: {
              spaceBetween: 20
            }
          }
        });
        window.laytheme.off("variation_image_updated");
        window.laytheme.on("variation_image_updated", function() {
          productSwiper.update();
          productSwiper.slideTo(0, 100);
        });
      } else {
        if (typeof productSwiper != "undefined") {
          window.laytheme.off("variation_image_updated");
          productSwiper.destroy(true, true);
        }
      }
    }
  };
  var doProductGallery = function() {
    window.laytheme.on("newpageshown", function() {
      initOrDestroyGallery();
    });
    window.laytheme.on("sizechanged", function(size2) {
      initOrDestroyGallery();
    });
  };
  var bindCustomQtyButtons = function() {
    jQuery(document).on("click", ".js-lay-woocommerce-plus-qty", function(e) {
      var $input = jQuery(e.target).closest(".lay-woocommerce-qty-wrap").find("input");
      var val = parseInt($input.val(), 10);
      var oldval = val;
      var max3 = parseInt($input.attr("max"), 10);
      val++;
      if (val > max3) {
        val = max3;
      }
      $input.val(val);
      if (oldval != val) {
        $input.trigger("input");
      }
    });
    jQuery(document).on("click", ".js-lay-woocommerce-minus-qty", function(e) {
      var $input = jQuery(e.target).closest(".lay-woocommerce-qty-wrap").find("input");
      var val = parseInt($input.val(), 10);
      var oldval = val;
      val--;
      if (val < 1) {
        val = 1;
      }
      $input.val(val);
      if (oldval != val) {
        $input.trigger("input");
      }
    });
  };
  var bindUpdateQtyAndShowUpdateButton = function() {
    jQuery(document).on(".cart_item input.input-text.qty:not(#coupon_code)", "input", function() {
      var $parent = jQuery(this).closest(".cart_item");
      $parent.find(".lay-woocommerce-update-cart-button").removeClass("lay-woocommerce-button-disabled");
    });
  };
  var bindTabs = function() {
    jQuery(document).on("click", ".lay-woocommerce-tab-title", function(e) {
      if (!jQuery(this).hasClass("active")) {
        jQuery(".lay-woocommerce-tab-title.active").removeClass("active");
        jQuery(this).addClass("active");
        jQuery(".lay-woocommerce-tab-content.active").removeClass("active");
        jQuery(this).next().addClass("active");
      } else {
        jQuery(this).removeClass("active");
        jQuery(this).next().removeClass("active");
      }
    });
  };
  var bindCustomizerEvents = function() {
    window.laytheme.on("customizer_show_sidecart", function() {
      showSideCart();
    });
    window.laytheme.on("customizer_hide_sidecart", function() {
      hideSideCart();
    });
  };
  var overrideWooCommerceScroll = function() {
    jQuery(function($) {
      $.scroll_to_notices = function(scrollElement) {
        if (scrollElement.length) {
        }
      };
    });
  };
  var sizeScroller = function() {
    var $scroller = jQuery(".lay-woocommerce-related-products-scroller");
    if ($scroller.length > 0) {
      $scroller.each(function() {
        var w = 0;
        jQuery(this).find("li").each(function() {
          var computedStyle = window.getComputedStyle(this);
          w += parseInt(this.getBoundingClientRect().width, 10) + parseInt(computedStyle.marginRight, 10);
        });
        jQuery(this).find("ul").css("width", w + 5);
      });
    }
  };
  var resetScroller = function() {
    var $scroller = jQuery(".lay-woocommerce-related-products-scroller");
    if ($scroller.length > 0) {
      $scroller.find("ul").css("width", "");
    }
  };
  var sizeRelatedProductsScroller = function() {
    jQuery(window).on("window_width_changed", function() {
      if (Utility.screenSize == "phone") {
        sizeScroller();
      } else {
        resetScroller();
      }
    });
  };
  var bindCouponInput = function() {
    jQuery(document).on("input", "#coupon_code", function() {
      if (jQuery(this).val() != "") {
        jQuery('.button[name="apply_coupon"]').removeClass("disabled");
      } else {
        jQuery('.button[name="apply_coupon"]').addClass("disabled");
      }
    });
  };
  var disableSpellcheckForTextareas = function() {
    jQuery("textarea").attr("spellcheck", "false");
    jQuery("#coupon_code").attr("autocomplete", "off");
  };
  var initCheckoutLabels = function() {
    jQuery(".checkout.woocommerce-checkout input.input-text").each(function() {
      var val = jQuery(this).val();
      var $formrow = jQuery(this).closest(".form-row");
      if (val != "") {
        $formrow.addClass("lay-minimize-label");
      }
      $formrow.addClass("lay-show-label");
    });
  };
  var bindCheckoutLabelBehaviour = function() {
    jQuery(document).on("focusin", ".checkout.woocommerce-checkout input.input-text", function() {
      var $formrow = jQuery(this).closest(".form-row");
      $formrow.addClass("lay-label-transition");
      setTimeout(function() {
        $formrow.addClass("lay-minimize-label");
      }, 0);
    });
    jQuery(document).on("focusout", ".checkout.woocommerce-checkout input.input-text", function() {
      var $formrow = jQuery(this).closest(".form-row");
      var val = jQuery(this).val();
      if (val == "") {
        $formrow.addClass("lay-label-transition");
        setTimeout(function() {
          $formrow.removeClass("lay-minimize-label");
        }, 0);
      }
    });
  };
  var doCheckoutSelectize = function() {
    jQuery(".checkout.woocommerce-checkout select").each(function() {
      jQuery(this).selectize({
        create: false,
        sortField: "text"
      });
    });
    var options_length = 0;
    var old_options_length = 0;
    var isFirstTime = true;
    jQuery(document.body).on("country_to_state_changed", function(e, country, $wrapper) {
      if (typeof $wrapper != "undefined") {
        $wrapper.find(".form-row").removeClass("last-child");
        var $oneBeforeLastFormRow = $wrapper.find(".form-row:last-child").prev();
        var $lastFormRow = $wrapper.find(".form-row:last-child");
        if (!$lastFormRow.is(":visible")) {
          $oneBeforeLastFormRow.addClass("last-child");
        }
      }
      if (country == "" && typeof $wrapper != "undefined") {
        var txt = "";
        if (jQuery($wrapper).find("input#billing_state").length > 0) {
          txt = jQuery($wrapper).find("input#billing_state").closest(".form-row").find("label").text();
          jQuery($wrapper).find("input#billing_state").attr("placeholder", txt);
        } else if (jQuery($wrapper).find("input#shipping_state").length > 0) {
          txt = jQuery($wrapper).find("input#shipping_state").closest(".form-row").find("label").text();
          jQuery($wrapper).find("input#shipping_state").attr("placeholder", txt);
        }
        return;
      }
      if (typeof $wrapper != "undefined") {
        var select = $wrapper.find("select.state_select")[0];
        if (typeof select == "undefined") {
          return;
        }
        options_length = jQuery(select).find("option").length;
        if (typeof select.selectize != "undefined" && options_length != old_options_length && isFirstTime == false && options_length != 1) {
          if (jQuery(select).find("option").length > 0) {
            var selectizeObj = select.selectize;
            jQuery(select).find("option").each(function() {
              var val = jQuery(this).attr("value");
              var text = jQuery(this).text();
              selectizeObj.addOption({ value: val, text });
            });
            selectizeObj.refreshOptions();
            setTimeout(function() {
              selectizeObj.settings.placeholder = jQuery(select).closest(".form-row").find("label").text();
              selectizeObj.updatePlaceholder();
            }, 0);
          }
        } else {
          jQuery(select).selectize({
            create: false,
            sortField: "text"
          });
        }
        setTimeout(function() {
          var select2 = $wrapper.find("select.state_select")[0];
          if (typeof select2 != "undefined") {
            var selectizeObj2 = select2.selectize;
            selectizeObj2.settings.placeholder = jQuery(select2).closest(".form-row").find("label").text();
            selectizeObj2.updatePlaceholder();
          }
        }, 0);
        setTimeout(function() {
          jQuery(".selectize-control").addClass("select2-container");
          initCheckoutLabels();
        }, 0);
        old_options_length = options_length;
        isFirstTime = false;
      }
    });
  };
  var autoExpandCheckoutOrderNotes = function() {
    jQuery("body").on("keydown input", "textarea#order_comments", function() {
      this.style.removeProperty("height");
      this.style.height = this.scrollHeight + 2 + "px";
    }).on("mousedown", "textarea#order_comments", function() {
      this.style.removeProperty("height");
      this.style.height = this.scrollHeight + 2 + "px";
    });
  };
  var moveCheckoutCoupon = function() {
    jQuery("form.checkout_coupon").appendTo("#lay-coupon-target");
  };
  var bindNoticeClick = function() {
    jQuery(".woocommerce-notices-wrapper").on("click", function() {
      jQuery(this).fadeOut();
    });
  };
  var bindCartChanged = function() {
    jQuery(document.body).on("updated_cart_totals", function() {
    });
  };
  var initModule25 = function() {
    initCheckoutLabels();
    bindCheckoutLabelBehaviour();
    doCheckoutSelectize();
    overrideWooCommerceScroll();
    doProductGallery();
    bindCartButton();
    bindOnStandardCartUpdated();
    bindUpdateMenuPointCartNumber();
    bindCustomizerEvents();
    bindCustomQtyButtons();
    bindUpdateQtyAndShowUpdateButton();
    bindTabs();
    bindOnSideCartUpdated();
    sizeRelatedProductsScroller();
    bindCouponInput();
    disableSpellcheckForTextareas();
    moveCheckoutCoupon();
    autoExpandCheckoutOrderNotes();
    if (!frontendPassedData.sideCartPluginActive) {
      bindCartChanged();
    }
    if (Utility.screenSize == "phone") {
      sizeScroller();
      bindNoticeClick();
    }
  };
  var woocommerce_controller = {
    initModule: function() {
      initModule25();
      woocommerce_variable_products_init();
      init_size_store_notice();
    }
  };
  var woocommerce_default = woocommerce_controller;

  // lay/frontend/assets/src/js/app/frontend/submenu/submenu.js
  var submenu_controller = {
    initModule: function() {
      return initModule26();
    }
  };
  var bindSubmenuClicks = function() {
    var mobile_menu_has_desktop_menu_style = false;
    if (jQuery(".laynav.mobile-nav").hasClass("mobile-menu-style-style_desktop_menu")) {
      mobile_menu_has_desktop_menu_style = true;
    }
    jQuery(".laynav.mobile-nav .menu-item-has-children>a").on("click", function(e) {
      e.preventDefault();
      e.stopPropagation();
      if (mobile_menu_has_desktop_menu_style) {
        jQuery(".show-submenu-mobile").not(jQuery(this).closest(".menu-item-has-children")).removeClass("show-submenu-mobile");
      }
      jQuery(this).closest(".menu-item-has-children").toggleClass("show-submenu-mobile");
      if (mobile_menu_has_desktop_menu_style) {
        if (jQuery(this).closest(".menu-item-has-children").hasClass("show-submenu-mobile")) {
          jQuery(window).one("click", function() {
            jQuery(".show-submenu-mobile").removeClass("show-submenu-mobile");
          });
        }
      }
    });
    if (Utility.isTouchDevice || frontendPassedData.menu_submenu_show_on == "click") {
      jQuery(".laynav.desktop-nav .menu-item-has-children>a").on("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        var $el = jQuery(this).closest(".menu-item-has-children");
        jQuery(".show-submenu-desktop").not($el).removeClass("show-submenu-desktop");
        $el.toggleClass("show-submenu-desktop");
        if ($el.hasClass("show-submenu-desktop")) {
          bindClickToClose();
        }
      });
    }
  };
  var bindClickToClose = function() {
    jQuery(window).one("click", function(e) {
      if (frontendPassedData.menu_submenu_keep_open == true) {
        if (jQuery(e.target).closest(".show-submenu-desktop").length == 1) {
          bindClickToClose();
        } else {
          jQuery(".show-submenu-desktop").removeClass("show-submenu-desktop");
        }
      } else {
        jQuery(".show-submenu-desktop").removeClass("show-submenu-desktop");
      }
    });
  };
  var initModule26 = function() {
    bindSubmenuClicks();
  };
  var submenu_default = submenu_controller;

  // lay/frontend/assets/src/js/app/frontend/element/thumbnailgrid_tagfilter_sizing_controller.js
  var $target5 = void 0;
  var bindOnContentReady7 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target5 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target5 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target5 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target5 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target5 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      var $grids5 = $target5.find(".thumbs-collection-region");
      if ($grids5.length > 0) {
        sizeFilters();
      }
    });
  };
  var sizeFilters = function() {
    switch (Utility.screenSize) {
      case "desktop":
      case "tablet":
        jQuery(".one-col-row .lay-thumbnailgrid-filter-wrap").each(function() {
          var $tagFilter = jQuery(this).find(".lay-thumbnailgrid-tagfilter");
          if ($tagFilter.length > 0 && $tagFilter.hasClass("mobile-one-line")) {
            $tagFilter.css({
              width: "",
              paddingLeft: "",
              paddingRight: "",
              transform: ""
            });
          }
          var $catFilter = jQuery(this).find(".lay-thumbnailgrid-filter");
          if ($catFilter.length > 0 && $catFilter.hasClass("mobile-one-line")) {
            $catFilter.css({
              width: "",
              paddingLeft: "",
              paddingRight: "",
              transform: ""
            });
          }
        });
        break;
      case "phone":
        jQuery(".one-col-row .lay-thumbnailgrid-filter-wrap").each(function() {
          var $tagFilter = jQuery(this).find(".lay-thumbnailgrid-tagfilter");
          var border = 0;
          if ($tagFilter.length > 0 && $tagFilter.hasClass("mobile-one-line")) {
            var spaceLeft = $tagFilter[0].getBoundingClientRect().left;
            var $tagbubble = $tagFilter.find(".tag-bubble").first();
            if ($tagbubble.length > 0) {
              var style = $tagbubble[0].currentStyle || window.getComputedStyle($tagbubble[0]);
              var marginRight = style.marginRight;
              marginRight = parseInt(marginRight, 10);
              var $row = jQuery(this).closest(".row");
              var style2 = $row[0].currentStyle || window.getComputedStyle($row[0]);
              $tagFilter.css({
                width: window.innerWidth + "px",
                paddingLeft: style2.paddingRight,
                paddingRight: style2.paddingRight
              });
              if (spaceLeft != 0) {
                $tagFilter.css({
                  transform: "translateX( -" + spaceLeft + "px )"
                });
              }
            }
          }
          var $catFilter = jQuery(this).find(".lay-thumbnailgrid-filter");
          if ($catFilter.length > 0 && $catFilter.hasClass("mobile-one-line")) {
            var border2 = jQuery(this).closest(".col")[0].getBoundingClientRect().left;
            var spaceLeft = $catFilter[0].getBoundingClientRect().left;
            $catFilter.css({
              width: window.innerWidth + "px",
              paddingLeft: border2 + "px",
              paddingRight: border2 + "px"
            });
            if (spaceLeft != 0) {
              $catFilter.css({
                transform: "translateX( -" + spaceLeft + "px )"
              });
            }
          }
        });
        break;
    }
  };
  var initModule27 = function() {
    bindOnContentReady7();
    jQuery(window).on("window_width_changed", function() {
      sizeFilters();
    });
  };
  var thumbnailgrid_tagfilter_sizing_controller = {
    initModule: initModule27
  };
  var thumbnailgrid_tagfilter_sizing_controller_default = thumbnailgrid_tagfilter_sizing_controller;

  // lay/frontend/assets/src/js/app/frontend/positioning/positioning.js
  var $rows;
  var calcCustomRowHeight = function(rowcustomheight, _100vh_height) {
    var arr = rowcustomheight.split(" ");
    var calculationArr = [];
    for (var index = 0; index < arr.length; index++) {
      var element = arr[index];
      if (element.indexOf("vh") !== -1) {
        element = element.replace("vh", "");
        var num = parseFloat(element);
        num = _100vh_height / 100 * num;
        calculationArr.push(num);
      } else if (element.indexOf("px") !== -1) {
        element = element.replace("px", "");
        var num = parseFloat(element);
        calculationArr.push(num);
      } else {
        calculationArr.push(element);
      }
    }
    var mystr = calculationArr.join("");
    var mynumber = Math.round(looseJsonParse(mystr));
    return mynumber;
  };
  var set100vh = function() {
    if (typeof $rows != "undefined" && $rows.length > 0) {
      var i, styleSheet, styleSheets, styleSheetsNo;
      styleSheets = document.styleSheets;
      var frontendStyle = false;
      for (i = 0; i < styleSheets.length; i++) {
        styleSheet = styleSheets[i];
        if (styleSheet.ownerNode != null && styleSheet.ownerNode.id == "frontend-style-css") {
          frontendStyle = styleSheet;
        }
      }
      styleSheet.crossOrigin = "anonymous";
      try {
        var _100vh_rules = [];
        if (frontendStyle != false) {
          for (var i = 0; i < frontendStyle.cssRules.length; i++) {
            var rule = frontendStyle.cssRules[i];
            if (typeof rule.selectorText != "undefined" && rule.selectorText.indexOf("_100vh") != -1) {
              _100vh_rules.push(rule);
            }
          }
          $rows.each(function() {
            var appliedMinHeightStyle = "";
            if (jQuery(this).hasClass("_100vh")) {
              var rowel = this;
              for (i = 0; i < _100vh_rules.length; i++) {
                var rule2 = _100vh_rules[i];
                if (rowel.matches(rule2.selectorText)) {
                  appliedMinHeightStyle = rule2.style.minHeight;
                }
              }
              jQuery(this).attr("data-original-100vh-height", appliedMinHeightStyle);
            } else if (jQuery(this).hasClass("rowcustomheight")) {
              var rowel = this;
              var $clone = jQuery(rowel).clone();
              $clone[0].classList.add("_100vh");
              for (i = 0; i < _100vh_rules.length; i++) {
                var rule2 = _100vh_rules[i];
                if ($clone[0].matches(rule2.selectorText)) {
                  appliedMinHeightStyle = rule2.style.minHeight;
                }
              }
              jQuery(this).attr("data-original-100vh-height", appliedMinHeightStyle);
              var $el = jQuery(this).find(".row-inner.rowcustomheight");
              var css = $el.attr("style");
              if (typeof css != "undefined" && css.indexOf("min-height:calc(") !== -1) {
                var rowcustomheight = css.replace("min-height:calc(", "");
                rowcustomheight = rowcustomheight.replace(");", "");
                jQuery(this).attr("data-original-rowcustomheight", rowcustomheight);
              }
            }
          });
        }
      } catch (error) {
        console.error(error);
      }
    }
  };
  function looseJsonParse(obj2) {
    return Function(`"use strict";return (${obj2})`)();
  }
  var getOriginalRowHeight = function(el) {
    if (typeof $rows != "undefined" && $rows.length > 0) {
      var min_height = jQuery(el).attr("data-original-100vh-height");
      if (typeof min_height != "undefined") {
        if (min_height == "100vh") {
          return window.innerHeight;
        }
        if (min_height.indexOf("calc(") != -1) {
          var ix1 = min_height.indexOf("calc(");
          var ix2 = min_height.indexOf(")");
          var newstr = min_height.substring(ix1 + 5, ix2);
          newstr = newstr.replace("100vh", "window.innerHeight");
          newstr = newstr.replace("px", "");
          var calculated = looseJsonParse(newstr);
          return calculated;
        }
      }
      console.error("no 100vh css rule found for this row! this should not happen");
      return window.innerHeight;
    }
  };
  var doPositioning = function() {
    setRowsHeight();
    alignColumns();
  };
  var setRowsHeight = function() {
    if (typeof $rows != "undefined" && $rows.length > 0) {
      $rows.each(function() {
        if (jQuery(this).attr("data-collapsed") == "false") {
          if (jQuery(this).hasClass("_100vh")) {
            size100VhRowHeights(this);
          } else if (jQuery(this).hasClass("rowcustomheight")) {
            var h = getCustomRowHeight(this);
            jQuery(this).css("min-height", h);
            jQuery(this).find(".rowcustomheight").css("min-height", h);
          }
        }
      });
    }
  };
  var size100VhRowHeights = function(row) {
    var originalRowHeight = getOriginalRowHeight(row);
    var tallestPosAbsoluteElementHeight = -1;
    jQuery(row).find(".col.absolute-position").each(function() {
      var rect = row.getBoundingClientRect();
      if (rect.height > tallestPosAbsoluteElementHeight) {
        tallestPosAbsoluteElementHeight = rect.height;
      }
    });
    if (tallestPosAbsoluteElementHeight !== -1 && originalRowHeight < tallestPosAbsoluteElementHeight) {
      jQuery(row).css("min-height", tallestPosAbsoluteElementHeight);
      jQuery(row).find("._100vh").css("min-height", tallestPosAbsoluteElementHeight);
    } else {
      jQuery(row).css("min-height", "");
      jQuery(row).find("._100vh").css("min-height", "");
    }
  };
  var getCustomRowHeight = function(row) {
    var _100vh_height = getOriginalRowHeight(row);
    var rowcustomheight = jQuery(row).attr("data-original-rowcustomheight");
    var customRowHeightinPx = calcCustomRowHeight(rowcustomheight, _100vh_height);
    var tallestPosAbsoluteElementHeight = -1;
    jQuery(row).find(".col.absolute-position").each(function() {
      var rect = row.getBoundingClientRect();
      if (rect.height > tallestPosAbsoluteElementHeight) {
        tallestPosAbsoluteElementHeight = rect.height;
      }
    });
    if (tallestPosAbsoluteElementHeight !== -1 && customRowHeightinPx < tallestPosAbsoluteElementHeight) {
      return tallestPosAbsoluteElementHeight;
    } else {
      return rowcustomheight;
    }
  };
  var alignColumns = function() {
    if (typeof $rows != "undefined" && $rows.length > 0) {
      if (Utility.isPhoneSize) {
        $rows.each(function() {
          if (jQuery(this).closest("#custom-phone-grid").length == 0) {
            jQuery(this).find(".column-wrap>.col.align-onethird").css("marginTop", "");
            jQuery(this).find(".column-wrap>.col.align-twothirds").css("marginBottom", "");
          }
        });
      } else {
        if ($rows.find(".column-wrap>.col.align-onethird").length > 0) {
          $rows.each(function() {
            var $row = jQuery(this);
            if ($row.find(".column-wrap>.col.align-onethird").length > 0) {
              var rowRect = this.getBoundingClientRect();
              var originalTop = rowRect.top;
              var top = originalTop;
              var rowRect = this.getBoundingClientRect();
              $row.find(".column-wrap>.col.align-onethird").each(function() {
                var $col = jQuery(this);
                var elRect = this.getBoundingClientRect();
                var elHeight = elRect.height;
                top += rowRect.height * (1 / 3) - elHeight / 2;
                var bottom = top + elHeight;
                if (top < originalTop || bottom > rowRect.bottom) {
                  $col.css("marginTop", "");
                } else {
                  $col.css("marginTop", rowRect.height * (1 / 3) - elHeight / 2);
                }
              });
            }
          });
        }
        if ($rows.find(".column-wrap>.col.align-twothirds").length > 0) {
          $rows.each(function() {
            var $row = jQuery(this);
            if ($row.find(".column-wrap>.col.align-twothirds").length > 0) {
              var rowRect = this.getBoundingClientRect();
              $row.find(".column-wrap>.col.align-twothirds").each(function() {
                var $col = jQuery(this);
                var elRect = this.getBoundingClientRect();
                var elHeight = elRect.height;
                var elMarginBottom = rowRect.height * (1 / 3) - elHeight / 2;
                var elTop = rowRect.bottom - elMarginBottom + elRect.height;
                var elBottom = rowRect.bottom - elMarginBottom;
                if (elTop < rowRect.top || elBottom > rowRect.bottom) {
                  $col.css("marginBottom", "");
                } else {
                  $col.css("marginBottom", rowRect.height * (1 / 3) - elHeight / 2);
                }
              });
            }
          });
        }
      }
    }
  };
  var bindOnContentReady8 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      $rows = void 0;
      var $target7;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target7 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target7 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      $rows = $target7.find(".row");
      set100vh();
      doPositioning();
      setTimeout(function() {
        doPositioning();
      }, 1e3);
    });
  };
  var initModule28 = function() {
    if (Utility.isTouchDevice === true) {
      window.laytheme.on("sizechanged", function() {
        set100vh();
      });
      jQuery(window).on("window_width_changed orientationchange", function() {
        doPositioning;
      });
    } else {
      window.laytheme.on("sizechanged", function() {
        set100vh();
      });
      jQuery(window).on("resize", doPositioning);
    }
    bindOnContentReady8();
  };
  var positioning = {
    initModule: initModule28,
    doPositioning
  };
  var positioning_default = positioning;

  // lay/frontend/assets/src/js/app/frontend/nag/nag_controller.js
  var initModule29 = function() {
    if (frontendPassedData.shownag == "show") {
      var ts = Date.now();
      jQuery("body").prepend(
        '<a class="_ts_' + ts + '" href="https://laytheme.com" target="_blank">Created with Laytheme.com</a><style>@keyframes fadeIn {0% { opacity: 0; }100% { opacity: 1; }}._ts_' + ts + "{color:black;text-decoration:none;border-bottom:none;letter-spacing:0.01em;animation: fadeIn 0.2s;animation-fill-mode: forwards;background:white;position:fixed;bottom:10px;right:10px;color:black;z-index:99999999999999999999999999;font-size:12px;line-height:25px;height:25px;padding-left:10px;padding-right:10px;border:1px solid rgb(230,230,230);border-radius:20px;font-family: Helvetica, sans-serif;transition: opacity 200ms ease;}</style>"
      );
    }
  };
  var nag_controller = {
    initModule: function() {
      initModule29();
    }
  };
  var nag_controller_default = nag_controller;

  // lay/frontend/assets/src/js/app/frontend/expandrow/expandrow_controller.js
  var $target6 = void 0;
  var initModule30 = function() {
    bindOnContentReady9();
  };
  var handleCustomRowHeights = function() {
  };
  var getExpandArray = function(expand) {
    var expandArr = [];
    if (expand.indexOf(",") === -1) {
      expandArr.push(expand);
    } else if (expand.indexOf(",") !== -1) {
      let temp = expand.split(",");
      for (var i = 0; i < temp.length; i++) {
        expandArr.push(temp[i]);
      }
    } else {
      expandArr.push(expand);
    }
    return expandArr;
  };
  var maybeReplaceText = function($anchor) {
    var text = $anchor.attr("data-replacementtext");
    if (text != "" && text != void 0) {
      var originalText = _.escape($anchor.html());
      $anchor.html(_.unescape(text));
      $anchor.attr("data-replacementtext", originalText);
      $anchor.toggleClass("lay-text-replaced");
    }
  };
  var toggleClass = function($anchor) {
    $anchor.toggleClass("expand-link-clicked");
  };
  var bindClicks = function() {
    $target6.find("a[data-expand]").off("click");
    $target6.find("a[data-expand]").on("click", function(e) {
      e.stopPropagation();
      e.preventDefault();
      var $anchor = jQuery(this);
      var expand = $anchor.attr("data-expand");
      var timing = $anchor.attr("data-animationtiming");
      if (timing.slice(-1) == ";") {
        timing = timing.substring(0, timing.length - 1);
      }
      var duration = $anchor.attr("data-animation");
      var expandArr = getExpandArray(expand);
      var collapse_other_rows = $anchor.attr("data-collapseotherrows");
      var scrolltoexpandedrow = $anchor.attr("data-scrolltoexpandedrow");
      maybeReplaceText($anchor);
      toggleClass($anchor);
      var $expandedRow = null;
      for (var i = 0; i < expandArr.length; i++) {
        var $row = $target6.find(".row-id-" + expandArr[i]);
        if ($row.length > 0) {
          var isCollapsed = $row[0].getAttribute("data-collapsed") === "true";
          if (isCollapsed) {
            expandRow($row[0], timing, duration);
            $row[0].setAttribute("data-collapsed", "false");
            $expandedRow = $row;
          } else {
            collapseRow($row[0], timing, duration);
          }
        }
      }
      if (scrolltoexpandedrow == "true" && $expandedRow != null && $expandedRow.length > 0) {
        setTimeout(function() {
          var top = $expandedRow.offset().top;
          top = anchorbehaviour_default.addSpaceTop(top);
          jQuery("html").animate(
            {
              scrollTop: top
            },
            300,
            "easeInOutQuad",
            function() {
              var rowid2 = $expandedRow.attr("id");
              if (typeof rowid2 != "undefined" && rowid2 != "" && rowid2 != false) {
                window.location.hash = rowid2;
              }
            }
          );
        }, duration);
      }
      if (collapse_other_rows == "true") {
        var collapsibleArr = getUserCollapsibleRows();
        for (var index = 0; index < collapsibleArr.length; index++) {
          var rowid = collapsibleArr[index];
          if (expandArr.indexOf(rowid) == -1) {
            var $row = $target6.find('.row[data-collapsed="false"].row-id-' + rowid);
            if ($row.length > 0) {
              collapseRow($row[0], timing, duration);
              $target6.find('a[href="#expandrow"].lay-text-replaced').each(function() {
                var $anchor2 = jQuery(this);
                var expand2 = $anchor2.attr("data-expand");
                var expandArr2 = getExpandArray(expand2);
                if (expandArr2.indexOf(rowid) != -1) {
                  maybeReplaceText($anchor2);
                  toggleClass($anchor2);
                }
              });
            }
          }
        }
      }
    });
  };
  var getUserCollapsibleRows = function() {
    var targetRows = [];
    $target6.find('a[href="#expandrow"]').each(function() {
      var expand = jQuery(this).attr("data-expand");
      var arr = getExpandArray(expand);
      targetRows = _.union(targetRows, arr);
    });
    return targetRows;
  };
  function collapseRow(row, timing, duration) {
    jQuery(row).css({
      transition: "height " + duration + "ms " + timing + ", min-height " + duration + "ms " + timing
    });
    row.classList.add("hide-overflow");
    var sectionHeight = row.scrollHeight;
    var rowTransition = row.style.transition;
    row.style.transition = "";
    requestAnimationFrame(function() {
      row.style.height = sectionHeight + "px";
      row.style.transition = rowTransition;
      jQuery(row).one("transitionend", function(e) {
        window.laytheme.trigger("lay_row_collapsed");
      });
      requestAnimationFrame(function() {
        row.style.height = "0px";
        if (row.classList.contains("rowcustomheight") || row.classList.contains("_100vh")) {
          row.style.minHeight = "0px";
        }
      });
    });
    row.setAttribute("data-collapsed", "true");
  }
  function expandRow(row, timing, duration) {
    jQuery(row).css({
      transition: "height " + duration + "ms " + timing + ", min-height " + duration + "ms " + timing
    });
    var sectionHeight = row.scrollHeight;
    row.style.height = sectionHeight + "px";
    jQuery(row).one("transitionend", function(e) {
      if (jQuery(this).attr("data-collapsed") == "false") {
        this.style.height = null;
        this.classList.remove("hide-overflow");
        if (row.classList.contains("rowcustomheight") || row.classList.contains("_100vh")) {
          positioning_default.doPositioning();
        }
      }
      window.laytheme.trigger("lay_row_expanded");
    });
    row.setAttribute("data-collapsed", "false");
  }
  var bindOnContentReady9 = function() {
    window.laytheme.on("content_ready", function(typeOfContentThatIsReady) {
      $target6 = void 0;
      switch (typeOfContentThatIsReady) {
        case "desktop":
          $target6 = jQuery("#grid, .cover-region-desktop, #footer");
          break;
        case "phone":
          var footerHasPhoneCPL = jQuery("#footer-custom-phone-grid").length != 0;
          var hasCPL = jQuery("#custom-phone-grid").length != 0;
          if (footerHasPhoneCPL && hasCPL) {
            $target6 = jQuery("#custom-phone-grid, .cover-region-phone, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && hasCPL) {
            $target6 = jQuery("#custom-phone-grid, .cover-region-phone, #footer");
          } else if (footerHasPhoneCPL && !hasCPL) {
            $target6 = jQuery("#grid, .cover-region-desktop, #footer-custom-phone-grid");
          } else if (!footerHasPhoneCPL && !hasCPL) {
            $target6 = jQuery("#grid, .cover-region-desktop, #footer");
          }
          break;
      }
      handleCustomRowHeights();
      bindClicks();
    });
  };
  var expandrow_controller = {
    initModule: initModule30
  };
  var expandrow_controller_default = expandrow_controller;

  // lay/frontend/assets/src/js/app/frontend/vimeo_fullscreen_fix/vimeo_fullscreen_fix.js
  var bindFullscreenChange = function() {
    var showMenuAndSiteTitle = function() {
      jQuery(".sitetitle, nav, .navbar, .mobile-title, .lay-mobile-icons-wrap, #lay_canvas").css("display", "");
    };
    var hideMenuAndSiteTitle = function() {
      jQuery(".sitetitle, nav, .navbar, .mobile-title, .lay-mobile-icons-wrap, #lay_canvas").css("display", "none");
    };
    var onChange = function() {
      if (document.webkitFullscreenElement == null) {
        showMenuAndSiteTitle();
      } else {
        hideMenuAndSiteTitle();
      }
    };
    document.onwebkitfullscreenchange = function() {
      onChange();
    };
  };

  // lay/frontend/assets/src/js/app/app.js
  load_cpl_or_desktop_content_controller_default.initModule();
  qtranslate_controller_default.initModule();
  polylang_controller_default.initModule();
  if (frontendPassedData.is_customize != true) {
    intro_controller_new_default.init();
  } else {
    intro_controller_new_default.cancelLoading();
  }
  prevnext_controller_default.initModule();
  prevnext_news_controller_default.initModule();
  history_controller_new_default.initModule();
  utility_controller.initModule();
  breakpoints_controller.initModule();
  layout_controller_default.initModule();
  parallax_controller_default.initModule();
  html5video_controller_default.initModule();
  scrolltotop_controller_default.initModule();
  showhide_onscroll_controller_default.initModule();
  maxwidth_controller_default.initModule();
  mobile_menu_controller_default.initModule();
  mobile_projectthumbnails_controller_default.initModule();
  polyfills_controller_default.initModule();
  cover_controller_default.initModule();
  search_controller_default.initModule();
  element_animate_in_on_scroll_default.initModule();
  anchorbehaviour_default.initModule();
  thumbnailgrid_controller_default.initModule();
  elementgrid_controller_default.initModule();
  marquee_controller_default.initModule();
  projectindex_controller_default.initModule();
  socialmediaicons_controller_default.initModule();
  productsgrid_controller_default.initModule();
  transition_timer_controller.initModule();
  video_background_default.initModule();
  submenu_default.initModule();
  thumbnailgrid_tagfilter_sizing_controller_default.initModule();
  positioning_default.initModule();
  nag_controller_default.initModule();
  expandrow_controller_default.initModule();
  bindFullscreenChange();
  animations_controller_default.initModule();
  var type = jQuery("body").attr("data-type");
  var id = jQuery("body").attr("data-id");
  var slug = jQuery("body").attr("data-slug");
  var catid = jQuery("body").attr("data-catid");
  jQuery(document).ready(function() {
    woocommerce_default.initModule();
    setTimeout(function() {
      window.laytheme.trigger("newpage");
      window.laytheme.trigger("newpageshown", {}, type, { id, type, slug, catid });
    }, 0);
  });
  window.lt_load_visible_images_then_rest_controller = {};
  window.lt_load_visible_images_then_rest_controller.load_visible_images_then_rest_controller = load_visible_images_then_rest_controller;
  window.lt_utility_controller = {};
  window.lt_utility_controller.Utility = Utility;
  window.lt_utility_controller.utility_controller = utility_controller;
  window.lt_showhide_onscroll_controller = {};
  window.lt_showhide_onscroll_controller.default = showhide_onscroll_controller_default;
})();
